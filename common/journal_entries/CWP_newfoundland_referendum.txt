newfoundland_referendum = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect

	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_industry.dds"

	# optional trigger which determines if a journal entry can be shown, default = no
	# is ignored when JE is added through `add_journal_entry` effect
	is_shown_when_inactive = {
	}

	# one or more scripted buttons. See common/scripted_buttons/_scripted_buttons.info for more info
	#scripted_button = scripted_button_key

	# optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	# is ignored when JE is added through `add_journal_entry` effect
	possible = {
	}

	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		trigger_event = {
			id = newfoundland_referendum.999 # setup leader and unifier
			days = 1
		}
	}
	
	# completion trigger, use is_goal_complete = yes if you're testing a tracked goal metric
	# if left blank, cannot be completed
	complete = {
		hidden_trigger = {
			has_global_variable = newfoundland_referendum_done
		}
	}
	
	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
		hidden_effect = {
			if = {
				limit = {
					has_global_variable = newfoundland_dominion
					NOR = {
						has_global_variable = newfoundland_confederate
						has_global_variable = newfoundland_puppet
						has_global_variable = newfoundland_independent
					}
				}
				c:CAN = {
					trigger_event = {
						id = newfoundland_referendum.13
						days = 1
					}
				}
				c:GBR = {
					trigger_event = {
						id = newfoundland_referendum.14
						days = 1
					}
				}
			}
			if = {
				limit = {
					has_global_variable = newfoundland_confederate
				}
				c:CAN = {
					trigger_event = {
						id = newfoundland_referendum.16
						days = 1
					}
				}
				c:GBR = {
					trigger_event = {
						id = newfoundland_referendum.15
						days = 1
					}
				}
			}
			if = {
				limit = {
					has_global_variable = newfoundland_puppet
				}
				c:CAN = {
					trigger_event = {
						id = newfoundland_referendum.18
						days = 1
					}
				}
				c:GBR = {
					trigger_event = {
						id = newfoundland_referendum.17
						days = 1
					}
				}
			}
			if = {
				limit = {
					has_global_variable = newfoundland_independent
				}
				c:CAN = {
					trigger_event = {
						id = newfoundland_referendum.20
						days = 1
					}
				}
				c:GBR = {
					trigger_event = {
						id = newfoundland_referendum.19
						days = 1
					}
				}
				c:USA = {
					trigger_event = {
						id = newfoundland_referendum.21
						days = 180
					}
				}
			}
			if = {
				limit = {
					has_global_variable = newfoundland_referendum_done
				}
				trigger_event = {
					id = newfoundland_referendum.997
					days = 75
				}
			}
		}		
	}
	
	# failure trigger
	# should spawn event explaining what happens when triggered, framed as a failure;
	# if left blank, cannot fail
	fail = {}
	
	# effect which is executed when 'fail' trigger becomes true
	on_fail = {}
	
	# optional invalidation trigger
	# should not notify player when it triggers
	# just clean up and silently disappear due to journal entry no longer being valid;
	# if left blank, cannot be invalidated
	invalid = {
		OR = {
			NAND = {
				exists = c:NEW
				exists = c:CAN
				exists = c:GBR
			}
			c:GBR = {
				OR = {
					has_war_with = c:NEW
					has_war_with = c:CAN
				}
			}
			c:CAN = {
				OR = {
					has_war_with = c:NEW
					has_war_with = c:GBR
				}
			}
			c:NEW = {
				is_subject = no
			}
		}
	}
	
	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {}
	
	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = newfoundland_referendum_desc_41
				trigger = {
					has_global_variable = newfoundland_independent
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_40
				trigger = {
					has_global_variable = newfoundland_independent
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_39
				trigger = {
					has_global_variable = newfoundland_independent
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_38
				trigger = {
					has_global_variable = newfoundland_puppet
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_37
				trigger = {
					has_global_variable = newfoundland_puppet
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_36
				trigger = {
					has_global_variable = newfoundland_puppet
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_35
				trigger = {
					has_global_variable = newfoundland_dominion
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_34
				trigger = {
					has_global_variable = newfoundland_dominion
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_33
				trigger = {
					has_global_variable = newfoundland_dominion
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_32
				trigger = {
					has_global_variable = newfoundland_confederate
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_31
				trigger = {
					has_global_variable = newfoundland_confederate
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_30
				trigger = {
					has_global_variable = newfoundland_confederate
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_29
				trigger = {
					has_global_variable = newfoundland_first_referendum_failed
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_28
				trigger = {
					has_global_variable = newfoundland_first_referendum_failed
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_27
				trigger = {
					has_global_variable = newfoundland_first_referendum_failed
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_26
				trigger = {
					has_global_variable = newfoundland_first_referendum_yes_independence
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_25
				trigger = {
					has_global_variable = newfoundland_first_referendum_yes_independence
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_24
				trigger = {
					has_global_variable = newfoundland_first_referendum_yes_independence
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_23
				trigger = {
					has_global_variable = newfoundland_first_referendum_no_independence
					this = c:NEW
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_22
				trigger = {
					has_global_variable = newfoundland_first_referendum_no_independence
					this = c:CAN
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_21
				trigger = {
					has_global_variable = newfoundland_first_referendum_no_independence
					this = c:GBR
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_20
				trigger = {
					this = c:NEW
					has_global_variable = independence_decision_canada
					has_global_variable = independence_decision_uk
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_19
				trigger = {
					this = c:NEW
					NOT = { has_global_variable = independence_decision_canada }
					has_global_variable = independence_decision_uk
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_18
				trigger = {
					this = c:NEW
					has_global_variable = independence_decision_canada
					NOT = { has_global_variable = independence_decision_uk }
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_17
				trigger = {
					this = c:NEW
					OR = {
						has_global_variable = ottawa_choose_confederation
						has_global_variable = ottawa_choose_dominion
						has_global_variable = ottawa_no_preference
					}
					OR = {
						has_global_variable = london_choose_confederation
						has_global_variable = london_choose_dominion
						has_global_variable = london_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_16
				trigger = {
					this = c:NEW
					OR = {
						has_global_variable = ottawa_choose_confederation
						has_global_variable = ottawa_choose_dominion
						has_global_variable = ottawa_no_preference
					}
					NOR = {
						has_global_variable = london_choose_confederation
						has_global_variable = london_choose_dominion
						has_global_variable = london_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_15
				trigger = {
					this = c:NEW
					NOR = {
						has_global_variable = ottawa_choose_confederation
						has_global_variable = ottawa_choose_dominion
						has_global_variable = ottawa_no_preference
					}
					OR = {
						has_global_variable = london_choose_confederation
						has_global_variable = london_choose_dominion
						has_global_variable = london_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_14
				trigger = {
					this = c:CAN
					has_global_variable = ottawa_choose_dominion
					NOR = {
						has_global_variable = ottawa_choose_confederation
						has_global_variable = ottawa_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_13
				trigger = {
					this = c:CAN
					has_global_variable = ottawa_no_preference
					NOR = {
						has_global_variable = ottawa_choose_confederation
						has_global_variable = ottawa_choose_dominion
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_12
				trigger = {
					this = c:CAN
					has_global_variable = ottawa_choose_confederation
					NOR = {
						has_global_variable = ottawa_choose_dominion
						has_global_variable = ottawa_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_11
				trigger = {
					this = c:GBR
					has_global_variable = london_choose_dominion
					NOR = {
						has_global_variable = london_choose_confederation
						has_global_variable = london_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_10
				trigger = {
					this = c:GBR
					has_global_variable = london_no_preference
					NOR = {
						has_global_variable = london_choose_confederation
						has_global_variable = london_choose_dominion
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_9
				trigger = {
					this = c:GBR
					has_global_variable = london_choose_confederation
					NOR = {
						has_global_variable = london_choose_dominion
						has_global_variable = london_no_preference
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_8
				trigger = {
					this = c:CAN
					OR = {
						has_global_variable = ottawa_delegation_only
						has_global_variable = london_and_ottawa_delegation
					}
					NOT = { has_global_variable = london_delegation_only }
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_7
				trigger = {
					this = c:GBR
					OR = {
						has_global_variable = london_delegation_only
						has_global_variable = london_and_ottawa_delegation
					}
					NOT = { has_global_variable = ottawa_delegation_only }
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_6
				trigger = {
					this = c:NEW
					has_global_variable = london_and_ottawa_delegation
					NOR = {
						has_global_variable = london_delegation_only
						has_global_variable = ottawa_delegation_only
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_5
				trigger = {
					this = c:NEW
					has_global_variable = ottawa_delegation_only
					NOR = {
						has_global_variable = london_delegation_only
						has_global_variable = london_and_ottawa_delegation
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_4
				trigger = {
					this = c:NEW
					has_global_variable = london_delegation_only
					NOR = {
						has_global_variable = ottawa_delegation_only
						has_global_variable = london_and_ottawa_delegation
					}
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_3
				trigger = {
					this = c:NEW
					has_global_variable = newfoundland_national_convention_start
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_2
				trigger = {
					this = c:CAN
					has_global_variable = newfoundland_national_convention_start
				}
			}
			triggered_desc = {
				desc = newfoundland_referendum_desc_1
				trigger = {
					this = c:GBR
					has_global_variable = newfoundland_national_convention_start
				}
			}
		}
	}
	
	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 1825

	# effect which is executed when journal entry is timed out
	on_timeout = {}
	
	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
	
	}
	
	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		events = {
			delay = { days = { 0 7 } }
			newfoundland_referendum.1	# Calling for a Newfoundland National Convention
			newfoundland_referendum.2	# Newfoundland chooses where to send delegates: London only? Ottawa only? Both?
			newfoundland_referendum.3	# London Delegation
			newfoundland_referendum.4	# Ottawa Delegation
			newfoundland_referendum.51	# UK decides on whether Newfoundland should have the option of Independence
			newfoundland_referendum.52	# Canada decides on whether Newfoundland should have the option of Independence
			newfoundland_referendum.998	# Determine which first referendum gets chosen: With or without an independence option
			newfoundland_referendum.6	# First referendum with independence option
			newfoundland_referendum.7	# First referendum without independence option
			newfoundland_referendum.8	# Second referendum
			newfoundland_referendum.9	# Newfoundland becomes a British Dominion
			newfoundland_referendum.10	# Newfoundland confederates with Canada
			newfoundland_referendum.11	# Newfoundland remains a British Dependent Territory
			newfoundland_referendum.12	# Newfoundland becomes independent
		}
	}
	
	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
	
	}
	
	# a script value computing the goal completion metric
	current_value = {
		if = {
			limit = {
				has_global_variable = newfoundland_national_convention_start
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_global_variable = london_and_ottawa_delegation
					has_global_variable = london_delegation_only
					has_global_variable = ottawa_delegation_only
				}
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_global_variable = london_choose_confederation
					has_global_variable = london_choose_dominion
					has_global_variable = london_no_preference
					has_global_variable = ottawa_choose_confederation
					has_global_variable = ottawa_choose_dominion
					has_global_variable = ottawa_no_preference
				}
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_global_variable = newfoundland_first_referendum_no_independence
					has_global_variable = newfoundland_first_referendum_yes_independence
				}
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_global_variable = newfoundland_independent
					has_global_variable = newfoundland_puppet
				}
			}
			add = 2
		}
		if = {
			limit = {
				has_global_variable = newfoundland_first_referendum_failed
			}
			add = 1
		}
		if = {
			limit = {
				OR = {
					has_global_variable = newfoundland_dominion
					has_global_variable = newfoundland_confederate
				}
			}
			add = 1
		}
		if = {
			limit = {
				has_global_variable = newfoundland_referendum_done
			}
			add = 1
		}
	}

	# when the journal entry is activated current_value and goal_add_value are evaluated and added together to determine the goal value
	goal_add_value = {
		add = 7
	}

	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 200

	# yes/no, determines if this journal entry should be transfered if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = no

	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = no

	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
	}

	# yes/no, if yes, a progress bar is shown
	progressbar = yes

	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = no

	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	#progress_desc = 0

	# tutorial lesson explaining HOW to complete the Journal Entry
	

	# tutorial lesson explaining the WHY around the Journal Entry
	

	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}