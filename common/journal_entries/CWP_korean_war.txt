korean_war = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect
	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_industry.dds"
	group = je_group_historical_content	
	scripted_button = korean_war_aggressive_stance_button
	scripted_button = korean_war_diplomatic_stance_button
	# optional trigger which determines if a journal entry can be shown, default = no
	# is ignored when JE is added through `add_journal_entry` effect
	is_shown_when_inactive = {
		exists = c:NRK
		exists = c:STK
		NOT = {
			exists = c:KOR
		}
		OR = {
			#Is Korea
			this = c:NRK
			this = c:STK
			#Is Korea's overlord
			c:NRK = {
				is_subject_of = PREV
			}
			c:STK = {
				is_subject_of = PREV
			}
			has_diplomatic_pact = {
				who = c:NRK
				type = alliance
			}
			has_diplomatic_pact = {
				who = c:STK
				type = alliance
			}
			#If an additional country is to be added per event | unused
			is_target_in_global_variable_list = {
				name = je_korean_reunification_can_vote
				target = THIS
			}
		}
	}
	possible = {
		exists = c:NRK
		exists = c:STK
		NOR = {
			c:STK = {
				has_truce_with = c:NRK
			}
			c:NRK = {
				has_truce_with = c:STK
			}
		}
		#Does not trigger if Korea is at war
		NOT = {
			c:NRK = {
				is_diplomatic_play_target = yes
			}
		}
		NOT = {
			c:STK = {
				is_diplomatic_play_target = yes
			}
		}
		OR = {
			custom_tooltip = {
				text = un_korean_reunification_failed_tt
				has_global_variable = korean_reunification_failed
			}
			custom_tooltip = {
				text = un_korean_resolution_failed_tt
				has_global_variable = korean_resolution_fail
			}
			custom_tooltip = {
				text = korea_tensions_tt
				has_global_variable = korean_tensions
			}
		}
	}
	# one or more scripted buttons. See common/scripted_buttons/_scripted_buttons.info for more info
	#scripted_button = scripted_button_key
	# optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	# is ignored when JE is added through `add_journal_entry` effect
	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		if = {
			limit = {
				NOT = {
					has_global_variable = korean_tensions
				}
			}
			set_global_variable = {
				name = korean_tensions
				value = 50
			}
		}
		if = {
			limit = {
				OR = {
					this = c:STK
					this = c:NRK
				}
			}
			if = {
				limit = {
					has_law = law_type:law_administrative
				}
				activate_law = law_type:law_executive
			}
			if = {
				limit = {
					is_subject_type = subject_type_military_occupation
				}
				change_relations = {
					country = this.overlord
					value = 100
				}
				this.overlord = {
					set_secret_goal = {
						country = root
						secret_goal = protect
					}
				}
				create_diplomatic_pact = {
					country = this.overlord
					type = alliance
				}
				if = {
					limit = {
						this = c:STK
						exists = c:USA
					}
					c:USA = {
						create_diplomatic_pact = {
							country = c:STK
							type = bankroll
						}
					}
				}
				make_independent = yes
			}
		}
	}
	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
		custom_tooltip = {
			text = korean_reunification_complete_tt
			has_global_variable = korean_tensions
			global_var:korean_tensions <= 0
		}
	}
	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
		custom_tooltip = {
			text = resume_korean_negotiations_tt
			remove_global_variable = korean_tensions
			remove_global_variable = korean_reunification_failed
			every_country = {
				limit = {
					OR = {
						#Is Korea
						this = c:NRK
						this = c:STK
						#Is Korea's overlord
						c:NRK = {
							is_subject_of = PREV
						}
						c:STK = {
							is_subject_of = PREV
						}
						# Has land border with either korea
						has_strategic_land_adjacency = c:NRK
						has_strategic_land_adjacency = c:STK
						#If an additional country is to be added per event | unused
						is_target_in_global_variable_list = {
							name = je_korean_reunification_can_vote
							target = THIS
						}
					}
				}
				add_journal_entry = {
					type = je_korean_reunification
					target = this
				}
			}
		}
	}
	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
		custom_tooltip = {
			text = korean_reunification_failed_tt
			has_global_variable = korean_tensions
			global_var:korean_tensions >= 100
		}
	}
	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
		if = {
			limit = {
				this = c:STK
			}
			c:NRK = {
				add_modifier = {
					name = last_stand
					months = 60
				}
			}
			c:STK = {
				add_modifier = {
					name = last_stand
					months = 60
				}
			}
			remove_global_variable = korean_tensions
			if = {
				limit = {
					trigger_if = {
						limit = {
							c:NRK = {
								is_subject = yes
							}
						}
						c:NRK.overlord = {
							has_variable = korean_war_aggressive_stance
						}
					}
					trigger_else = {
						c:NRK = {
							has_variable = korean_war_aggressive_stance
						}
					}
				}
				c:NRK = {
					save_scope_as = korean_war_initiator
				}
				c:STK = {
					save_scope_as = korean_war_target
				}
			}
			else = {
				c:STK = {
					save_scope_as = korean_war_initiator
				}
				c:NRK = {
					save_scope_as = korean_war_target
				}
			}
			scope:korean_war_initiator = {
				create_diplomatic_play = {
					name = korean_war_play
					type = dp_korean_unification
					target_country = scope:korean_war_target
					escalation = 30
					add_war_goal = {
						holder = c:NRK
						type = humiliation
						target_country = c:USA
					}
					add_war_goal = {
						holder = c:STK
						type = humiliation
						target_country = c:RUS
					}
				}
			}
		}
	}
	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
		OR = {
			NOR = {
				exists = c:STK
				exists = c:NRK
			}
			exists = c:KOR
			c:STK = {
				has_war_with = c:NRK
			}
			c:NRK = {
				has_war_with = c:STK
			}
		}
	}
	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {
		remove_global_variable = korean_tensions
	}
	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = korean_tensions_high_loc
				trigger = {
					has_global_variable = korean_tensions
					global_var:korean_tensions > 75
				}
			}
			triggered_desc = {
				desc = korean_tensions_medium_loc
				trigger = {
					has_global_variable = korean_tensions
					global_var:korean_tensions >= 50
				}
			}
			triggered_desc = {
				desc = korean_tensions_low_loc
				trigger = {
					has_global_variable = korean_tensions
					global_var:korean_tensions < 50
				}
			}
			triggered_desc = {
				desc = korean_war_frozen
			}
		}
	}
	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 0
	# effect which is executed when journal entry is timed out
	on_timeout = {
	}
	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
		effect = {
			if = {
				limit = {
					c:STK ?= this
					has_global_variable = korean_tensions
				}
				change_global_variable = {
					name = korean_tensions
					add = korean_tension_growth
				}
				clamp_global_variable = {
					name = korean_tensions
					max = 100
					min = 0
				}
			}
		}
	}
	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		random_events = {
			#korea_war_events.10
		}
	}
	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
		effect = {
		}
	}
	# a script value computing the goal completion metric
	current_value = {
		value = 0
		if = {
			limit = {
				has_global_variable = korean_tensions
				has_journal_entry = korean_war
			}
			value = global_var:korean_tensions
		}
	}
	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 200
	# yes/no, determines if this journal entry should be transfered if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = no
	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = yes
	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
	}
	# yes/no, if yes, a progress bar is shown
	progressbar = no
	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = yes
	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	#progress_desc = {
	#	first_valid = {
	#		triggered_desc = {
	#			desc = korean_tensions_rising_loc
	#			trigger = {
	#				korean_tension_growth > 0
	#			}
	#		}
	#		triggered_desc = {
	#			desc = korean_tensions_falling_loc
	#			trigger = {
	#				korean_tension_growth < 0
	#			}
	#		}
	#		triggered_desc = {
	#			desc = korean_war_frozen
	#		}
	#	}
	#}
	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}
