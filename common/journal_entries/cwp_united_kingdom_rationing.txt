# United Kingdom Post War Journals
	# Rationing
	# Military Demobilization / Return to Peacetime Economy
	# Balance-of-Payments / Dealing with the United States
	# Maintain World Power Image or Accept Future as Great Power

united_kingdom_rationing = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect

	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_industry.dds"

	# optional trigger which determines if a journal entry can be shown, default = no
	# is ignored when JE is added through `add_journal_entry` effect
	is_shown_when_inactive = { }

	# one or more scripted buttons. See common/scripted_buttons/_scripted_buttons.info for more info
	#scripted_button = scripted_button_key

	# optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	# is ignored when JE is added through `add_journal_entry` effect
	possible = {
		game_date < 1956.1.2
	}
	
	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		# start of rationing journal entry variable
		set_variable = gbr_started_rationing
		
		# initial core variables
		gbr_set_gbr_core_variables = yes
		
		# Start of Rationing Event
		trigger_event = {
			id = united_kingdom_post_war_events.100
			days = 1
		}
		
		# Event to determine which goods will start as being rationed
		hidden_effect = {
			trigger_event = { 
				id = united_kingdom_post_war_events.901
				days = 1
			}
		}
	}
	
	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
		OR = {
			scope:journal_entry = { is_goal_complete = yes }
			hidden_trigger = { has_variable = gbr_rationing_over }
		}
	}
	
	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
		if = { limit = { NOT = { has_variable = gbr_ended_rationing_early } }
			trigger_event = united_kingdom_post_war_events.110
		}
		else_if = { limit = { has_variable = gbr_ended_rationing_early }
			trigger_event = united_kingdom_post_war_events.121
		}
		hidden_effect = {
			trigger_event = {
				id = united_kingdom_post_war_events.902
				days = 40
			}
		}
	}
	
	# Scripted Buttons to track goods
	scripted_button = gbr_devalue_currency_button
	scripted_button = gbr_end_rationing_early_button
	scripted_button = gbr_visible_staple_goods_button
	scripted_button = gbr_hidden_staple_goods_button
	scripted_button = gbr_visible_industrial_goods_button
	scripted_button = gbr_hidden_industrial_goods_button
	scripted_button = gbr_visible_luxury_goods_button
	scripted_button = gbr_hidden_luxury_goods_button
	scripted_button = gbr_visible_all_goods_button
	scripted_button = gbr_hidden_all_goods_button
	scripted_button = gbr_aluminum_button
	scripted_button = gbr_bauxite_button
	scripted_button = gbr_fertilizer_button
	scripted_button = gbr_clothes_button
	scripted_button = gbr_coal_button
	scripted_button = gbr_coffee_button
	scripted_button = gbr_copper_button
	scripted_button = gbr_engines_button
	scripted_button = gbr_explosives_button
	scripted_button = gbr_fabric_button
	scripted_button = gbr_fish_button
	scripted_button = gbr_fruit_button
	scripted_button = gbr_glass_button
	scripted_button = gbr_grain_button
	scripted_button = gbr_groceries_button	
	scripted_button = gbr_high_quality_fabric_button
	scripted_button = gbr_iron_button
	scripted_button = gbr_lead_button
	scripted_button = gbr_liquor_button
	scripted_button = gbr_meat_button
	scripted_button = gbr_oil_button
	scripted_button = gbr_opium_button
	scripted_button = gbr_paper_button
	scripted_button = gbr_pharmaceuticals_button
	scripted_button = gbr_phosphorus_button
	scripted_button = gbr_plastics_button
	scripted_button = gbr_refined_fuel_button
	scripted_button = gbr_rubber_button
	scripted_button = gbr_steel_button
	scripted_button = gbr_sugar_button
	scripted_button = gbr_tea_button
	scripted_button = gbr_tobacco_button
	scripted_button = gbr_tools_button
	scripted_button = gbr_wine_button
	scripted_button = gbr_wood_button
	
	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		first_valid = {
			triggered_desc = {
				desc = gbr_inflation_rate_amount_name
				trigger = { has_variable = gbr_started_rationing }
			}
		}
	}
	
	modifiers_while_active = {
	}
	
	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
	}
	
	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
	}
	
	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 3650
	
	# effect which is executed when journal entry is timed out
	on_timeout = {
		trigger_event = united_kingdom_post_war_events.111
		hidden_effect = {
			trigger_event = {
				id = united_kingdom_post_war_events.902
				days = 40
			}
		}
	}
	
	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
		effect = {
			# Count how many buildings there are that output the good being rationed
			gbr_weekly_pulse_building_count = yes
			
			# Determine rationing progress
			if = {
				limit = { has_variable = gbr_rationing_aluminum }
				gbr_weekly_pulse_rationing_aluminum_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_bauxite }
				gbr_weekly_pulse_rationing_bauxite_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_fertilizer }
				gbr_weekly_pulse_rationing_fertilizer_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_clothes }
				gbr_weekly_pulse_rationing_clothes_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_coal }
				gbr_weekly_pulse_rationing_coal_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_coffee }
				gbr_weekly_pulse_rationing_coffee_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_copper }
				gbr_weekly_pulse_rationing_copper_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_engines }
				gbr_weekly_pulse_rationing_engines_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_explosives }
				gbr_weekly_pulse_rationing_explosives_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_fabric }
				gbr_weekly_pulse_rationing_fabric_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_fish }
				gbr_weekly_pulse_rationing_fish_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_fruit }
				gbr_weekly_pulse_rationing_fruit_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_glass }
				gbr_weekly_pulse_rationing_glass_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_grain }
				gbr_weekly_pulse_rationing_grain_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_groceries }
				gbr_weekly_pulse_rationing_groceries_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_high_quality_fabric }
				gbr_weekly_pulse_rationing_high_quality_fabric_progress = yes
			}
			if = { 
				limit = { has_variable = gbr_rationing_iron }
				gbr_weekly_pulse_rationing_iron_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_lead }
				gbr_weekly_pulse_rationing_lead_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_liquor }
				gbr_weekly_pulse_rationing_liquor_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_meat }
				gbr_weekly_pulse_rationing_meat_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_oil }
				gbr_weekly_pulse_rationing_oil_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_opium }
				gbr_weekly_pulse_rationing_opium_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_paper }
				gbr_weekly_pulse_rationing_paper_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_pharmaceuticals }
				gbr_weekly_pulse_rationing_pharmaceuticals_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_phosphorus }
				gbr_weekly_pulse_rationing_phosphorus_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_plastics }
				gbr_weekly_pulse_rationing_plastics_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_refined_fuel }
				gbr_weekly_pulse_rationing_refined_fuel_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_rubber }
				gbr_weekly_pulse_rationing_rubber_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_steel }
				gbr_weekly_pulse_rationing_steel_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_sugar }
				gbr_weekly_pulse_rationing_sugar_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_tea }
				gbr_weekly_pulse_rationing_tea_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_tobacco }
				gbr_weekly_pulse_rationing_tobacco_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_tools }
				gbr_weekly_pulse_rationing_tools_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_wine }
				gbr_weekly_pulse_rationing_wine_progress = yes
			}
			if = {
				limit = { has_variable = gbr_rationing_wood }
				gbr_weekly_pulse_rationing_wood_progress = yes
			}
			# Reduce rationing progress is good isn't being rationed & isn't 0
			gbr_rationing_ended_progress_reduction = yes
			
			# Determine how much inflation will be applied
			gbr_rationing_inflation_change = yes
			
			# Apply the inflation change then calculate the effect
			change_variable = { name = gbr_rationing_inflation_rate add = var:gbr_added_inflation }
			clamp_variable = { name = gbr_rationing_inflation_rate max = 50 min = 0 }
			if = {
				limit = { var:gbr_rationing_inflation_rate >= 5 }
				gbr_rationing_inflation_effect = yes
			}
			
			# Seasonal Weather
			gbr_weather_season_check = yes
			gbr_seasonal_weather_events_check = yes
			
			# Random events that might happen
			# gbr_random_rationing_events_check = yes
		}
	}
	
	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		effect = {
			if = {
				limit = { has_variable = gbr_rationing_aluminum }
				change_variable = { name = gbr_aluminum_progress add = var:gbr_aluminum_progress_next }
				clamp_variable = { name = gbr_aluminum_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_bauxite }
				change_variable = { name = gbr_bauxite_progress add = var:gbr_bauxite_progress_next }
				clamp_variable = { name = gbr_bauxite_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_fertilizer }
				change_variable = { name = gbr_fertilizer_progress add = var:gbr_fertilizer_progress_next }
				clamp_variable = { name = gbr_fertilizer_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_clothes }
				change_variable = { name = gbr_clothes_progress add = var:gbr_clothes_progress_next }
				clamp_variable = { name = gbr_clothes_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_coal }
				change_variable = { name = gbr_coal_progress add = var:gbr_coal_progress_next }
				clamp_variable = { name = gbr_coal_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_coffee }
				change_variable = { name = gbr_coffee_progress add = var:gbr_coffee_progress_next }
				clamp_variable = { name = gbr_coffee_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_copper }
				change_variable = { name = gbr_copper_progress add = var:gbr_copper_progress_next }
				clamp_variable = { name = gbr_copper_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_engines }
				change_variable = { name = gbr_engines_progress add = var:gbr_engines_progress_next }
				clamp_variable = { name = gbr_engines_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_explosives }
				change_variable = { name = gbr_explosives_progress add = var:gbr_explosives_progress_next }
				clamp_variable = { name = gbr_explosives_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_fabric }
				change_variable = { name = gbr_fabric_progress add = var:gbr_fabric_progress_next }
				clamp_variable = { name = gbr_fabric_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_fish }
				change_variable = { name = gbr_fish_progress add = var:gbr_fish_progress_next }
				clamp_variable = { name = gbr_fish_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_fruit }
				change_variable = { name = gbr_fruit_progress add = var:gbr_fruit_progress_next }
				clamp_variable = { name = gbr_fruit_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_glass }
				change_variable = { name = gbr_glass_progress add = var:gbr_glass_progress_next }
				clamp_variable = { name = gbr_glass_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_grain }
				change_variable = { name = gbr_grain_progress add = var:gbr_grain_progress_next }
				clamp_variable = { name = gbr_grain_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_groceries }
				change_variable = { name = gbr_groceries_progress add = var:gbr_groceries_progress_next }
				clamp_variable = { name = gbr_groceries_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_high_quality_fabric }
				change_variable = { name = gbr_high_quality_fabric_progress add = var:gbr_high_quality_fabric_progress_next }
				clamp_variable = { name = gbr_high_quality_fabric_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_iron }
				change_variable = { name = gbr_iron_progress add = var:gbr_iron_progress_next }
				clamp_variable = { name = gbr_iron_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_lead }
				change_variable = { name = gbr_lead_progress add = var:gbr_lead_progress_next }
				clamp_variable = { name = gbr_lead_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_liquor }
				change_variable = { name = gbr_liquor_progress add = var:gbr_liquor_progress_next }
				clamp_variable = { name = gbr_liquor_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_meat }
				change_variable = { name = gbr_meat_progress add = var:gbr_meat_progress_next }
				clamp_variable = { name = gbr_meat_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_oil }
				change_variable = { name = gbr_oil_progress add = var:gbr_oil_progress_next }
				clamp_variable = { name = gbr_oil_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_opium }
				change_variable = { name = gbr_opium_progress add = var:gbr_opium_progress_next }
				clamp_variable = { name = gbr_opium_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_paper }
				change_variable = { name = gbr_paper_progress add = var:gbr_paper_progress_next }
				clamp_variable = { name = gbr_paper_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_pharmaceuticals }
				change_variable = { name = gbr_pharmaceuticals_progress add = var:gbr_pharmaceuticals_progress_next }
				clamp_variable = { name = gbr_pharmaceuticals_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_phosphorus }
				change_variable = { name = gbr_phosphorus_progress add = var:gbr_phosphorus_progress_next }
				clamp_variable = { name = gbr_phosphorus_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_plastics }
				change_variable = { name = gbr_plastics_progress add = var:gbr_plastics_progress_next }
				clamp_variable = { name = gbr_plastics_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_refined_fuel }
				change_variable = { name = gbr_refined_fuel_progress add = var:gbr_refined_fuel_progress_next }
				clamp_variable = { name = gbr_refined_fuel_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_rubber }
				change_variable = { name = gbr_rubber_progress add = var:gbr_rubber_progress_next }
				clamp_variable = { name = gbr_rubber_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_steel }
				change_variable = { name = gbr_steel_progress add = var:gbr_steel_progress_next }
				clamp_variable = { name = gbr_steel_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_sugar }
				change_variable = { name = gbr_sugar_progress add = var:gbr_sugar_progress_next }
				clamp_variable = { name = gbr_sugar_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_tea }
				change_variable = { name = gbr_tea_progress add = var:gbr_tea_progress_next }
				clamp_variable = { name = gbr_tea_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_tobacco }
				change_variable = { name = gbr_tobacco_progress add = var:gbr_tobacco_progress_next }
				clamp_variable = { name = gbr_tobacco_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_tools }
				change_variable = { name = gbr_tools_progress add = var:gbr_tools_progress_next }
				clamp_variable = { name = gbr_tools_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_wine }
				change_variable = { name = gbr_wine_progress add = var:gbr_wine_progress_next }
				clamp_variable = { name = gbr_wine_progress max = 360 min = 0 }
			}
			if = {
				limit = { has_variable = gbr_rationing_wood }
				change_variable = { name = gbr_wood_progress add = var:gbr_wood_progress_next }
				clamp_variable = { name = gbr_wood_progress max = 360 min = 0 }
			}
			
			# Determine which goods need to start/continue being rationed while rationing hasn't finished
			gbr_rationing_required_check = yes
			gbr_number_of_goods_rationed = yes
			
			# Chance that a currency devaluation will be forced
			gbr_forced_devaluation_check = yes
			
			# Are we rationing any of the 35 different type of goods that could be rationed
			gbr_rationing_over = yes
			
			# Increase the count of the number of months that rationing has been going on for by 1
			change_variable = { name = gbr_months_of_rationing add = 1 }
		}
	}
	
	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
	}
	
	# a script value computing the goal completion metric
	current_value = {
		value = var:gbr_rationing_number_of_goods
	}
	
	# when the journal entry is activated current_value and goal_add_value are evaluated and added together to determine the goal value
	goal_add_value = {
		value = 35
	}

	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 200
	
	# yes/no, determines if this journal entry should be transfered if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = no

	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = no

	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
	}

	# yes/no, if yes, a progress bar is shown
	progressbar = yes

	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = no

	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	#progress_desc = 0

	# tutorial lesson explaining HOW to complete the Journal Entry
	#how_tutorial = how_united_kingdom_rationing

	# tutorial lesson explaining the WHY around the Journal Entry
	#why_tutorial = why_united_kingdom_rationing

	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = no
	
	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
	}
	
	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {
	}
}