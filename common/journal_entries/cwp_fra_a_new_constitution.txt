fra_a_new_constitution = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect
	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	#todo create icon
	icon = "gfx/interface/icons/event_icons/event_industry.dds"
	
	group = je_group_internal_affairs

	is_shown_when_inactive = {
		c:FRA ?= root
	}
	# one or more scripted buttons. See common/scripted_buttons/_scripted_buttons.info for more info
	# scripted_button = a_new_constitution_button_support_communist
	# scripted_button = a_new_constitution_button_support_socialist
	# scripted_button = a_new_constitution_button_support_moralist
	# scripted_button = a_new_constitution_button_support_gaullist
	possible = {
		#is added via event using add_journal_entry effect
		has_modifier = drafting_a_new_constitution
	}
	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		c:FRA = {
			# saved scopes can be used in any events triggered from the Journal Entry, as well as in the loc for the Journal Entry itself
			# To use saved scopes in loc: JournalEntry.GetTopScope.sCountry('saved_scope_name') or SCOPE.sCountry('saved_scope_name')
			save_scope_as = fra_a_new_constitution
			#todo any tracking variables can get saved here
			if = {
				limit = {
					not = {
						has_variable = drafting_a_new_constitution
					}
				}
				set_variable = drafting_a_new_constitution
			}
			#idea this value is for the progress bar and goes from 0-100, and is displayed in the journal entry widget
			set_variable = {
				name = fra_constitutional_referendum_success
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_communist_support
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_socialist_support
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_moralist_support
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_gaullist_support
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_communist_cumulative_support
				value = 20
			}
			set_variable = {
				name = fra_constitutional_referendum_socialist_cumulative_support
				value = 20
			}
			set_variable = {
				name = fra_constitutional_referendum_moralist_cumulative_support
				value = 20
			}
			set_variable = {
				name = fra_constitutional_referendum_gaullist_cumulative_support
				value = 20
			}
			set_variable = {
				name = fra_constitutional_referendum_communist_cumulative_support_weighted
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_socialist_cumulative_support_weighted
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_moralist_cumulative_support_weighted
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_gaullist_cumulative_support_weighted
				value = 0
			}
			set_variable = {
				name = fra_constitutional_referendum_net_change_weighted
				value = 0
			}
		}
		# all events in these on_actions can refer to scope:fra_a_new_constitution
	}
	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
		c:FRA = {
			custom_tooltip = {
				text = fra_a_new_constitution_complete_tt
				not = {
					has_variable = drafting_a_new_constitution
				}
				has_variable = IVth_Republic
			}
		}
	}
	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
	}
	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
	}
	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
	}
	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
		not = {
			exists = c:FRA
			c:FRA = root
		}
	}
	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {
		c:FRA ?= {
			remove_modifier = drafting_a_new_constitution
		}
	}
	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = {
		#todo this
		first_valid = {
			triggered_desc = {
				desc = fra_a_new_constitution_support_high_approval
				trigger = {
					exists = root.var:fra_constitutional_referendum_success
					root.var:fra_constitutional_referendum_success >= 80
				}
			}
			triggered_desc = {
				desc = fra_a_new_constitution_support_approval
				trigger = {
					exists = root.var:fra_constitutional_referendum_success
					root.var:fra_constitutional_referendum_success >= 60
				}
			}
			triggered_desc = {
				desc = fra_a_new_constitution_support_narrow_approval
				trigger = {
					exists = root.var:fra_constitutional_referendum_success
					root.var:fra_constitutional_referendum_success >= 50
				}
			}
			triggered_desc = {
				desc = fra_a_new_constitution_support_narrow_rejection
				trigger = {
					exists = root.var:fra_constitutional_referendum_success
					root.var:fra_constitutional_referendum_success >= 50
				}
			}
			triggered_desc = {
				desc = fra_a_new_constitution_support_abysmal
				trigger = {
					always = yes
				}
			}
		}
	}
	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 1826
	# effect which is executed when journal entry is timed out
	on_timeout = {
	}
	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
		effect = {
			if = {
				limit = {
					exists = root.var:fra_constitutional_referendum_communist_support
					exists = root.var:fra_constitutional_referendum_communist_cumulative_support
					exists = root.var:fra_constitutional_referendum_socialist_support
					exists = root.var:fra_constitutional_referendum_socialist_cumulative_support
					exists = root.var:fra_constitutional_referendum_moralist_support
					exists = root.var:fra_constitutional_referendum_moralist_cumulative_support
					exists = root.var:fra_constitutional_referendum_gaullist_support
					exists = root.var:fra_constitutional_referendum_gaullist_cumulative_support
					NOT = {
						exists = root.var:fra_constitutional_referendum_on_pause
					}
				}
				change_variable = {
					name = fra_constitutional_referendum_communist_cumulative_support
					add = root.var:fra_constitutional_referendum_communist_support
				}
				clamp_variable = {
					name = fra_constitutional_referendum_communist_cumulative_support
					max = 100
					min = 0
				}
				set_variable = {
					name = fra_constitutional_referendum_communist_cumulative_support_weighted
					value = {
						value = root.var:fra_constitutional_referendum_communist_cumulative_support
						multiply = france_constitution_communist_clout
					}
				}
				change_variable = {
					name = fra_constitutional_referendum_socialist_cumulative_support
					add = root.var:fra_constitutional_referendum_socialist_support
				}
				clamp_variable = {
					name = fra_constitutional_referendum_socialist_cumulative_support
					max = 100
					min = 0
				}
				set_variable = {
					name = fra_constitutional_referendum_socialist_cumulative_support_weighted
					value = {
						value = var:fra_constitutional_referendum_socialist_cumulative_support
						multiply = france_constitution_socialist_clout
					}
				}
				change_variable = {
					name = fra_constitutional_referendum_moralist_cumulative_support
					add = root.var:fra_constitutional_referendum_moralist_support
				}
				clamp_variable = {
					name = fra_constitutional_referendum_moralist_cumulative_support
					max = 100
					min = 0
				}
				set_variable = {
					name = fra_constitutional_referendum_moralist_cumulative_support_weighted
					value = {
						value = root.var:fra_constitutional_referendum_moralist_cumulative_support
						multiply = france_constitution_moralist_clout
					}
				}
				change_variable = {
					name = fra_constitutional_referendum_gaullist_cumulative_support
					add = root.var:fra_constitutional_referendum_gaullist_support
				}
				clamp_variable = {
					name = fra_constitutional_referendum_gaullist_cumulative_support
					max = 100
					min = 0
				}
				set_variable = {
					name = fra_constitutional_referendum_gaullist_cumulative_support_weighted
					value = {
						value = root.var:fra_constitutional_referendum_gaullist_cumulative_support
						multiply = france_constitution_gaullist_clout
					}
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_success
				value = {
					value = 0
					add = root.var:fra_constitutional_referendum_gaullist_cumulative_support_weighted
					add = root.var:fra_constitutional_referendum_communist_cumulative_support_weighted
					add = root.var:fra_constitutional_referendum_socialist_cumulative_support_weighted
					add = root.var:fra_constitutional_referendum_moralist_cumulative_support_weighted
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_gaullist_weekly_support_weighted
				value = {
					value = 0
					if = {
						limit = {
							root.var:fra_constitutional_referendum_gaullist_cumulative_support > 0
							root.var:fra_constitutional_referendum_gaullist_cumulative_support < 100
						}
						add = {
							value = root.var:fra_constitutional_referendum_gaullist_support
							multiply = france_constitution_gaullist_clout
						}
					}
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_moralist_weekly_support_weighted
				value = {
					value = 0
					if = {
						limit = {
							root.var:fra_constitutional_referendum_moralist_cumulative_support > 0
							root.var:fra_constitutional_referendum_moralist_cumulative_support < 100
						}
						add = {
							value = root.var:fra_constitutional_referendum_moralist_support
							multiply = france_constitution_moralist_clout
						}
					}
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_socialist_weekly_support_weighted
				value = {
					value = 0
					if = {
						limit = {
							root.var:fra_constitutional_referendum_socialist_cumulative_support > 0
							root.var:fra_constitutional_referendum_socialist_cumulative_support < 100
						}
						add = {
							value = root.var:fra_constitutional_referendum_socialist_support
							multiply = france_constitution_socialist_clout
						}
					}
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_communist_weekly_support_weighted
				value = {
					value = 0
					if = {
						limit = {
							root.var:fra_constitutional_referendum_communist_cumulative_support > 0
							root.var:fra_constitutional_referendum_communist_cumulative_support < 100
						}
						add = {
							value = root.var:fra_constitutional_referendum_communist_support
							multiply = france_constitution_communist_clout
						}
					}
				}
			}
			set_variable = {
				name = fra_constitutional_referendum_net_change_weighted
				value = {
					value = 0
					if = {
						limit = {
							NOT = {
								exists = root.var:fra_constitutional_referendum_on_pause
							}
						}
						add = root.var:fra_constitutional_referendum_gaullist_weekly_support_weighted
						add = root.var:fra_constitutional_referendum_moralist_weekly_support_weighted
						add = root.var:fra_constitutional_referendum_socialist_weekly_support_weighted
						add = root.var:fra_constitutional_referendum_communist_weekly_support_weighted
					}
				}
			}
			clamp_variable = {
				name = fra_constitutional_referendum_success
				max = 100
				min = 0
			}
			#To stop set but never used error.
			if = {
				limit = {
					OR = {
						root.var:fra_constitutional_referendum_net_change_weighted > 0
						always = yes
					}
				}
				#do nothing
			}
		}
	}
	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
	}
	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
	}
	# a script value computing the goal completion metric
	current_value = {
		add = root.var:fra_constitutional_referendum_success
	}
	# when the journal entry is activated current_value and goal_add_value are evaluated and added together to determine the goal value
	goal_add_value = {
		value = 100
	}
	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 9999
	# yes/no, determines if this journal entry should be transferred if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = no
	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = yes
	# optional trigger, progress text is shown if this is defined and true
	#is_progressing = {}
	# yes/no, if yes, a progress bar is shown
	progressbar = yes
	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = no
	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	# progress_desc
	# tutorial lesson explaining HOW to complete the Journal Entry
	# how_tutorial = how_tutorial_lesson_key
	# tutorial lesson explaining the WHY around the Journal Entry
	# why_tutorial = why_tutorial_lesson_key
	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}
