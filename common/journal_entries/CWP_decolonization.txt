je_decolonization = {
	# root = the owner of the Journal Entry (country scope)
	# scope:journal_entry = this Journal Entry (journalentry scope)
	# scope:target = target value, with which this Journal Entry was added using `add_journal_entry` effect
	# optional image that shows in the journal entry widget near the description, default = NDefines::GUI::JOURNAL_ENTRY_ICON_DEFAULT (set in /defines/00_interfaces.txt)
	icon = "gfx/interface/icons/event_icons/event_industry.dds"
	# optional trigger which determines if a journal entry can be shown, default = no
	# is ignored when JE is added through `add_journal_entry` effect
	is_shown_when_inactive = {
		NOR = {
			country_rank = rank_value:superpower
			has_modifier = sun_never_sets
			has_modifier = sun_setting_on_empire
		}
		any_country = {
			is_subject_of = root
			NOT = {
				has_variable = special_decolonization_scenario
				is_subject_type = subject_type_military_occupation
			}
		}
		NOT = { has_journal_entry = je_gaddafi_unification }
	}
	# optional trigger - when both this and is_shown_when_inactive is true, the JE is Activated, default = yes
	# is ignored when JE is added through `add_journal_entry` effect
	possible = {
		country_rank < rank_value:minor_power
	}
	# effect which happens when a journal entry is activated by having its `is_shown_when_inactive` and `possible` triggers become true or when JE is added through `add_journal_entry` effect
	immediate = {
		if = {
			limit = {
				NOT = {
					has_variable = imperial_unity
				}
			}
			set_variable = {
				name = imperial_unity
				value = 100
			}
		}
		if = {
			limit = {
				NOT = {
					has_variable = superpower_pressure
				}
			}
			set_variable = {
				name = superpower_pressure
				value = 0
			}
		}
		if = {
			limit = {
				NOT = {
					has_variable = domestic_pressure
				}
			}
			set_variable = {
				name = domestic_pressure
				value = 0
			}
		}
		if = {
			limit = {
				NOT = {
					has_variable = imperial_confidence
				}
			}
			set_variable = {
				name = imperial_confidence
				value = 0
			}
		}
	}
	scripted_button = decolonization_abandon_empire_button
	scripted_button = decolonization_imperial_conference_button
	# completion trigger, use is_goal_complete = yes in here if you're testing a tracked goal metric; if left blank, cannot be completed
	complete = {
		custom_tooltip = {
			text = je_decolonization_complete_condition_tooltip
			country_rank = rank_value:superpower
		}
	}
	# effect which is executed when 'complete' trigger becomes true
	on_complete = {
		custom_tooltip = {
			text = je_decolonization_complete_tooltip
			if = {
				limit = {
					var:imperial_unity = 100
				}
				trigger_event = {
					id = decolonization.1					# Keep the Empire Together
					days = 0
				}
			}
			else_if = {
				limit = {
					var:imperial_unity > 50
				}
				trigger_event = {
					id = decolonization.2					# Amicable Separation
					days = 0
				}
			}
			else = {
				trigger_event = {
					id = decolonization.3					# Clean Break
					days = 0
				}
			}
			if = {
				limit = {
					has_modifier = decolonization_imperial_conference
				}
				remove_modifier = decolonization_imperial_conference
			}
			if = {
				limit = {
					has_modifier = imperial_conference_bureaucracy
				}
				remove_modifier = imperial_conference_bureaucracy
			}
			if = {
				limit = {
					has_modifier = imperial_conference_authority
				}
				remove_modifier = imperial_conference_authority
			}
			if = {
				limit = {
					has_modifier = imperial_conference_monetary_support
				}
				remove_modifier = imperial_conference_monetary_support
			}
		}
	}
	# failure trigger, should spawn event explaining what happens when triggered, framed as a failure; if left blank, cannot fail
	fail = {
		custom_tooltip = {
			text = je_decolonization_fail_tooltip
			var:imperial_unity <= 0
		}
	}
	# effect which is executed when 'fail' trigger becomes true
	on_fail = {
		trigger_event = {
			id = decolonization.101			# We have lost control
			days = 0
		}
		hidden_effect = {
			if = {
				limit = {
					has_modifier = decolonization_imperial_conference
				}
				remove_modifier = decolonization_imperial_conference
			}
			if = {
				limit = {
					has_modifier = imperial_conference_bureaucracy
				}
				remove_modifier = imperial_conference_bureaucracy
			}
			if = {
				limit = {
					has_modifier = imperial_conference_authority
				}
				remove_modifier = imperial_conference_authority
			}
			if = {
				limit = {
					has_modifier = imperial_conference_monetary_support
				}
				remove_modifier = imperial_conference_monetary_support
			}
		}
	}
	# optional invalidation trigger, should not notify player when it triggers, just clean up and silently disappear due to journal entry no longer being valid; if left blank, cannot be invalidated
	invalid = {
		OR = {
			NOT = {
				any_country = {
					has_subject_relation_with = root
					NOT = {
						has_variable = special_decolonization_scenario
						is_subject_type = subject_type_military_occupation
					}
				}
			}
		}
	}
	# effect which is executed when 'invalid' trigger becomes true
	on_invalid = {
		effect_decolonize_all = yes
		if = {
			limit = {
				has_modifier = decolonization_imperial_conference
			}
			remove_modifier = decolonization_imperial_conference
		}
		if = {
			limit = {
				has_modifier = imperial_conference_bureaucracy
			}
			remove_modifier = imperial_conference_bureaucracy
		}
		if = {
			limit = {
				has_modifier = imperial_conference_authority
			}
			remove_modifier = imperial_conference_authority
		}
		if = {
			limit = {
				has_modifier = imperial_conference_monetary_support
			}
			remove_modifier = imperial_conference_monetary_support
		}
	}
	# dynamically updated text, which describes the current status of the Journal Entry
	# To use in loc or UI: [JournalEntry.GetStatusDesc]
	# If this is not specified, GetStatusDesc will instead return loc from key <journal_entry_key>_status
	status_desc = DECOLONIZATION_PROGRESS_DESC
	# the number of days before this journal entry forcibly transitions, can be used to transition silently or into another event, framed either as success, failure, or neutral; if left blank or set to zero, will not time out
	timeout = 7300
	# effect which is executed when journal entry is timed out
	on_timeout = {
		custom_tooltip = {
			text = je_decolonization_timeout_tooltip
			if = {
				limit = {
					var:imperial_unity = 100
				}
				trigger_event = {
					id = decolonization.1					# Keep the Empire Together
					days = 0
				}
			}
			else_if = {
				limit = {
					var:imperial_unity > 50
				}
				trigger_event = {
					id = decolonization.2					# Amicable Separation
					days = 0
				}
			}
			else = {
				trigger_event = {
					id = decolonization.3					# Clean Break
					days = 0
				}
			}
			if = {
				limit = {
					has_modifier = decolonization_imperial_conference
				}
				remove_modifier = decolonization_imperial_conference
			}
			if = {
				limit = {
					has_modifier = imperial_conference_bureaucracy
				}
				remove_modifier = imperial_conference_bureaucracy
			}
			if = {
				limit = {
					has_modifier = imperial_conference_authority
				}
				remove_modifier = imperial_conference_authority
			}
			if = {
				limit = {
					has_modifier = imperial_conference_monetary_support
				}
				remove_modifier = imperial_conference_monetary_support
			}
		}
	}
	# on_action which is triggered every first day of the week
	on_weekly_pulse = {
	}
	# on_action which is triggered every first day of the month
	on_monthly_pulse = {
		effect = {
			change_variable = {
				name = imperial_unity
				add = imperial_unity_growth
			}
			clamp_variable = {
				name = imperial_unity
				min = 0
				max = 100
			}
			change_variable = {
				name = superpower_pressure
				add = superpower_pressure_growth
			}
			clamp_variable = {
				name = superpower_pressure
				min = -0.5
				max = 0.5
			}
			change_variable = {
				name = domestic_pressure
				add = domestic_pressure_growth
			}
			clamp_variable = {
				name = domestic_pressure
				min = 0
				max = 1
			}
		}
	}
	# on_action which is triggered every first day of the year
	on_yearly_pulse = {
		effect = {
		}
	}
	# a script value computing the goal completion metric
	current_value = {
		value = 0
		if = {
			limit = {
				has_variable = imperial_unity
				has_journal_entry = je_decolonization
			}
			value = var:imperial_unity
		}
	}
	# when the journal entry is activated current_value and goal_add_value are evaluated and added together to determine the goal value
	goal_add_value = {
		value = 100
	}
	# the highest weighted active journal entry appears in the goal tracker on the main screen
	weight = 1000
	# yes/no, determines if this journal entry should be transfered if the player switches country through a revolution or by releasing a subject. Note that external dependencies such as country variables etc are not automatically inherited
	transferable = no
	# yes/no, determines if this journal entry is allowed to be inherited by a victorious revolution. Revolutions also get all variables from the defeated parent country, so most JEs *should* be inherited in this way
	# NOTE: transferable = yes will always mean that revolution inheritance is blocked as these JEs should stay with the player at all times
	can_revolution_inherit = yes
	# optional trigger, progress text is shown if this is defined and true
	is_progressing = {
	}
	# yes/no, if yes, a progress bar is shown
	progressbar = yes
	# yes/no, if yes, the Journal Entry can return to an inactive state if its possible trigger reverts to false
	# if no or unspecified, an activated Journal Entry cannot return to being inactive even if it is no longer considered possible
	can_deactivate = no
	# dynamically updated text, which is shown over the progress bar of the Journal Entry
	# value can be a localization key or first_valid + triggered_desc script
	# To use in loc or UI: [JournalEntry.GetProgressDesc]
	# If this is not specified, GetProgressDesc will instead return loc from key <journal_entry_key>_progress
	#progress_desc = DECOLONIZATION_PROGRESS_DESC
	# tutorial lesson explaining HOW to complete the Journal Entry
	#how_tutorial = how_tutorial_lesson_key
	# tutorial lesson explaining the WHY around the Journal Entry
	#why_tutorial = why_tutorial_lesson_key
	# whether a Journal Entry should be pinned in its outliner by default. Defaults to 'no'
	should_be_pinned_by_default = yes
}
