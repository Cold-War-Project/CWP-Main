# For on_actions launched by the code itself.
# ROOT = country
on_yearly_pulse_country = {
	effect = {
		# IG leader death
		random_list = {
			1 = {
				trigger_event = {
					id = character_events.100
				}
			}
			100 = {
			}
		}
	}
}

#ROOT = country
on_monthly_pulse_country = {
	effect = {
		# Corruption Calculations
		if = {
			limit = {
				is_player = yes
			}
			if = {
				limit = {
					NOT = {
						has_variable = var_corruption
					}
				}
				set_variable = {
					name = var_corruption
					value = corruption_baseline
				}
			}
			else_if = {
				limit = {
					var:var_corruption < 0
				}
				set_variable = {
					name = var_corruption
					value = 0
				}
			}
			else_if = {
				limit = {
					var:var_corruption >= 100
				}
				set_variable = {
					name = var_corruption
					value = 100
				}
			}
			if = {
				limit = {
					var:var_corruption <= corruption_baseline
				}
				change_variable = {
					name = var_corruption
					add = {
						value = corruption_baseline
						subtract = var:var_corruption
						max = 0.5
					}
				}
			}
			else_if = {
				limit = {
					var:var_corruption >= corruption_baseline
				}
				change_variable = {
					name = var_corruption
					add = {
						value = corruption_baseline
						subtract = var:var_corruption
						min = -0.5
					}
				}
			}
			# Adds appropriate modifier
			if = {
				limit = {
					var:var_corruption = {
						exists = yes
					}
				}
				remove_modifier = corruption_modifier_effects
				add_modifier = {
					name = corruption_modifier_effects
					multiplier = corruption_modifier
				}
			}
			else = {
				set_variable = {
					name = var_corruption
					value = corruption_value
				}
			}
		}
		else_if = {
			limit = {
				has_variable = var_corruption
			}
			remove_variable = var_corruption
			if = {
				limit = {
					has_modifier = corruption_modifier_effects
				}
				remove_modifier = corruption_modifier_effects
			}
		}
		# UN Calculations
		if = {
			limit = {
				global_var:var_un_memberlist = {
					exists = yes
				}
			}
			set_global_variable = {
				name = var_un_memberlist
				value = 0
			}
			every_country = {
				limit = {
					has_variable = un_member
				}
				change_global_variable = {
					name = var_un_memberlist
					add = 1
				}
			}
		}
		# Nuclear Calculations
		if = {
			limit = {
				has_modifier = nuclear_capable
				nuclear_stockpile_sv <= nuclear_stockpile_max
			}
			change_variable = {
				name = nuclear_stockpile
				add = nuclear_stockpile_growth
			}
			change_variable = {
				name = nuclear_stockpile
				subtract = nuclear_stockpile_decay
			}
		}
		if = {
			limit = {
				has_modifier = nuclear_capable
				nuclear_stockpile_sv >= nuclear_stockpile_max
			}
			change_variable = {
				name = nuclear_stockpile
				subtract = nuclear_stockpile_decay
			}
		}
		#UN Voting for AI
		if = {
			limit = {
				has_variable = un_member
			}
			trigger_event = un_ai_voting.1
			trigger_event = un_ai_voting.2
		}
		# Readiness Calculations
		if = {
			limit = {
				has_variable = var_readiness
				has_variable = var_increase_readiness
				var:var_readiness < 100
			}
			change_variable = {
				name = var_readiness
				add = readiness_sum_value
			}
		}
		if = {
			limit = {
				has_variable = var_readiness
				has_variable = var_decrease_readiness
				var:var_readiness >= 0
			}
			change_variable = {
				name = var_readiness
				subtract = readiness_decrease_value
			}
		}
		if = {
			limit = {
				has_variable = var_readiness
				var:var_readiness < 0
			}
			set_variable = {
				name = var_readiness
				value = 0
			}
		}
		if = {
			limit = {
				has_variable = var_readiness
				var:var_readiness > 100
			}
			set_variable = {
				name = var_readiness
				value = 100
			}
		}
		if = {
			limit = {
				has_variable = var_readiness
			}
			remove_modifier = readiness_modifier
			add_modifier = {
				name = readiness_modifier
				multiplier = readiness
			}
		}
		# AI Calculations
		if = {
			limit = {
				has_variable = var_readiness
			}
			trigger_event = ai_readiness_calculations.1
		}
		# UN Applications
		if = {
			limit = {
				has_variable = application_progress_un
				application_progress_un <= 100
			}
			change_variable = {
				name = application_progress_un
				add = 3
			}
		}
		if = {
			limit = {
				has_variable = application_progress_un
				application_progress_un <= 100
				supporting_countries > required_support_un
			}
			change_variable = {
				name = application_progress_un
				add = 2
			}
		}
		if = {
			limit = {
				has_variable = application_progress_un
				application_progress_un >= 100
				application_progress_un <= 150
			}
			change_variable = {
				name = application_progress_un
				add = 1
			}
		}
		if = {
			limit = {
				has_variable = application_progress_un
				var:application_progress_un >= 100
				supporting_countries >= required_support_un
			}
			effect_un_application_approved = yes
			rebuild_un_memberlist = yes
			trigger_event = un_dynamic_resolution_events.4
		}
		if = {
			limit = {
				has_variable = application_progress_un
				var:application_progress_un >= 150
				not = {
					supporting_countries >= required_support_un
				}
			}
			effect_un_application_rejected = yes
			trigger_event = un_dynamic_resolution_events.5
		}
	}
	events = {
		treaty_of_san_francisco.1
		french_west_africa_events.1
		india_independence_events.1
		india_independence_events.2
		korean_formation.1
		korean_formation.2
		saarland.2
	}
}

on_half_yearly_pulse_country = {
	first_valid = {
		delay = {
			days = {
				0
				90
			}
		}
		economic_events.1
		economic_events.3
		economic_events.5
		economic_events.6
		economic_events.7
	}
	effect = {
	}
}

on_five_year_pulse_country = {
}

on_decade_pulse_country = {
}

# Root = Character
on_monthly_pulse_character = {
}

on_yearly_pulse_character = {
}

on_half_yearly_pulse_character = {
}

on_five_year_pulse_character = {
}

on_decade_pulse_character = {
}

on_half_yearly_pulse_state = {
}

on_yearly_pulse_state = {
}

on_five_year_pulse_state = {
}

on_decade_pulse_state = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {
	events = {
		private_military_companies.3
	}
}

# Root = Building
on_building_built = {
	effect = {
		if = {
			limit = {
				is_building_type = building_nuclear_research_facility
			}
			owner = {
				set_variable = nuclear_facility_established
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_excellent_solar_capacity = yes
				}
			}
			add_modifier = {
				name = excellent_solar_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_excellent_wind_capacity = yes
				}
			}
			add_modifier = {
				name = excellent_wind_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_excellent_hydroelectric_capacity = yes
				}
			}
			add_modifier = {
				name = excellent_hydroelectric_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_moderate_solar_capacity = yes
				}
			}
			add_modifier = {
				name = moderate_solar_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_moderate_wind_capacity = yes
				}
			}
			add_modifier = {
				name = moderate_wind_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_moderate_hydroelectric_capacity = yes
				}
			}
			add_modifier = {
				name = moderate_hydroelectric_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_poor_solar_capacity = yes
				}
			}
			add_modifier = {
				name = poor_solar_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_poor_wind_capacity = yes
				}
			}
			add_modifier = {
				name = poor_wind_capacity
			}
		}
		if = {
			limit = {
				is_building_type = building_renewable_energy_facility
				Root.state = {
					is_poor_hydroelectric_capacity = yes
				}
			}
			add_modifier = {
				name = poor_hydroelectric_capacity
			}
		}
	}
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				has_technology_researched = liquid-liquid_extraction
			}
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_rare_earth_elements_mining
					}
				}
				every_scope_state = {
					limit = {
						has_potential_resource = bg_rare_earth_elements_mining
					}
					force_resource_discovery = bg_rare_earth_elements_mining
				}
			}
		}
		if = {
			limit = {
				has_technology_researched = early_climatology
			}
			set_variable = has_climate_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires for all countries with an interest marker in the play's region
# Root = Country who owns the interest marker
# scope:diplomatic_play = The diplomatic play that has been started
on_diplomatic_play_started = {
	effect = {
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
	}
}

# Root = Character
on_new_ruler = {
	effect = {
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		# Corruption Calculations
		if = {
			limit = {
				var:var_corruption <= 20
			}
			scope:target = {
				effect_corruption_low = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 20
				var:var_corruption <= 50
			}
			scope:target = {
				effect_corruption_medium = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 50
			}
			scope:target = {
				effect_corruption_high = yes
			}
		}
		# Currency Calculations
		if = {
			limit = {
				var:cwp_currency = flag:currency_usd
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_usd = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_frf
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_frf = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_gbp
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_gbp = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_sur
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_sur = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_brz
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_brz = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dem
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dem = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pen
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pen = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pes
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pes = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dnr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dnr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_irr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_irr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_trl
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_trl = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_yum
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_yum = yes
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		# Corruption Calculations
		if = {
			limit = {
				var:var_corruption <= 20
			}
			scope:target = {
				effect_corruption_low = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 20
				var:var_corruption <= 50
			}
			scope:target = {
				effect_corruption_medium = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 50
			}
			scope:target = {
				effect_corruption_high = yes
			}
		}
		# Currency Calculations
		if = {
			limit = {
				var:cwp_currency = flag:currency_usd
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_usd = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_frf
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_frf = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_gbp
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_gbp = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_sur
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_sur = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_brz
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_brz = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dem
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dem = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pen
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pen = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pes
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pes = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dnr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dnr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_irr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_irr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_trl
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_trl = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_yum
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_yum = yes
			}
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		if = {
			limit = {
				scope:target = {
					country_has_primary_culture = cu:ashkenazi
				}
				NOT = {
					s:STATE_PALESTINE = {
						is_homeland = cu:ashkenazi
					}
				}
			}
			s:STATE_PALESTINE = {
				add_homeland = sephardic
				add_homeland = ashkenazi
			}
		}
		# Corruption Calculation
		if = {
			limit = {
				var:var_corruption <= 20
			}
			scope:target = {
				effect_corruption_low = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 20
				var:var_corruption <= 50
			}
			scope:target = {
				effect_corruption_medium = yes
			}
		}
		if = {
			limit = {
				var:var_corruption > 50
			}
			scope:target = {
				effect_corruption_high = yes
			}
		}
		# Currency Calculations
		if = {
			limit = {
				var:cwp_currency = flag:currency_usd
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_usd = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_frf
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_frf = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_gbp
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_gbp = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_sur
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_sur = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_brz
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_brz = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dem
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dem = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pen
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pen = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pes
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pes = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dnr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dnr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_irr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_irr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_trl
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_trl = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_yum
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_yum = yes
			}
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
}

# Root = State
on_resource_depleted = {
	effect = {
		owner = {
			post_notification = resource_depleted
		}
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}

# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_owe_obligation = {
	effect = {
		post_proposal = proposal_sway_offer_owe_obligation
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Building
on_production_method_changed = {
}

# Root = owner Country of the Law
# executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = {
				type = je_abolish_monarchy
			}
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is success
# (currently, this means the law will get enacted so it will be followed by
# on_law_enactment_ended and on_law_enacted).
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is about to end
on_law_checkpoint_success = {
	effect = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		1 = law_notification.1
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		1 = law_notification.2
	}
	effect = {
	}
	events = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is stall
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even if the resulting event is particularly bad and
# will proceed to stop the enactment
on_law_checkpoint_stall = {
	random_events = {
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
	first_valid = {
		private_military_companies.1
		private_military_companies.2
	}
	effect = {
		if = {
			limit = {
				OR = {
					is_enacting_law = law_type:law_ethnostate
					is_enacting_law = law_type:law_national_supremacy
					is_enacting_law = law_type:law_racial_segregation
					is_enacting_law = law_type:law_cultural_exclusion
					is_enacting_law = law_type:law_multicultural
				}
			}
			add_modifier = {
				name = racial_tension
				is_decaying = yes
				months = 120
			}
		}
		if = {
			limit = {
				has_law = law_type:law_monarchy
				OR = {
					is_enacting_law = law_type:law_presidential_republic
					is_enacting_law = law_type:law_parliamentary_republic
					is_enacting_law = law_type:law_council_republic
				}
			}
			add_modifier = {
				name = recently_abolished_monarchy
				years = 10
			}
		}
		if = {
			limit = {
				has_modifier = hired_pmc
				is_enacting_law = law_type:law_private_army
			}
			remove_modifier = hired_pmc
		}
	}
}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
	effect = {
	}
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		# Currency
		if = {
			limit = {
				var:cwp_currency = flag:currency_usd
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_usd = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_frf
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_frf = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_gbp
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_gbp = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_sur
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_sur = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_brz
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_brz = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dem
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dem = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pen
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pen = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_pes
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_pes = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_dnr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_dnr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_irr
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_irr = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_trl
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_trl = yes
			}
		}
		if = {
			limit = {
				var:cwp_currency = flag:currency_yum
				scope:target = {
					not = {
						has_variable = cwp_currency
					}
				}
			}
			scope:target = {
				effect_currency_yum = yes
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
	}
}

# Root = Country
on_wargoal_enforced = {
	effect = {
		set_variable = {
			name = recently_won_war
			days = 600
			value = yes
		}
	}
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		if = {
			limit = {
				scope:actor = {
					not = {
						has_variable = recently_won_war
					}
				}
			}
			set_variable = {
				name = var_recently_lost_war
				value = yes
				days = 600
			}
		}
		if = {
			limit = {
				scope:target = {
					not = {
						has_variable = recently_won_war
					}
				}
			}
			set_variable = {
				name = var_recently_lost_war
				value = yes
				days = 600
			}
		}
	}
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		# debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		# debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		# debug_log = "Election Campaign Started"
		update_party_support = yes
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		# debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Character
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Character
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = {
				country = root
				value = -50
			}
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					50 = {
					}
				}
			}
		}
		every_country = {
			limit = {
				NOT = {
					this = scope:target_country
				}
				root = {
					owes_obligation_to = prev
				}
			}
			change_relations = {
				country = root
				value = -30
			}
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					75 = {
					}
				}
			}
		}
		hidden_effect = {
			# Should not stack the modifier
			if = {
				limit = {
					has_modifier = repudiated_obligation
				}
				remove_modifier = repudiated_obligation
			}
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes
		}
	}
}

# Root = Character
on_character_recruitment = {
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# State Scope
on_monthly_pulse_state = {
	effect = {
		if = {
			limit = {
				this = {
					total_urbanization >= 1000
				}
			}
			remove_modifier = state_skyscraper_modifier
			add_modifier = {
				name = state_skyscraper_modifier
				multiplier = {
					value = total_urbanization
					divide = 1000
					round = yes
				}
			}
		}
		if = {
			limit = {
				this = {
					total_urbanization < 1000
				}
			}
			remove_modifier = state_skyscraper_modifier
		}
		if = {
			limit = {
				this = {
					state_max_slums > 0
				}
			}
			remove_modifier = state_slum_modifier
			add_modifier = {
				name = state_slum_modifier
				multiplier = state_max_slums
			}
		}
		if = {
			limit = {
				this = {
					state_max_slums <= 0
				}
			}
			remove_modifier = state_slum_modifier
		}
		# Habitability Calculations 
		calc_monthly_habitability = yes
		set_habitability_effects = yes
	}
}
