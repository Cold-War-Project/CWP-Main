# For on_actions launched by the code itself.
# ROOT = country
on_yearly_pulse_country = {
	effect = {
		onaction_ig_petition = yes
		onaction_update_party_morale = yes
	}
	random_events = {
		150 = 0
		20 = government_conflicts.1
		20 = government_conflicts.2
		20 = government_conflicts.3
		20 = government_conflicts.4
		20 = government_conflicts.5
		20 = government_conflicts.6
		20 = government_conflicts.7
		20 = government_conflicts.8
		20 = government_conflicts.9
		20 = government_conflicts.10
		20 = government_conflicts.11
		#
		20 = ig_leaders.20
		20 = ig_leaders.4
		20 = ig_leaders.5
		20 = ig_leaders.6
		#Character Events
		20 = character_events.2
		20 = character_events.3
		20 = character_events.4
		20 = character_events.5
		100 = character_events.6
		# Border Situations
		20 = neighbor_events.1
		20 = neighbor_events.2
		20 = neighbor_events.3
		20 = neighbor_events.4
		20 = neighbor_events.5
		20 = neighbor_events.6
		20 = neighbor_events.7
		# Commander Events
		20 = commander_events.2
		20 = commander_events.4
		5 = commander_events.6
		# Law Events
		50 = law_events.5
		50 = law_events.6
		# Cultural Homeland Events
		10 = cultural_homeland_events.1
		10 = cultural_homeland_events.10
		10 = cultural_homeland_events.20
		10 = cultural_homeland_events.30
		10 = cultural_homeland_events.40
		10 = cultural_homeland_events.50
		#IG Suppression
		20 = ig_suppression_events.1
		# Crime (Why do police not just comment out crime events?)
		10 = crime_events.1
		10 = crime_events.2
		# Obligations
		10 = obligation_events.1
		10 = obligation_events.3
		10 = obligation_events.5
		# Prostitution and police
		20 = prostitution.1
		20 = prostitution.2
		20 = prostitution.3
		20 = prostitution.4
		20 = cable_street.1
		#Natural Disasters
		3 = natural_disaster_events.1
		3 = natural_disaster_events.2
		1 = natural_disaster_events.3
		1 = natural_disaster_events.4
		3 = natural_disaster_events.5
		3 = natural_disaster_events.6
		3 = natural_disaster_events.7
		1 = natural_disaster_events.8
		# Assassination
		10 = assassination_events.1
		#Decree
		20 = decree_events.1
		20 = decree_events.2
		20 = decree_events.3
		20 = decree_events.4
		20 = decree_events.5
		20 = decree_events.6
		20 = decree_events.100
		20 = decree_events.101
		20 = decree_events.102
		20 = decree_events.103
		20 = decree_events.104
		20 = decree_events.105
		20 = decree_events.106
		20 = decree_events.108
		20 = decree_events.109
		20 = communism.7
		#psychology
		20 = psychology_events.1
		20 = psychology_events.2
		20 = psychology_events.3
		20 = psychology_events.4
		#nationalism
		20 = fascism_events.8
		20 = autocracy.2
		20 = autocracy.3
		# rivalry events
		10 = diplomatic_friction.1
		10 = diplomatic_friction.2
		# Discrimination Events
		20 = discrimination_events.1
		20 = discrimination_events.2
		20 = discrimination_events.3
		20 = discrimination_events.4
	}
	# Exiles
	random_events = {
		200 = 0
		10 = exiles_events.1
		10 = exiles_events.2
		10 = exiles_events.3
		10 = exiles_events.4
		10 = exiles_events.5
		10 = exiles_events.6
		10 = exiles_events.7
		10 = exiles_events.8
		10 = exiles_events.9
		10 = exiles_events.10
		10 = exiles_more_events.1
		10 = exiles_more_events.3
		10 = exiles_more_events.4
		10 = exiles_more_events.5
		5 = exiles_more_events.6
		10 = exiles_more_events.7
		10 = exiles_more_events.8
		10 = exiles_more_events.9
		10 = exiles_more_events.10
	}
}

#ROOT = country
on_monthly_pulse_country = {
	effect = {
		onaction_kill_unpopular_character = yes
		onaction_investment_pool_softcap = yes
		onaction_corruption_calculation = yes
		onaction_imf_calculation = yes
		onaction_un_calculation = yes
		onaction_un_application = yes
		onaction_readiness_calculation = yes
		onaction_fiscal_calculation = yes
		onaction_monetary_variables_creation = yes
		onaction_currency_calculation = yes
		onaction_nuclear_calculation = yes
		onaction_nato_cohesion_calculation = yes
		onaction_nato_application = yes
		onaction_nato_ai_voting = yes
		onaction_warsaw_cohesion_calculation = yes
		onaction_warsaw_application = yes
		onaction_warsaw_ai_voting = yes
	}
	random_events = {
		20 = 0
		1 = election_liberal_events.1
		1 = election_liberal_events.2
		1 = election_liberal_events.3
		1 = election_liberal_events.4
		1 = election_conservative_events.1
		1 = election_conservative_events.2
		1 = election_conservative_events.3
		1 = election_conservative_events.4
		1 = election_moderate_events.1
		1 = election_moderate_events.2
		1 = election_contextual_events.1
		1 = election_contextual_events.2
		1 = election_contextual_events.3
		1 = election_contextual_events.4
		1 = election_contextual_events.5
		1 = election_contextual_events.6
		1 = election_contextual_events.7
		1 = election_contextual_events.8
		1 = election_neutral.1
		1 = election_neutral.2
		1 = election_neutral.3
		1 = election_neutral.4
		1 = election_neutral.5
		1 = election_neutral.6
		1 = election_neutral.7
		1 = election_neutral.8
		1 = election_other_parties_events.1
		1 = election_other_parties_events.2
		1 = election_other_parties_events.4
		1 = election_other_parties_events.5
		1 = ig_leaders.3
		1 = communist_elections.1
		1 = communist_elections.2
		1 = communist_elections.3
		1 = communist_elections.4
		1 = agitators_election_events.1
		1 = agitators_election_events.2
		1 = agitators_election_events.3
		1 = agitators_election_events.4
		1 = agitators_election_events.5
		1 = agitators_election_events.6
		1 = agitators_election_events.7
		1 = agitators_election_events.8
		1 = agitators_election_events.9
		1 = agitators_election_events.10
		1 = agitators_election_events.11
		1 = agitators_election_events.12
		1 = agitators_election_events.13
		1 = agitators_election_events.14
		1 = agitators_election_events.15
		1 = agitators_election_events.16
		1 = agitators_election_events.17
		1 = agitators_election_events.18
		1 = agitators_election_events.19
		1 = agitators_election_events.20
		1 = agitators_election_events.21
		1 = agitators_election_events.22
		1 = agitators_election_events.23
		1 = agitators_election_events.24
		1 = agitators_election_events.25
		1 = agitators_election_events.26
		1 = agitators_election_events.27
		1 = agitators_election_events.28
		1 = agitators_election_events.29
		1 = agitators_election_events.30
		1 = agitators_election_events.31
		1 = agitators_election_events.33
		1 = agitators_election_events.34
		1 = agitators_election_events.35
		1 = agitators_election_events.36
		1 = agitators_election_events.37
		1 = agitators_election_events.38
		1 = agitators_election_events.39
		1 = agitators_election_events.41
		1 = agitators_election_events.42
		1 = agitators_election_events.43
		1 = agitators_election_events.44
		1 = agitators_election_events.45
		#5 = 0
		#1 = coup.1 DLC feature, its a JE, so we could make our own.
	}
	events = {
		# AI UN Resolution Events
		un_resolution_events.100
		un_resolution_events.101
		un_resolution_events.102
		un_resolution_events.103
		# AROAI MONTHLY EVENT
		aroai_framework_events.1
		# Flavor Events
		decolonization.501
		decolonization.502
		decolonization.503
		decolonization.504
		decolonization.505
		decolonization.506
		decolonization.507
		decolonization.508
		decolonization.509
		decolonization.510
		decolonization.511
		decolonization.514
		decolonization.515
		decolonization.516
		decolonization.517
		decolonization.518
		decolonization.519
		decolonization.520
		decolonization.521
		decolonization.522
		decolonization.524
		decolonization.601
		decolonization.602
		decolonization.603
		french_west_africa_events.1
		a_new_constitution.101
		saarland.2
		ddr_flavor.1
		communism.8		# Vanilla Red Army rename
		unable_to_enact.1		#Vanilla enactment event
		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3
		# Decolonization Chaos Gamerule Event
		debug.999
	}
}

on_half_yearly_pulse_country = {
	first_valid = {
		delay = {
			days = {
				0
				90
			}
		}
		economic_events.1		# Farming Subsidies
	}
	effect = {
		onaction_calc_party_cohesion = yes
	}
	events = {
		cwp_bank_reevaluation.1
		cwp_bank_reevaluation.2
	}
	random_events = {
		20 = secession_events.1
		20 = secession_events.2
		20 = secession_events.3
		20 = secession_events.4
		20 = secession_events.5
		20 = secession_events.6
		20 = secession_events.7
		20 = secession_events.8
		20 = secession_events.9
	}
}

on_five_year_pulse_country = {
	events = {
		generals.1
	}
}

on_decade_pulse_country = {
	random_events = {
		99 = 0
		#1 = plague.1 # Rework spanish flu to something else
	}
}

on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
		if = {
			limit = {
				is_mobilized = yes
			}
			set_variable = {
				name = num_months_mobilized
				value = {
					add = {
						if = {
							limit = {
								exists = var:num_months_mobilized
							}
							add = var:num_months_mobilized
						}
						else = {
							# for safety
							add = 0
						}
					}
					add = 1
				}
			}
		}
	}
}

on_yearly_pulse_character = {
	random_events = {
		20 = character_events.1
	}
}

on_half_yearly_pulse_character = {
}

on_five_year_pulse_character = {
}

on_decade_pulse_character = {
}

on_half_yearly_pulse_state = {
}

on_yearly_pulse_state = {
	effect = {
		onaction_urbanization_modifier = yes
	}
}

on_five_year_pulse_state = {
}

on_decade_pulse_state = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
	}
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
}

# Root = attacker or defender country
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {
}

# Root = Building
on_building_built = {
	effect = {
		if = {
			limit = {
				is_building_type = building_nuclear_research_facility
			}
			owner = {
				set_variable = nuclear_facility_established
			}
		}
		onaction_renewable_modifier = yes
	}
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				has_technology_researched = liquid-liquid_extraction
			}
			if = {
				limit = {
					any_scope_state = {
						has_potential_resource = bg_rare_earth_elements_mining
					}
				}
				every_scope_state = {
					limit = {
						has_potential_resource = bg_rare_earth_elements_mining
					}
					force_resource_discovery = bg_rare_earth_elements_mining
				}
			}
		}
		if = {
			limit = {
				has_technology_researched = early_climatology
			}
			set_variable = has_climate_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires for all countries with an interest marker in the play's region
# Root = Country who owns the interest marker
# scope:diplomatic_play = The diplomatic play that has been started
on_diplomatic_play_started = {
	effect = {
	}
}

# Root = Character
on_character_creation = {
}

# Root = Character
on_character_death = {
	effect = {
	}
}

# Root = Character
on_new_ruler = {
	effect = {
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		onaction_palestine = yes
		onaction_corruption_calculation_2 = yes
		onaction_currency_calculation_annex = yes
		scope:target = {
			setup_parties = yes
			setup_starting_ideologies = yes
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		onaction_palestine = yes
		onaction_corruption_calculation_2 = yes
		onaction_currency_calculation_annex = yes
		scope:target = {
			setup_parties = yes
			setup_starting_ideologies = yes
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		onaction_palestine = yes
		onaction_corruption_calculation_2 = yes
		onaction_currency_calculation_annex = yes
		scope:target = {
			setup_parties = yes
			setup_starting_ideologies = yes
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			months = short_modifier_time
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Character
on_mobilized_general = {
	effect = {
		set_variable = {
			name = num_months_mobilized
			value = 0
		}
	}
}

# Root = Character
on_demobilized_general = {
	effect = {
		remove_variable = num_months_mobilized
	}
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}

# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_owe_obligation = {
	effect = {
		post_proposal = proposal_sway_offer_owe_obligation
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Building
on_production_method_changed = {
}

# Root = owner Country of the Law
# executed when enactment of any law begins.
on_law_enactment_started = {
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is success
# (currently, this means the law will get enacted so it will be followed by
# on_law_enactment_ended and on_law_enacted).
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is about to end
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = {
				id = law_notification.4
				days = 0
			}
		}
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = laws_police.1
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4		#Devout want State Religion
		2 = ig_petitions.7		#Intelligentsia want free speech
		2 = ig_petitions.22		#Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = technocracy.2
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = laws_police.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1		#Landowners want to reverse Suffrage
		10 = ig_petitions.13		#Trade Unions want compulsory primary school
		20 = ig_petitions.16		#Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	effect = {
	}
	events = {
	}
}

# Root = owner Country of the Law
# executed when the end of a checkpoint is reached and the result is stall
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even if the resulting event is particularly bad and
# will proceed to stop the enactment
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = laws_police.3
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.3
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
	effect = {
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	first_valid = {
	}
	effect = {
		onaction_racial_tension_modifier = yes
		onaction_monarchy_abolished_modifier = yes
		### DYNAMIC IDEOLOGIES ###
		### NOTE: pregame setup is done in each respective nations history file ie. history/countries/rus - russia.txt
		### Laborists ###
		#enable social
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_free_market
							nor = {
								has_law = law_type:law_interventionism
								has_law = law_type:law_decentralization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_interventionism
							nor= {
								has_law = law_type:law_free_market
								has_law = law_type:law_decentralization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_decentralization
							nor = {
								has_law = law_type:law_free_market
								has_law = law_type:law_interventionism
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.1
			}
		}
		#enable vanguardist
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_anocracy
							not = {
								has_law = law_type:law_oligarchy
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_oligarchy
							not = {
								has_law = law_type:law_anocracy
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.3
			}
		}
		#enable socialist
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_no_nationalization
							not = {
								has_law = law_type:law_public_utility_companies
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_public_utility_companies
							not = {
								has_law = law_type:law_no_nationalization
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.4
			}
		}
		### Urbanists ###
		#enable social
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_free_market
							nor = {
								has_law = law_type:law_interventionism
								has_law = law_type:law_decentralization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_interventionism
							nor = {
								has_law = law_type:law_free_market
								has_law = law_type:law_decentralization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_decentralization
							nor = {
								has_law = law_type:law_free_market
								has_law = law_type:law_interventionism
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.5
			}
		}
		#enable socialist
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_no_nationalization
							not = {
								has_law = law_type:law_public_utility_companies
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_public_utility_companies
							not = {
								has_law = law_type:law_no_nationalization
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.7
			}
		}
		### Moralists ###
		#enable secular ideology for atheists
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_state_atheism
				}
			}
			trigger_event = {
				id = dynamic_ideologies.8
			}
		}
		#remove secular and revert moralists to their respective ideologies
		if = {
			limit = {
				root = {
					and = {
						has_law = law_type:law_state_atheism
						or = {
							currently_enacting_law.type = law_type:law_church_disestablishment
							currently_enacting_law.type = law_type:law_religious_policies
							currently_enacting_law.type = law_type:law_religious_institutions
							currently_enacting_law.type = law_type:law_religious_nationalism
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.9
			}
		}
		### BUREAUCRATS ###
		#enable apparatus
		if = {
			limit = {
				root = {
					or = {
						currently_enacting_law.type = law_type:law_socialization
						currently_enacting_law.type = law_type:law_total_nationalization
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.10
			}
		}
		#enable politicized
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_politicized_bureaucrats
				}
			}
			trigger_event = {
				id = dynamic_ideologies.11
			}
		}
		#enable appointed
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_appointed_bureaucrats
				}
			}
			trigger_event = {
				id = dynamic_ideologies.12
			}
		}
		#enable independent
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_independent_bureaucrats
				}
			}
			trigger_event = {
				id = dynamic_ideologies.13
			}
		}
		#enable elected
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_elected_bureaucrats
				}
			}
			trigger_event = {
				id = dynamic_ideologies.14
			}
		}
		#enable technocratic
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_technocrats
				}
			}
			trigger_event = {
				id = dynamic_ideologies.15
			}
		}
		### ELITES ###
		#enable royalist
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_hereditary
				}
			}
			trigger_event = {
				id = dynamic_ideologies.16
			}
		}
		#enable republican
		if = {
			limit = {
				root = {
					currently_enacting_law.type = law_type:law_executive
				}
			}
			trigger_event = {
				id = dynamic_ideologies.17
			}
		}
		#enable traditionalist
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_decentralization
							has_law = law_type:law_informal_schooling
						}
						and = {
							currently_enacting_law.type = law_type:law_informal_schooling
							has_law = law_type:law_decentralization
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.18
			}
		}
		#enable materialistic
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_free_market
							has_law = law_type:law_private_schools
						}
						and = {
							currently_enacting_law.type = law_type:law_private_schools
							has_law = law_type:law_free_market
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.19
			}
		}
		### ENTREPRENEURS ###
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_ethnonationalist
							nor = {
								has_law = law_type:law_supremacist
								has_law = law_type:law_segregationist
								has_law = law_type:law_integrationist
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_supremacist
							nor = {
								has_law = law_type:law_ethnonationalist
								has_law = law_type:law_segregationist
								has_law = law_type:law_integrationist
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_segregationist
							nor = {
								has_law = law_type:law_ethnonationalist
								has_law = law_type:law_supremacist
								has_law = law_type:law_integrationist
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_integrationist
							nor = {
								has_law = law_type:law_ethnonationalist
								has_law = law_type:law_supremacist
								has_law = law_type:law_segregationist
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.20
			}
		}
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_multiculturalist
							not = {
								has_law = law_type:law_syncretist
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_syncretist
							not = {
								has_law = law_type:law_multiculturalist
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.21
			}
		}
		### PATRIOTS ###
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_military_industry_nationalization
							not = {
								has_law = law_type:law_resource_extraction_nationalization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_resource_extraction_nationalization
							not = {
								has_law = law_type:law_military_industry_nationalization
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.22
			}
		}
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_total_nationalization
							not = {
								has_law = law_type:law_heavy_industry_nationalization
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_heavy_industry_nationalization
							not = {
								has_law = law_type:law_total_nationalization
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.23
			}
		}
		### SECUROCRATS ###
		if = {
			limit = {
				root = {
					or = {
						and = {
							currently_enacting_law.type = law_type:law_council_elective
							not = {
								has_law = law_type:law_executive
							}
						}
						and = {
							currently_enacting_law.type = law_type:law_executive
							not = {
								has_law = law_type:law_council_elective
							}
						}
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.24
			}
		}
		if = {
			limit = {
				root = {
					or = {
						currently_enacting_law.type = law_type:law_parliamentary
						currently_enacting_law.type = law_type:law_theocratic
						currently_enacting_law.type = law_type:law_hereditary
						currently_enacting_law.type = law_type:law_administrative
					}
				}
			}
			trigger_event = {
				id = dynamic_ideologies.25
			}
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {
}

# Root = owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
		scope:target = {
			enact_preferred_governance_principle = yes
		}
		onaction_currency_calculation_annex = yes
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
	effect = {
		root = {
			set_variable = original_government
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
	effect = {
		onaction_currency_calculation_annex = yes
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
	effect = {
		root = {
			set_variable = original_government
		}
	}
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	events = {
		decolonization.666
	}
	effect = {
		if = {
			limit = {
				has_variable = revolutionary_prov_gov_var
			}
			trigger_event = {
				id = provisional_government_events.1
				days = 7
				popup = yes
			}
		}
		if = {
			limit = {
				not = {
					has_variable = original_government
				}
			}
			add_modifier = {
				name = recent_revolution
				months = 12
				is_decaying = yes
			}
			effect_free_all_subjects = yes
		}
	}
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# IGs and Revolutions
		5 = ig_revolutions.1
		5 = ig_revolutions.2
		5 = ig_revolutions.3
		5 = ig_revolutions.4
		5 = ig_revolutions.5
		5 = ig_revolutions.6
		5 = ig_revolutions.7
		5 = ig_revolutions.8
		5 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		10 = revolution_pulse_events.6
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		30 = revolution_pulse_events.14
		30 = revolution_pulse_events.15
		30 = revolution_pulse_events.16
		30 = revolution_pulse_events.17
		30 = revolution_pulse_events.18
		30 = revolution_pulse_events.19
		30 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
on_wargoal_enforced = {
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = {
			id = civil_war_events.1
			days = 0
		}
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
				name = recently_had_war
				days = 1825
				value = yes
			}
			#set_variable = { #Available to use whenever needed
			#	name = most_recent_war_opponent
			#	value = scope:target
			#}
			if = {
				limit = {
					NOR = {
						country_rank = rank_value:superpower
						has_modifier = sun_never_sets
						has_modifier = sun_setting_on_empire
					}
					any_country = {
						is_subject_of = scope:actor
						NOT = {
							has_variable = special_decolonization_scenario
							is_subject_type = subject_type_military_occupation
						}
					}
					root.war.num_casualties > country_pop_1_percent
				}
				add_journal_entry = {
					type = je_decolonization
				}
			}
		}
		scope:target = {
			set_variable = {
				name = recently_had_war
				days = 1825
				value = yes
			}
			#set_variable = { 
			#	name = most_recent_war_opponent
			#	value = scope:actor
			#}
			if = {
				limit = {
					NOR = {
						country_rank = rank_value:superpower
						has_modifier = sun_never_sets
						has_modifier = sun_setting_on_empire
					}
					any_country = {
						is_subject_of = scope:target
						NOT = {
							has_variable = special_decolonization_scenario
							is_subject_type = subject_type_military_occupation
						}
					}
					root.war.num_casualties > country_pop_1_percent
				}
				add_journal_entry = {
					type = je_decolonization
				}
			}
		}
		if = {
			limit = {
				not = {
					exists = scope:actor
				}
			}
			remove_list_global_variable = {
				name = central_bank_list
				target = scope:actor
			}
			remove_list_global_variable = {
				name = un_application_list
				target = scope:actor
			}
			remove_list_global_variable = {
				name = un_members_list
				target = scope:actor
			}
		}
		if = {
			limit = {
				not = {
					exists = scope:target
				}
			}
			remove_list_global_variable = {
				name = central_bank_list
				target = scope:target
			}
			remove_list_global_variable = {
				name = un_application_list
				target = scope:target
			}
			remove_list_global_variable = {
				name = un_members_list
				target = scope:target
			}
		}
	}
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = state
on_state_incorporation = {
	effect = {
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		# debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		# debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		# debug_log = "Election Campaign Started"
		onaction_calc_party_cohesion = yes
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		# debug_log = "Election Campaign Ended"
	}
}

# Root = Country
on_government_reformed = {
	effect = {
		# Government Petition
		set_variable = gov_petition_coin_toss
		onaction_update_party_morale = yes
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Character
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Character
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = {
				country = root
				value = -50
			}
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					50 = {
					}
				}
			}
		}
		every_country = {
			limit = {
				NOT = {
					this = scope:target_country
				}
				root = {
					owes_obligation_to = prev
				}
			}
			change_relations = {
				country = root
				value = -30
			}
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}
						}
					}
					75 = {
					}
				}
			}
		}
		hidden_effect = {
			# Should not stack the modifier
			if = {
				limit = {
					has_modifier = repudiated_obligation
				}
				remove_modifier = repudiated_obligation
			}
		}
		add_modifier = {
			name = repudiated_obligation
			months = normal_modifier_time
			is_decaying = yes
		}
	}
}

# Root = Character
on_character_recruitment = {
}

# Root = invaded country
# scope:actor = invading country
# scope:admiral = invading admiral
# scope:general = invading general
# scope:state = location state
on_naval_invasion = {
	effect = {
		post_notification = naval_invasion_against_us
	}
}

# State Scope
on_monthly_pulse_state = {
	#in every state, if the number of skyscrapers is greater than the number of urban centers, then the state is too urbanized. A modifier is applied to the state that greatly increases the upkeep of each skyscraper. The modifier is removed when the number of skyscrapers is less than the number of urban centers.
	effect = {
		onaction_skyscraper_modifier = yes
		onaction_slums_modifier = yes
		# Habitability Calculations 
		onaction_calc_monthly_habitability = yes
		onaction_set_habitability_effects = yes
	}
}
