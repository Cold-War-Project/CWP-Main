#	Example:
#
#	example_trigger = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_trigger = yes
#	}
#
country_has_voting_franchise = {
	OR = {
		modifier:country_voting_power_base_add > 0
		modifier:country_voting_power_from_literacy_add > 0
		modifier:country_voting_power_wealth_threshold_add > 0
		modifier:country_academics_voting_power_add > 0
		modifier:country_administrators_voting_power_add > 0
		modifier:country_clergy_voting_power_add > 0
		modifier:country_creatives_voting_power_add > 0
		modifier:country_engineers_voting_power_add > 0
		modifier:country_farmers_voting_power_add > 0
		modifier:country_informal_workers_voting_power_add > 0
		modifier:country_investors_voting_power_add > 0
		modifier:country_laborers_voting_power_add > 0
		modifier:country_landlords_voting_power_add > 0
		modifier:country_officers_voting_power_add > 0
		modifier:country_service_workers_voting_power_add > 0
		modifier:country_servicemembers_voting_power_add > 0
		modifier:country_slum_dwellers_voting_power_add > 0
		modifier:country_technicians_voting_power_add > 0
	}
}

country_has_education_system = {
	OR = {
		has_law = law_type:law_church_run_schools
		has_law = law_type:law_public_schools
		has_law = law_type:law_private_schools
		has_law = law_type:law_mixed_funded_schools
	}
}

is_being_incorporated = {
	incorporation_progress > 0
	incorporation_progress < 1
}

violate_sovereignty_war_check = {
	save_temporary_scope_as = relevant_war
	scope:target_country = {
		any_scope_theater = {
			is_land_theater = yes
			save_temporary_scope_as = target_theater
			scope:relevant_war.attacker_warleader = {
				any_scope_theater = {
					is_land_theater = yes
					check_area = {
						mode = adjacent
						target = scope:target_theater
					}
				}
			}
			scope:relevant_war.defender_warleader = {
				any_scope_theater = {
					is_land_theater = yes
					check_area = {
						mode = adjacent
						target = scope:target_theater
					}
				}
			}
		}
	}
}

intervene_war_check = {
	is_war = yes
	trigger_if = {
		limit = {
			is_war = yes
		}
		war = {
			is_warleader = scope:target_country
		}
	}
	trigger_if = {
		limit = {
			initiator = scope:target_country
			great_power_allies_initiator > 0
		}
		great_power_allies_initiator > great_power_allies_target
	}
	trigger_else_if = {
		limit = {
			target_is = scope:target_country
			great_power_allies_target > 0
		}
		great_power_allies_target > great_power_allies_initiator
	}
	trigger_else = {
		root = {
			has_strategic_adjacency = scope:target_country
		}
		trigger_if = {
			limit = {
				is_war = yes
			}
			war = {
				trigger_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 90
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 90
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 80
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 80
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 70
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 70
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 60
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 60
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 50
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 50
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 40
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 40
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 30
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 30
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 20
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 20
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 10
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 10
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 0
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 0
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -10
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -10
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -20
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -20
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -30
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -30
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -40
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -40
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -50
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -50
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -60
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -60
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -70
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -70
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -80
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -80
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -90
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -90
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 90
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 90
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 80
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 80
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 70
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 70
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 60
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 60
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 50
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 50
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 40
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 40
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 30
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 30
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 20
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 20
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 10
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < 10
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 10
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 10
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 20
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 20
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > 0
						}
					}
					has_war_support = {
						target = defender_warleader
						value < 0
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -10
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -10
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -20
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -20
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -30
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -30
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -40
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -40
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -50
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -50
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -60
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -60
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -70
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -70
					}
				}
				trigger_else_if = {
					limit = {
						attacker_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -80
						}
					}
					has_war_support = {
						target = defender_warleader
						value < -80
					}
				}
				trigger_else_if = {
					limit = {
						defender_warleader = scope:target_country
						has_war_support = {
							target = scope:target_country
							value > -90
						}
					}
					has_war_support = {
						target = attacker_warleader
						value < -90
					}
				}
			}
		}
	}
}

#TODO
# has_industrialized_pm = {
# 	OR = {
# 		# Textile Mills
# 		is_production_method_active = {
# 			building_type = building_textile_manufactories
# 			production_method = pm_mechanized_looms
# 		}
# 		is_production_method_active = {
# 			building_type = building_textile_manufactories
# 			production_method = pm_automatic_power_looms
# 		}
# 		# Furniture manufactories
# 		is_production_method_active = {
# 			building_type = building_furniture_manufactories
# 			production_method = pm_mechanized_workshops
# 		}
# 		is_production_method_active = {
# 			building_type = building_furniture_manufactories
# 			production_method = pm_watertube_boiler_building_furniture_manufactories
# 		}
# 		is_production_method_active = {
# 			building_type = building_furniture_manufactories
# 			production_method = pm_rotary_valve_engine_building_furniture_manufactories
# 		}
# 		is_production_method_active = {
# 			building_type = building_furniture_manufactories
# 			production_method = pm_assembly_lines_building_furniture_manufactories
# 		}
# 		# Tooling Workshops
# 		is_production_method_active = {
# 			building_type = building_tool_manufactories
# 			production_method = pm_watertube_boiler_building_tool_manufactories
# 		}
# 		is_production_method_active = {
# 			building_type = building_tool_manufactories
# 			production_method = pm_rotary_valve_engine_building_tool_manufactories
# 		}
# 		is_production_method_active = {
# 			building_type = building_tool_manufactories
# 			production_method = pm_assembly_lines_building_tool_manufactories
# 		}
# 		# Paper Mills
# 		is_production_method_active = {
# 			building_type = building_paper_manufactories
# 			production_method = pm_watertube_boiler_building_paper_manufactories
# 		}
# 		is_production_method_active = {
# 			building_type = building_paper_manufactories
# 			production_method = pm_rotary_valve_engine_building_paper_manufactories
# 		}
# 		# Steel Mills
# 		is_production_method_active = {
# 			building_type = building_steelworks
# 			production_method = pm_watertube_boiler_building_steelworks
# 		}
# 		is_production_method_active = {
# 			building_type = building_steelworks
# 			production_method = pm_rotary_valve_engine_building_steelworks
# 		}
# 		# Motor Industries
# 		is_production_method_active = {
# 			building_type = building_motor_industry
# 			production_method = pm_watertube_boiler_building_motor_industry
# 		}
# 		is_production_method_active = {
# 			building_type = building_motor_industry
# 			production_method = pm_rotary_valve_engine_building_motor_industry
# 		}
# 	}
# }
# using_watertube_boiler = {
# 	OR = {
# 		AND = {
# 			has_building = building_furniture_manufactories
# 			is_production_method_active = {
# 				building_type = building_furniture_manufactories
# 				production_method = pm_watertube_boiler_building_furniture_manufactories
# 			}
# 		}
# 		AND = {
# 			has_building = building_tool_manufactories
# 			is_production_method_active = {
# 				building_type = building_tool_manufactories
# 				production_method = pm_watertube_boiler_building_tool_manufactories
# 			}
# 		}
# 		AND = {
# 			has_building = building_paper_manufactories
# 			is_production_method_active = {
# 				building_type = building_paper_manufactories
# 				production_method = pm_watertube_boiler_building_paper_manufactories
# 			}
# 		}
# 		AND = {
# 			has_building = building_steelworks
# 			is_production_method_active = {
# 				building_type = building_steelworks
# 				production_method = pm_watertube_boiler_building_steelworks
# 			}
# 		}
# 		AND = {
# 			has_building = building_motor_industry
# 			is_production_method_active = {
# 				building_type = building_motor_industry
# 				production_method = pm_watertube_boiler_building_motor_industry
# 			}
# 		}
# 		AND = {
# 			has_building = building_tool_manufactories
# 			is_production_method_active = {
# 				building_type = building_tool_manufactories
# 				production_method = pm_watertube_boiler_building_tool_manufactories
# 			}
# 		}
# 	}
# }
#todo update with superpower rank
countries_are_valid_rivals = {
	has_overlapping_interests = scope:target_country
	trigger_if = {
		limit = {
			country_rank = rank_value:superpower
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:superpower
				country_rank = rank_value:great_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:great_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:superpower
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:major_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:great_power
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:minor_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:major_power
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:insignificant_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:minor_power
				country_rank = rank_value:insignificant_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_major_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_regional_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:unrecognized_major_power
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}
	}
	trigger_if = {
		limit = {
			country_rank = rank_value:unrecognized_power
		}
		scope:target_country = {
			OR = {
				country_rank = rank_value:unrecognized_regional_power
				country_rank = rank_value:unrecognized_power
			}
		}
	}
}

#TODO THESE NEED TO BE STATE REGIONS AND NOT STRATEGIC REGIONS
#todo update with missing earthquake zones
#todo add hurricane zones
in_earthquake_zone = {
}

#todo update with missing volcanic zones
in_volcanic_zone = {
	OR = {
		state_region = s:STATE_ICELAND
		state_region = s:STATE_HAWAIIAN_ISLANDS
	}
}

on_river = {
	OR = {
		has_state_trait = state_trait_rhine_river
		has_state_trait = state_trait_danube_river
		has_state_trait = state_trait_drava_river
		has_state_trait = state_trait_volga_river
		has_state_trait = state_trait_elbe_river
		has_state_trait = state_trait_oder_river
		has_state_trait = state_trait_dnieper_river
		has_state_trait = state_trait_rhone_river
		has_state_trait = state_trait_loire_river
		has_state_trait = state_trait_seine_river
		has_state_trait = state_trait_nile_river
		has_state_trait = state_trait_congo_river
		has_state_trait = state_trait_niger_river
		has_state_trait = state_trait_zambezi_river
		has_state_trait = state_trait_yangtze_river
		has_state_trait = state_trait_pearl_river
		has_state_trait = state_trait_yellow_river
		has_state_trait = state_trait_ganges_river
		has_state_trait = state_trait_tigris_river
		has_state_trait = state_trait_euphrates_river
		has_state_trait = state_trait_indus_river
		has_state_trait = state_trait_brahmaputra_river
		has_state_trait = state_trait_mekong_river
		has_state_trait = state_trait_ob_river
		has_state_trait = state_trait_po_river
		has_state_trait = state_trait_mississippi_river
		has_state_trait = state_trait_ohio_river
		has_state_trait = state_trait_columbia_river
		has_state_trait = state_trait_orinoco_river
		has_state_trait = state_trait_uruguay_river
		has_state_trait = state_trait_parana_river
		has_state_trait = state_trait_paraguay_river
		has_state_trait = state_trait_amazon_river
	}
}

#todo update with new buildings
has_government_building = {
	OR = {
		has_building = building_university
	}
}

#todo update with new buildings
has_military_building = {
	OR = {
		has_building = building_barracks
		has_building = building_naval_base
	}
}

#todo update with new buildings
has_industry_building = {
	OR = {
		has_building = building_food_industry
		has_building = building_textile_manufactories
		has_building = building_furniture_manufactories
		has_building = building_glassworks
		has_building = building_tool_manufactories
		has_building = building_paper_manufactories
	}
}

#todo update with new buildings
is_industry_building = {
	OR = {
		is_building_type = building_food_industry
		is_building_type = building_textile_manufactories
		is_building_type = building_furniture_manufactories
		is_building_type = building_glassworks
		is_building_type = building_tool_manufactories
		is_building_type = building_paper_manufactories
	}
}

#todo update with new buildings
has_heavy_industry_building = {
	OR = {
		has_building = building_chemical_plants
		has_building = building_synthetics_plant
		has_building = building_steelworks
		has_building = building_motor_industry
		has_building = building_advanced_military_manufactories
		has_building = building_electronics_manufactories
		has_building = building_explosives_industry
		has_building = building_combustion_plant
	}
}

#todo update with new buildings
is_heavy_industry_building = {
	OR = {
		is_building_type = building_chemical_plants
		is_building_type = building_synthetics_plant
		is_building_type = building_steelworks
		is_building_type = building_motor_industry
		is_building_type = building_advanced_military_manufactories
		is_building_type = building_electronics_manufactories
		is_building_type = building_explosives_industry
		is_building_type = building_combustion_plant
	}
}

#todo update to include all states in africa
state_in_africa = {
	custom_tooltip = {
		text = state_in_africa_desc
		OR = {
			region = sr:region_north_africa
			region = sr:region_west_africa
			region = sr:region_central_africa
			region = sr:region_southern_africa
			region = sr:region_horn_of_africa
		}
	}
}

has_subsistence_building = {
	any_scope_building = {
		is_subsistence_building = yes
	}
}

is_farm_building = {
	or = {
		is_building_type = building_rye_farm
		is_building_type = building_wheat_farm
		is_building_type = building_rice_farm
		is_building_type = building_maize_farm
		is_building_type = building_millet_farm
		is_building_type = building_livestock_ranch
	}
}

has_farm_building = {
	OR = {
		has_building = building_rye_farm
		has_building = building_wheat_farm
		has_building = building_rice_farm
		has_building = building_maize_farm
		has_building = building_millet_farm
		has_building = building_livestock_ranch
	}
}

#todo update to include all colonies
is_production_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
		is_building_type = building_lead_mine
		is_building_type = building_phosphorus_mine
		is_building_type = building_logging_camp
		is_building_type = building_oil_rig
		is_building_type = building_coffee_plantation
		is_building_type = building_cotton_plantation
		is_building_type = building_opium_plantation
		is_building_type = building_tea_plantation
		is_building_type = building_tobacco_plantation
		is_building_type = building_sugar_plantation
		is_building_type = building_rubber_plantation
		is_building_type = building_banana_plantation
		is_building_type = building_silk_plantation
		is_building_type = building_livestock_ranch
		is_building_type = building_maize_farm
		is_building_type = building_millet_farm
		is_building_type = building_rice_farm
		is_building_type = building_wheat_farm
		is_building_type = building_rye_farm
		is_building_type = building_food_industry
		is_building_type = building_textile_manufactories
		is_building_type = building_furniture_manufactories
		is_building_type = building_glassworks
		is_building_type = building_tool_manufactories
		is_building_type = building_paper_manufactories
		is_building_type = building_chemical_plants
		is_building_type = building_synthetics_plant
		is_building_type = building_steelworks
		is_building_type = building_motor_industry
		is_building_type = building_shipyards
		is_building_type = building_electronics_manufactories
		is_building_type = building_advanced_military_manufactories
		is_building_type = building_small_arms_manufactories
		is_building_type = building_explosives_industry
		is_building_type = building_combustion_plant
		is_building_type = building_fishing_wharf
	}
}

will_be_accepted_culture = {
	OR = {
		AND = {
			owner = {
				is_enacting_law = law_type:law_ethnonationalist
			}
			culture = {
				is_primary_culture_of = root
			}
		}
		AND = {
			owner = {
				is_enacting_law = law_type:law_supremacist
			}
			AND = {
				culture = {
					shares_heritage_trait_with_any_primary_culture = root
				}
				culture = {
					shares_non_heritage_trait_with_any_primary_culture = root
				}
			}
		}
		AND = {
			owner = {
				is_enacting_law = law_type:law_segregationist
			}
			culture = {
				shares_heritage_trait_with_any_primary_culture = root
			}
		}
		AND = {
			owner = {
				is_enacting_law = law_type:law_integrationist
			}
			culture = {
				shares_trait_with_any_primary_culture = root
			}
		}
		owner = {
			is_enacting_law = law_type:law_multiculturalist
		}
	}
}

law_can_hurt_minorities = {
	OR = {
		is_enacting_law = law_type:law_religious_nationalism
		is_enacting_law = law_type:law_religious_institutions
		is_enacting_law = law_type:law_religious_policies
		is_enacting_law = law_type:law_ethnonationalist
		is_enacting_law = law_type:law_supremacist
		is_enacting_law = law_type:law_segregationist
		is_enacting_law = law_type:law_integrationist
		is_enacting_law = law_type:law_anti_industrialization
		is_enacting_law = law_type:law_decentralization
		is_enacting_law = law_type:law_free_market
		is_enacting_law = law_type:law_export_orientation
		is_enacting_law = law_type:law_free_trade
		is_enacting_law = law_type:law_isolationism
		is_enacting_law = law_type:law_church_run_schools
		is_enacting_law = law_type:law_private_schools
		is_enacting_law = law_type:law_outlawed_dissent
		is_enacting_law = law_type:law_censorship
		is_enacting_law = law_type:law_per_capita_based_taxation
		is_enacting_law = law_type:law_morality_police
		is_enacting_law = law_type:law_militarized_police
		is_enacting_law = law_type:law_secret_police
		is_enacting_law = law_type:law_no_welfare
		is_enacting_law = law_type:law_open_borders
		is_enacting_law = law_type:law_selective_immigration
		is_enacting_law = law_type:law_closed_borders
	}
}

#todo update with new pms
# has_distillery = {
# 	any_scope_building = {
# 		OR = {
# 			has_active_production_method = pm_pot_stills
# 			has_active_production_method = pm_patent_stills
# 		}
# 	}
# }
#todo update with new pms
# is_distillery = {
# 	OR = {
# 		has_active_production_method = pm_pot_stills
# 		has_active_production_method = pm_patent_stills
# 	}
# }
#todo update with new buildings
is_raw_industries_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
		is_building_type = building_lead_mine
		is_building_type = building_phosphorus_mine
		is_building_type = building_logging_camp
	}
}

#todo update with new buildings
is_plantation_building = {
	or = {
		is_building_type = building_coffee_plantation
		is_building_type = building_cotton_plantation
		is_building_type = building_opium_plantation
		is_building_type = building_tea_plantation
		is_building_type = building_tobacco_plantation
		is_building_type = building_sugar_plantation
		is_building_type = building_rubber_plantation
		is_building_type = building_banana_plantation
		is_building_type = building_silk_plantation
	}
}

#todo update with new buildings
is_economic_objective_building = {
	or = {
		is_building_type = building_coal_mine
		is_building_type = building_iron_mine
	}
}

is_non_customs_union_subject = {
	is_subject = yes
	NOT = {
		is_subject_type = subject_type_customs_union
	}
}

#todo update with new drugs
has_addiction = {
	OR = {
		has_trait = alcoholic
		has_trait = drug_addiction
		has_trait = cocaine_addiction
	}
}

is_commander = {
	OR = {
		has_role = general
		has_role = admiral
	}
}

is_on_front = {
	OR = {
		has_commander_order = advance
		has_commander_order = defend
	}
}

# has_colonial_growth = {
# 	colonial_growth_per_colony > 0
# }
default_auto_expand_rule = {
	cash_reserves_ratio > 0.95
	state.market_access >= 0.95
}

is_in_civil_war = {
	custom_tooltip = {
		text = is_in_civil_war_tt
		any_diplomatic_play = {
			any_scope_play_involved = {
				this = root
			}
			initiator = {
				NOT = {
					this = ROOT
				}
				country_definition = root.country_definition
			}
		}
	}
}

has_paternalist_ideology = {
	has_ideology = ideology:ideology_paternalistic
}

can_reach_target_country = {
	has_diplomatic_relevance = scope:target_country
	scope:target_country = {
		or = {
			has_building = building_airport
			has_building = building_port
		}
	}
}

can_reach_target_state = {
	has_diplomatic_relevance = scope:target_state.owner
	scope:target_state = {
		has_building = building_airport
		has_building = building_port
	}
}

can_reach_target_market = {
	has_diplomatic_relevance = scope:target_country
	scope:target_country.market = {
		has_building = building_airport
		has_building = building_port
	}
}

any_revolution_ongoing = {
	any_political_movement = {
		is_revolutionary_movement = yes
	}
}

socialist_revolution_ongoing = {
	custom_tooltip = {
		text = socialist_revolution_ongoing_tt
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					or = {
						law_stance = {
							law = law_type:law_socialization
							value > neutral
						}
						law_stance = {
							law = law_type:law_council_elective
							value > neutral
						}
					}
				}
				any_supporting_character = {
					has_role = agitator
					or = {
						law_stance = {
							law = law_type:law_socialization
							value > neutral
						}
						law_stance = {
							law = law_type:law_council_elective
							value > neutral
						}
					}
				}
			}
		}
	}
}

liberal_revolution_ongoing = {
	custom_tooltip = {
		text = liberal_revolution_ongoing_tt
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					OR = {
						has_ideology = ideology:ideology_conscientious
						has_ideology = ideology:ideology_humanitarian
						has_ideology = ideology:ideology_modernistic
						has_ideology = ideology:ideology_reformist
						has_ideology = ideology:ideology_bohemian
						has_ideology = ideology:ideology_egalitarian
						has_ideology = ideology:ideology_social
						leader = {
							has_liberal_ideology = yes
						}
						AND = {
							law_stance = {
								law = law_type:law_autocracy
								value < neutral
							}
							law_stance = {
								law = law_type:law_council_elective
								value < neutral
							}
						}
					}
				}
				any_supporting_character = {
					has_role = agitator
					OR = {
						has_liberal_ideology = yes
					}
					AND = {
						law_stance = {
							law = law_type:law_autocracy
							value < neutral
						}
						law_stance = {
							law = law_type:law_council_elective
							value < neutral
						}
					}
				}
			}
		}
	}
}

reactionary_revolution_ongoing = {
	custom_tooltip = {
		text = reactionary_revolution_ongoing_tt
		any_political_movement = {
			is_revolutionary_movement = yes
			OR = {
				any_supporting_interest_group = {
					OR = {
						has_ideology = ideology:ideology_paternalistic
						has_ideology = ideology:ideology_stratocratic
						has_ideology = ideology:ideology_hierarchical
						has_ideology = ideology:ideology_reactionary
						has_ideology = ideology:ideology_authoritative
						has_ideology = ideology:ideology_conservative
						leader = {
							OR = {
								has_fascist_ideology = yes
								has_reactionary_ideology = yes
							}
						}
						AND = {
							law_stance = {
								law = law_type:law_autocracy
								value >= neutral
							}
							law_stance = {
								law = law_type:law_council_elective
								value < neutral
							}
							law_stance = {
								law = law_type:law_socialization
								value < neutral
							}
						}
					}
				}
				any_supporting_character = {
					has_role = agitator
					OR = {
						has_fascist_ideology = yes
						has_reactionary_ideology = yes
					}
					AND = {
						OR = {
							law_stance = {
								law = law_type:law_autocracy
								value >= neutral
							}
							law_stance = {
								law = law_type:law_supremacist
								value >= neutral
							}
						}
						law_stance = {
							law = law_type:law_council_elective
							value < neutral
						}
						law_stance = {
							law = law_type:law_socialization
							value < neutral
						}
					}
				}
			}
		}
	}
}

ig_is_socialist = {
	OR = {
		has_ideology = ideology:ideology_vanguardist
		has_ideology = ideology:ideology_social
		leader = {
			has_socialist_ideology = yes
		}
		or = {
			law_stance = {
				law = law_type:law_council_elective
				value > neutral
			}
			law_stance = {
				law = law_type:law_socialization
				value > neutral
			}
		}
	}
}

ig_is_liberal = {
	OR = {
		has_ideology = ideology:ideology_conscientious
		has_ideology = ideology:ideology_humanitarian
		has_ideology = ideology:ideology_modernistic
		has_ideology = ideology:ideology_reformist
		has_ideology = ideology:ideology_bohemian
		has_ideology = ideology:ideology_egalitarian
		has_ideology = ideology:ideology_social
		leader = {
			has_liberal_ideology = yes
		}
		AND = {
			law_stance = {
				law = law_type:law_autocracy
				value < neutral
			}
			law_stance = {
				law = law_type:law_council_elective
				value < neutral
			}
			law_stance = {
				law = law_type:law_socialization
				value < neutral
			}
		}
	}
}

ig_is_reactionary = {
	OR = {
		has_ideology = ideology:ideology_paternalistic
		has_ideology = ideology:ideology_stratocratic
		has_ideology = ideology:ideology_hierarchical
		has_ideology = ideology:ideology_reactionary
		has_ideology = ideology:ideology_authoritative
		has_ideology = ideology:ideology_conservative
		leader = {
			OR = {
				has_reactionary_ideology = yes
				has_fascist_ideology = yes
			}
		}
		AND = {
			law_stance = {
				law = law_type:law_autocracy
				value >= neutral
			}
			law_stance = {
				law = law_type:law_council_elective
				value < neutral
			}
			law_stance = {
				law = law_type:law_socialization
				value < neutral
			}
		}
	}
}

revolution_progress_low = {
	any_civil_war = {
		civil_war_progress >= 0
		NOT = {
			civil_war_progress >= 0.34
		}
		is_civil_war_type = revolution
	}
}

revolution_progress_medium = {
	any_civil_war = {
		civil_war_progress >= 0.34
		NOT = {
			civil_war_progress >= 0.67
		}
		is_civil_war_type = revolution
	}
}

revolution_progress_high = {
	any_civil_war = {
		civil_war_progress >= 0.67
		is_civil_war_type = revolution
	}
}

government_ig_supports_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value > neutral
		}
	}
}

movement_supports_enaction = {
	any_political_movement = {
		OR = {
			is_political_movement_type = movement_to_enact
			is_political_movement_type = movement_to_restore
		}
		desired_law = root.currently_enacting_law.type
	}
}

agitator_supports_enaction = {
	any_scope_character = {
		has_role = agitator
		OR = {
			law_stance = {
				law = owner.currently_enacting_law.type
				value > neutral
			}
			AND = {
				law_stance = {
					law = owner.currently_enacting_law.type
					value > strongly_approve
				}
				interest_group = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value > neutral
					}
					NOT = {
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve
						}
					}
				}
			}
		}
	}
}

government_ig_opposes_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value < neutral
		}
	}
}

movement_opposes_enaction = {
	any_political_movement = {
		is_political_movement_type = movement_to_preserve
	}
}

agitator_opposes_enaction = {
	any_scope_character = {
		has_role = agitator
		OR = {
			law_stance = {
				law = owner.currently_enacting_law.type
				value < neutral
			}
			AND = {
				law_stance = {
					law = owner.currently_enacting_law.type
					value > strongly_approve
				}
				interest_group = {
					law_stance = {
						law = owner.currently_enacting_law.type
						value < neutral
					}
					NOT = {
						law_stance = {
							law = owner.currently_enacting_law.type
							value > strongly_approve
						}
					}
				}
			}
		}
	}
}

government_ig_ambivalent_enaction = {
	any_interest_group = {
		is_marginal = no
		is_in_government = yes
		law_stance = {
			law = owner.currently_enacting_law.type
			value = neutral
		}
	}
}

ig_type_matches_former = {
	#Temporary Workaround
	save_temporary_scope_as = exile_temp
	custom_tooltip = {
		text = ig_type_matches_former_tt
		OR = {
			AND = {
				is_interest_group_type = ig_securocrats
				scope:ex_ig = {
					is_interest_group_type = ig_securocrats
				}
			}
			AND = {
				is_interest_group_type = ig_patriots
				scope:ex_ig = {
					is_interest_group_type = ig_patriots
				}
			}
			AND = {
				is_interest_group_type = ig_bureaucrats
				scope:ex_ig = {
					is_interest_group_type = ig_bureaucrats
				}
			}
			AND = {
				is_interest_group_type = ig_entrepreneurs
				scope:ex_ig = {
					is_interest_group_type = ig_entrepreneurs
				}
			}
			AND = {
				is_interest_group_type = ig_moralists
				scope:ex_ig = {
					is_interest_group_type = ig_moralists
				}
			}
			AND = {
				is_interest_group_type = ig_capitalists
				scope:ex_ig = {
					is_interest_group_type = ig_capitalists
				}
			}
			AND = {
				is_interest_group_type = ig_elites
				scope:ex_ig = {
					is_interest_group_type = ig_elites
				}
			}
			AND = {
				is_interest_group_type = ig_entrepreneurs
				scope:ex_ig = {
					is_interest_group_type = ig_entrepreneurs
				}
			}
			AND = {
				is_interest_group_type = ig_ruralists
				scope:ex_ig = {
					is_interest_group_type = ig_ruralists
				}
			}
			AND = {
				is_interest_group_type = ig_laborists
				scope:ex_ig = {
					is_interest_group_type = ig_laborists
				}
			}
		}
	}
}

#It is intended that some of these categories overlap.
has_liberal_ideology = {
	OR = {
		has_ideology = ideology:ideology_aristocrat
		has_ideology = ideology:ideology_electoral_reformist
		has_ideology = ideology:ideology_dixiecrat
		has_ideology = ideology:ideology_multiculturalist
		has_ideology = ideology:ideology_de_regulationist
		has_ideology = ideology:ideology_federalist
		has_ideology = ideology:ideology_privatizer
		has_ideology = ideology:ideology_christian_democrat
		has_ideology = ideology:ideology_globalist
		has_ideology = ideology:ideology_military_regulator
		has_ideology = ideology:ideology_punitive
	}
}

has_progressive_ideology = {
	OR = {
		has_ideology = ideology:ideology_atheist
		has_ideology = ideology:ideology_feminist
		has_ideology = ideology:ideology_primitivist
		has_ideology = ideology:ideology_anarchist
		has_ideology = ideology:ideology_environmentalist
		has_ideology = ideology:ideology_pacifist
		has_ideology = ideology:ideology_abolitionist
		has_ideology = ideology:ideology_developmentalist
		has_ideology = ideology:ideology_technocrat
		has_ideology = ideology:ideology_liberation_theologist
	}
}

has_socialist_ideology = {
	OR = {
		has_ideology = ideology:ideology_totalitarian
		has_ideology = ideology:ideology_authoritarian
		has_ideology = ideology:ideology_developmentalist
		has_ideology = ideology:ideology_technocrat
		has_ideology = ideology:ideology_liberation_theologist
		has_ideology = ideology:ideology_atheist
		has_ideology = ideology:ideology_anarchist
		has_ideology = ideology:ideology_abolitionist
		has_ideology = ideology:ideology_vanguardist
	}
}

has_reactionary_ideology = {
	OR = {
		has_ideology = ideology:ideology_totalitarian
		has_ideology = ideology:ideology_authoritarian
		has_ideology = ideology:ideology_fascist
		has_ideology = ideology:ideology_de_regulationist
		has_ideology = ideology:ideology_privatizer
		has_ideology = ideology:ideology_dixiecrat
		has_ideology = ideology:ideology_monarchist
		has_ideology = ideology:ideology_misogynist
		has_ideology = ideology:ideology_autarky
		has_ideology = ideology:ideology_aristocrat
		has_ideology = ideology:ideology_racist
		has_ideology = ideology:ideology_demagogue
		has_ideology = ideology:ideology_punitive
		has_ideology = ideology:ideology_slaver
	}
}

has_fascist_ideology = {
	or = {
		has_ideology = ideology:ideology_fascist
		has_ideology = ideology:ideology_racist
	}
}

has_conservative_ideology = {
	OR = {
		has_ideology = ideology:ideology_dixiecrat
		has_ideology = ideology:ideology_punitive
		has_ideology = ideology:ideology_slaver
		has_ideology = ideology:ideology_aristocrat
	}
}

has_monarchist_ideology = {
	OR = {
		has_ideology = ideology:ideology_monarchist
		has_ideology = ideology:ideology_aristocrat
		has_ideology = ideology:ideology_jihadist
	}
}

can_have_radical_leader = {
	# interest_group scope
	leader = {
		NOR = {
			has_socialist_ideology = yes
			has_progressive_ideology = yes
		}
	}
	OR = {
		is_interest_group_type = ig_ruralists
		is_interest_group_type = ig_laborists
		is_interest_group_type = ig_entrepreneurs
		is_interest_group_type = ig_securocrats
		is_interest_group_type = ig_elites
	}
}

is_major_unifier = {
	OR = {
		c:PRC ?= this
		c:CHI ?= this
		c:ROC ?= this
		c:HND ?= this
		c:PAK ?= this
		c:MYM ?= this
		c:IDS ?= this
		c:RUS ?= this
		c:ITA ?= this
		c:EQA ?= this
		c:VNM ?= this
		c:GER ?= this
		c:YUG ?= this
		c:SPA ?= this
		c:IBE ?= this
		c:TRH ?= this
		c:ARA ?= this
		c:ABI ?= this
		c:PTG ?= this
		c:CZH ?= this
		c:WAU ?= this
		c:EAU ?= this
		c:UCA ?= this
		c:GBR ?= this
		c:SCA ?= this
		c:KUK ?= this
		c:RSF ?= this
		c:JMH ?= this
		c:BNL ?= this
		c:ALP ?= this
		c:MPH ?= this
		c:IMP ?= this
		c:ESF ?= this
		c:ZAP ?= this
		c:TGC ?= this
		c:ANT ?= this
		c:SGA ?= this
		c:CUM ?= this
		c:LEV ?= this
	}
}

is_active_in_diplomatic_play = {
	OR = {
		is_diplomatic_play_committed_participant = yes
		is_diplomatic_play_initiator = yes
		is_diplomatic_play_target = yes
	}
}

budget_low_training_rate = {
	modifier:building_training_rate_mult < 0
	OR = {
		is_active_in_diplomatic_play = yes
		is_at_war = yes
	}
}

has_anti_imperialist_policy = {
	OR = {
		imperial_policy_value_net <= -0.1
		has_variable = anti_imperialist_policy
		has_global_variable = decolonization_resolutioncomplete
	}
}

has_imperialist_policy = {
	OR = {
		imperial_policy_value_net >= 0.1
		has_variable = imperialist_policy
		has_global_variable = decolonization_resolutionfail
	}
	NOT = {
		has_global_variable = decolonization_resolutioncomplete
	}
}

diplomatic_play_has_no_relations_blockers = {
	diplomatic_play_has_no_relations_blocker_with_target = yes
	diplomatic_play_has_no_relations_blocker_with_overlord = yes
}

diplomatic_play_has_no_relations_blocker_with_target = {
	custom_tooltip = {
		text = DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER_NOT
		scope:target_country.relations:root < relations_threshold:cordial
	}
}

diplomatic_play_has_no_relations_blocker_with_overlord = {
	trigger_if = {
		limit = {
			scope:target_country = {
				is_subject = yes
			}
		}
		custom_tooltip = {
			text = DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT
			scope:target_country.overlord.relations:root < relations_threshold:cordial
		}
	}
	trigger_if = {
		limit = {
			scope:target_country = {
				is_subject = yes
				NOT = {
					overlord = top_overlord
				}
			}
		}
		custom_tooltip = {
			text = DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT
			scope:target_country.overlord.relations:root < relations_threshold:cordial
		}
	}
}
