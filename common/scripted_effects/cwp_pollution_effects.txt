# scope:state
onaction_set_habitability_effects = {
	# Get the habitability of the region
	if = {
		limit = {
			has_variable = habitability
		}
		set_local_variable = {
			name = local_habitability_level
			value = var:habitability
		}
	}
	else = {
		set_local_variable = {
			name = local_habitability_level
			value = 0
		}
	}
	# effectively sets the max habitability to 15% and the min to -15%
	change_local_variable = {
		name = local_habitability_level
		multiply = 15
	}
	# Add other modifiers to the state, its owner, its buildings, as well as extra modifiers for coastal states. 
	# Negative value for negative effects, positive value for positive effects
	##
	remove_modifier = state_negative_habitability_effect
	remove_modifier = state_positive_habitability_effect
	if = {
		limit = {
			local_var:local_habitability_level < 0
		}
		add_modifier = {
			name = state_negative_habitability_effect
			multiplier = local_var:local_habitability_level
		}
	}
	else = {
		add_modifier = {
			name = state_positive_habitability_effect
			multiplier = local_var:local_habitability_level
		}
	}
}

#scope:state
#This is process power intensive, only run this at the start of the game
onaction_calc_starting_habitability = {
	set_variable = {
		name = max_habitability
		value = 0.5
	}
	set_local_variable = {
		name = local_arable_land_total
		value = 0
	}
	state_region = {
		every_scope_state = {
			change_local_variable = {
				name = local_arable_land_total
				add = arable_land
			}
		}
	}
	if = {
		limit = {
			is_coastal = yes
		}
		change_variable = {
			name = max_habitability
			add = 0.1
		}
	}
	if = {
		limit = {
			local_var:local_arable_land_total > 100
		}
		change_variable = {
			name = max_habitability
			add = 0.4
		}
	}
	set_variable = {
		name = habitability
		value = var:max_habitability
	}
	set_variable = {
		name = min_habitability
		value = -1
	}
}

onaction_calc_monthly_habitability = {
	if = {
		limit = {
			has_variable = habitability
		}
		calc_pollution_habitability = yes
		calc_temp_change_habitability = yes
	}
	else = {
		set_variable = {
			name = habitability
			value = 0
		}
	}
}

# HACK: Rudimentary evaluation of temperature change, as temps remain above 16C, habitability will decrease linearly. Ideally at 22C every state between the tropics of cancer and capricorn would be uninhabitable.
calc_temp_change_habitability = {
	if = {
		limit = {
			global_temp_target_celsius < 15
		}
		change_variable = {
			name = habitability
			add = 0.0005
		}
	}
	if = {
		limit = {
			global_temp_target_celsius < 16
		}
		change_variable = {
			name = habitability
			add = 0.001
		}
	}
	if = {
		limit = {
			global_temp_target_celsius < 17
		}
		change_variable = {
			name = habitability
			add = 0.0015
		}
	}
	if = {
		limit = {
			global_temp_target_celsius < 18
		}
		change_variable = {
			name = habitability
			add = 0.0015
		}
	}
	if = {
		limit = {
			global_temp_target_celsius < 19
		}
		change_variable = {
			name = habitability
			add = 0.002
		}
	}
	if = {
		limit = {
			has_variable = max_habitability
		}
		if = {
			limit = {
				var:habitability > var:max_habitability
			}
			set_variable = {
				name = habitability
				value = var:max_habitability
			}
		}
	}
	else_if = {
		limit = {
			var:habitability > 1
		}
		set_variable = {
			name = habitability
			value = 1
		}
	}
}

#HACK Currently the generation from the state has a minimum effect on habitability, but there may be a better way to interpret this value
calc_pollution_habitability = {
	if = {
		limit = {
			pollution_generation > 0
		}
		change_variable = {
			name = habitability
			add = -0.0001
		}
	}
	if = {
		limit = {
			pollution_generation > 50
		}
		change_variable = {
			name = habitability
			add = -0.0005
		}
	}
	if = {
		limit = {
			pollution_generation > 100
		}
		change_variable = {
			name = habitability
			add = -0.001
		}
	}
	if = {
		limit = {
			pollution_generation > 150
		}
		change_variable = {
			name = habitability
			add = -0.0015
		}
	}
	if = {
		limit = {
			pollution_generation > 200
		}
		change_variable = {
			name = habitability
			add = -0.002
		}
	}
	if = {
		limit = {
			pollution_generation > 250
		}
		change_variable = {
			name = habitability
			add = -0.0025
		}
	}
	if = {
		limit = {
			has_variable = min_habitability
		}
		if = {
			limit = {
				var:habitability < var:min_habitability
			}
			set_variable = {
				name = habitability
				value = var:min_habitability
			}
		}
	}
	else_if = {
		limit = {
			var:habitability < -1
		}
		set_variable = {
			name = habitability
			value = -1
		}
	}
}

#scope:country
effect_ban_pollution_industries = {
	every_scope_state = {
		# If the state has any combustion plants, get their level and the level of any renewable facilities and add them to an accumulator. Then remove all the combustion and renewable facilities and create new renewable facilities with the level of the accumulator.
		# Essentially what this does is "transition" all the combustion plants to renewable facilities, but both have to be removed first due to the way `create_building` works.	
		limit = {
			has_building = building_combustion_plant
		}
		set_local_variable = {
			name = combustion_and_renewable_building_accumulator
			value = 0
		}
		every_scope_building = {
			limit = {
				is_building_type = building_combustion_plant
			}
			change_local_variable = {
				name = combustion_and_renewable_building_accumulator
				add = level
			}
		}
		every_scope_building = {
			limit = {
				is_building_type = building_renewable_energy_facility
			}
			change_local_variable = {
				name = combustion_and_renewable_building_accumulator
				add = level
			}
		}
		remove_building = building_combustion_plant
		remove_building = building_renewable_energy_facility
		create_building = {
			building = building_renewable_energy_facility
			level = local_var:combustion_and_renewable_building_accumulator
			reserves = 1
		}
	}
	# Destroys all fuel refineries
	every_scope_state = {
		limit = {
			has_building = building_fuel_refineries
		}
		remove_building = building_fuel_refineries
	}
	# destroys all natural gas wells
	every_scope_state = {
		limit = {
			has_building = building_natural_gas_well
		}
		remove_building = building_natural_gas_well
	}
	# destroys all oil rigs
	every_scope_state = {
		limit = {
			has_building = building_oil_rig
		}
		remove_building = building_oil_rig
	}
}
