

aroai_day_of_ongoing_iteration = {
	value = 29
	subtract = var:aroai_date_of_next_iteration
	add = game_date
}

aroai_days_since_monthly_effects_were_applied = {
    value = game_date
    subtract = global_var:aroai_date_of_last_applying_of_monthly_effects
}
aroai_days_since_yearly_effects_were_applied = {
    value = game_date
    subtract = global_var:aroai_date_of_last_applying_of_yearly_effects
}

aroai_max_iterations_since_production_downsizing = 5

aroai_base_construction_points = 15

aroai_construction_points_per_building = {
	value = define:NEconomy|MAX_WEEKLY_CONSTRUCTION_PROGRESS
	divide = {
		if = {
			limit = {
				has_variable = aroai_median_construction_efficiency
			}
			value = var:aroai_median_construction_efficiency
			divide = 10
		}
		else = {
			value = 1
			# add = modifier:state_construction_mult
			add = {
				value = {
					every_scope_state = {
						add = modifier:state_construction_mult
					}
				}
				divide = {
					every_scope_state = {
						add = 1
					}
				}
			}
			min = define:NEconomy|MIN_CONSTRUCTION_EFFICIENCY
		}
		min = 0.01
	}
	min = 0.5
	max = define:NEconomy|MAX_WEEKLY_CONSTRUCTION_ALLOCATION
}

aroai_construction_points_current = {
	value = modifier:country_construction_add
	# Is not in the game yet
	# multiply = {
	#     value = modifier:country_construction_mult
	#     add = 1
	# }
	min = aroai_base_construction_points
}

aroai_construction_points_from_sectors_current = {
	value = aroai_construction_points_current
	subtract = aroai_base_construction_points
	min = 0
}

aroai_constructions_possible_with_current_points = {
	value = aroai_construction_points_current
	divide = aroai_construction_points_per_building
}

aroai_usage_of_construction_points_value = {
	value = aroai_construction_queue_num_queued_levels
	multiply = aroai_construction_points_per_building
}

aroai_usage_of_construction_points_percent = {
	value = aroai_usage_of_construction_points_value
	divide = aroai_construction_points_current
	min = 0
	max = 1
}

aroai_expenses_for_one_construction = {
	value = aroai_construction_points_per_building
	multiply = aroai_building_construction_sector_expenses_per_point
}

aroai_construction_queue_num_queued_levels = {
	value = construction_queue_num_queued_levels
	if = {
		limit = {
			construction_queue_num_queued_private_levels > 0
		}
		subtract = construction_queue_num_queued_private_levels
		add = aroai_construction_queue_num_queued_private_levels
	}
}

aroai_construction_queue_num_queued_private_levels = {
	value = construction_queue_num_queued_private_levels
	max = {
		value = aroai_investment_pool_potential
		# Investment pool only cover goods, wages are paid from government money
		divide = {
			value = aroai_expenses_for_one_construction
			multiply = aroai_building_construction_sector_share_of_goods_in_expenses
			min = 1
		}
		round = yes
	}
}

aroai_usage_of_construction_points_by_private_queue = {
	if = {
		limit = {
			aroai_construction_queue_num_queued_levels <= 0
		}
		value = 0
	}
	else = {
		value = aroai_construction_queue_num_queued_private_levels
		multiply = aroai_construction_points_per_building
        min = 0
	}
}

aroai_building_construction_sector_expenses_per_point = {
   value = 1500
}



aroai_building_construction_sector_share_of_wages_in_expenses = 0.10

aroai_building_construction_sector_share_of_wages_in_expenses = 0.1
aroai_building_construction_sector_share_of_goods_in_expenses = {
	value = 1
	subtract = aroai_building_construction_sector_share_of_wages_in_expenses
	min = 0
	max = 1
}

aroai_max_percent_of_autonomous_construction_points = 0.9



aroai_usage_of_construction_points_by_government_queue = {
    value = aroai_usage_of_construction_points_value
    subtract = aroai_usage_of_construction_points_by_private_queue
    min = 0
}

aroai_private_construction_allocation_mult =  {
    if = { limit = { has_law = law_type:law_heavy_industry_nationalization}
        value = 0.2
    }
    else_if = { limit = { has_law = law_type:law_military_industry_nationalization}
        value = 0.3
    }
    else_if = { limit = { has_law = law_type:law_resource_extraction_nationalization}
        value = 0.4
    }
    else_if = { limit = { has_law = law_type:law_public_utility_companies}
        value = 0.5
    }
    else_if = { limit = { has_law = law_type:law_no_nationalization }
        value = 0.75
    }
    else = {
        value = 0
    }
}

aroai_free_construction_points = {

    # Base value is how much construction country does have
    value = aroai_construction_points_current

    multiply = {
        value = 1
        subtract = aroai_private_construction_allocation_mult
    }

    min = {
        value = aroai_construction_points_current
        subtract = aroai_usage_of_construction_points_by_private_queue
    }

    # With this, we no longer need to downsize construction sector, it'll only used as many points as we desire, even if the budget is unstable
    max = aroai_construction_points_wanted_for_gov

    # Subtract construction points used in the government queue
    subtract = aroai_usage_of_construction_points_by_government_queue

    min = 0
}

aroai_unincorporated_population = {
	value = total_population
	subtract = var:aroai_incorporated_population
}

aroai_unincorporated_coastal_population = {
	value = var:aroai_total_coastal_population
	subtract = var:aroai_incorporated_coastal_population
}

aroai_half_unincorporated_coastal_population = {
	value = aroai_unincorporated_coastal_population
	divide = 2
}

aroai_minus_half_unincorporated_population = {
	value = total_population
	subtract = {
		value = aroai_unincorporated_population
		divide = 2
		min = 0
	}
}


aroai_gdp_per_capita = {
	value = gdp
	divide = {
		value = total_population
		min = 1
	}
}


aroai_unemployed_population = {
	value = state_population
	multiply = {
		value = state_unemployment_rate
		min = 0
		max = 1
	}
}

aroai_sufficient_occupancy = {
	value = level
	subtract = {
		value = 1
		add = {
			value = 0.1
			multiply = level
		}
	}
	divide = level
	min = 0.4
}

aroai_occupied_levels = {
	value = level
	multiply = {
		value = occupancy
		min = 0
		max = 1
	}
}

aroai_available_workforce = {
    if = {
        limit = {
            has_variable = aroai_available_workforce
        }
        value = var:aroai_available_workforce
    }
    else = {
        value = aroai_unemployed_population
    }
    subtract = {
        value = 0
        every_in_list = {
            variable = aroai_ongoing_constructions
            add = aroai_current_ongoing_constructions_element_4
        }
        multiply = 7000 # 5000
    }
}

aroai_required_workforce = {
	value = 20000
}

aroai_sufficient_workforce = {
	value = 100000
}

aroai_army_power_projection = {
	value = modifier:country_army_power_projection_add
	multiply = {
		value = modifier:country_army_power_projection_mult
		add = 1
	}
}

aroai_power_per_battalion = {
	if = {
		limit = {
			has_variable = aroai_building_barracks_total
			var:aroai_building_barracks_total > 0
			aroai_army_power_projection > 0
		}
		value = aroai_army_power_projection
		divide = var:aroai_building_barracks_total
	}
	else = {
		value = 1
	}
}

aroai_conscription_power_projection = {
	if = {
		limit = {
			has_variable = aroai_building_conscription_center_total
			var:aroai_building_conscription_center_total > 0
		}
		value = var:aroai_building_conscription_center_total
		multiply = aroai_power_per_battalion
		multiply = define:NAI|CONSCRIPTION_ESTIMATED_MILITARY_POWER_MULT
	}
	else = {
		value = 0
	}
}

aroai_army_power_projection_with_conscription = {
	value = aroai_army_power_projection
	add = aroai_conscription_power_projection
}

aroai_navy_power_projection = {
	value = modifier:country_navy_power_projection_add
	multiply = {
		value = modifier:country_navy_power_projection_mult
		add = 1
	}
}

aroai_power_per_flotilla = {
	if = {
		limit = {
			navy_size > 0
			aroai_navy_power_projection > 0
		}
		value = aroai_navy_power_projection
		divide = navy_size
	}
	else = {
		value = 1
	}
}

aroai_institution_bureaucracy_cost = {
	value = var:aroai_incorporated_population
	divide = 100000
}

aroai_infrastructure_balance_value = {
	value = infrastructure
	subtract = infrastructure_usage
}

aroai_infrastructure_balance_percent = {
	value = infrastructure
	divide = {
		value = infrastructure_usage
		min = 1
	}
}

aroai_infrastructure_with_ongoing_constructions = {
	value = infrastructure
	if = {
		limit = {
			any_scope_building = {
				is_building_type = building_railway
				is_under_construction = yes
			}
		}
		add = {
			if = {
				limit = {
					any_scope_building = {
						is_building_type = building_railway
						level > 0
					}
				}
				every_scope_building = {
					limit = {
						is_building_type = building_railway
					}
					value = aroai_infrastructure_per_level_of_railway
				}
				divide = {
					value = 0
					every_scope_building = {
						limit = {
							is_building_type = building_railway
						}
						add = 1
					}
					min = 1
				}
			}
			else = {
				if = {
					limit = {
						root = {
							has_variable = aroai_building_type_4_collected_data
							aroai_building_type_4_collected_data_4 > 0
						}
					}
					value = 5
					multiply = root.aroai_building_type_4_collected_data_4
					add = 10
				}
				else = {
					value = 20
				}
			}
			multiply = {
				if = {
					limit = {
						aroai_has_variable_list = {
							name = aroai_ongoing_constructions
						}
					}
					value = 0
					every_in_list = {
						variable = aroai_ongoing_constructions
						limit = {
							aroai_current_ongoing_constructions_element_1 = 4
							aroai_current_ongoing_constructions_element_3 < 3
						}
						add = aroai_current_ongoing_constructions_element_4
					}
				}
				else = {
					value = 1
				}
			}
		}
	}
}

aroai_infrastructure_per_level_of_railway = {
	value = 0
	if = {
		limit = {
			has_active_production_method = pm_maglev_trains
		}
		add = 120
	}
	else_if = {
		limit = {
			has_active_production_method = pm_high_speed_trains
		}
		add = 100
	}
	else_if = {
		limit = {
			OR = {
				has_active_production_method = pm_modern_diesel_trains
				has_active_production_method = pm_modern_electric_trains
			}
		}
		add = 80
	}
	else_if = {
		limit = {
			OR = {
				has_active_production_method = pm_diesel_trains
				has_active_production_method = pm_electric_trains
			}
		}
		add = 60
	}
	else = {
		add = 40
	}
	if = {
		limit = {
			has_active_production_method = pm_mixed_network
		}
		subtract = 20
	}
	else_if = {
		limit = {
			has_active_production_method = pm_passenger_prioritization
		}
		subtract = 40
	}
}

aroai_infrastructure_balance_value_with_ongoing_constructions = {
	value = aroai_infrastructure_with_ongoing_constructions
	subtract = infrastructure_usage
}

aroai_infrastructure_balance_percent_with_ongoing_constructions = {
	value = aroai_infrastructure_with_ongoing_constructions
	divide = {
		value = infrastructure_usage
		min = 1
	}
}

aroai_tax_capacity_balance_value = {
	value = tax_capacity
	subtract = tax_capacity_usage
}

aroai_tax_capacity_balance_percent = {
	value = tax_capacity
	divide = {
		value = tax_capacity_usage
		min = 1
	}
}

aroai_taxes_lost_due_to_tax_capacity = {
	value = gdp
	multiply = {
		value = 1
		subtract = aroai_tax_capacity_balance_percent
		min = 0
		max = 1
	}
}

aroai_country_lost_taxes = {
	value = {
		every_scope_state = {
			add = aroai_taxes_lost_due_to_tax_capacity
		}
	}
	divide = {
		value = gdp
		min = 1
	}
}

aroai_tax_capacity_from_government_administration = {
	if = {
		limit = {
			has_active_production_method = pm_paperless_offices
		}
		value = 450
	}
	else_if = {
		limit = {
			has_active_production_method = pm_word_processors
		}
		value = 300
	}
	else_if = {
		limit = {
			has_active_production_method = pm_computerized_bureaucracy
		}
		value = 150
	}
	else_if = {
		limit = {
			has_active_production_method = pm_modern_bureaucracy
		}
		value = 70
	}
	else = {
		value = 30
	}
	multiply = level
	multiply = occupancy
}

aroai_building_government_administration_downsizing_threshold = {
	value = root.var:aroai_building_government_administration_total
	multiply = 0.35
}

aroai_building_construction_sector_downsizing_threshold = {
	value = root.var:aroai_building_construction_sector_total
	multiply = 0.5
}

aroai_building_university_downsizing_threshold = {
	value = root.var:aroai_building_university_total
	multiply = 0.5
}

aroai_building_port_downsizing_threshold = {
	value = root.var:aroai_building_port_total
	multiply = 0.5
}

aroai_building_barracks_downsizing_threshold = {
	value = root.var:aroai_building_barracks_total
	multiply = 0.5
}

aroai_building_naval_base_downsizing_threshold = {
	value = root.var:aroai_building_naval_base_total
	multiply = 0.5
}

aroai_median_building_profitability = {
	if = {
		limit = {
			root = {
				has_variable = aroai_median_building_profitability
			}
		}
		value = root.var:aroai_median_building_profitability
	}
	else = {
		value = 0
	}
}

aroai_10_percent_of_average_profit = {
	value = aroai_median_building_profitability
	multiply = 0.1
}

aroai_20_percent_of_average_profit = {
	value = aroai_median_building_profitability
	multiply = 0.2
}

aroai_productivity_without_scaling = {
	value = earnings
	divide = {
		value = 1
		add = {
			value = level
			subtract = define:NEconomy|ECONOMY_OF_SCALE_START_LEVEL
			add = 1
			max = root.modifier:building_economy_of_scale_level_cap_add
			divide = 100
		}
	}
}

aroai_productivity_without_half_economy_of_scale = {
	value = earnings
	divide = {
		value = 1
		add = {
			value = level
			subtract = define:NEconomy|ECONOMY_OF_SCALE_START_LEVEL
			add = 1
			max = root.modifier:building_economy_of_scale_level_cap_add
			divide = 100
			divide = 2
		}
	}
}

aroai_median_building_productivity = {
	if = {
		limit = {
			root = {
				has_variable = aroai_median_building_productivity
			}
		}
		value = root.var:aroai_median_building_productivity
	}
	else = {
		value = 0
	}
}

aroai_75_percent_of_average_productivity = {
	value = aroai_median_building_productivity
	multiply = 0.75
}

aroai_profit_per_occupied_level = {
	if = {
		limit = {
			aroai_occupied_levels > 0
		}
		value = weekly_profit
		divide = aroai_occupied_levels
	}
	else = {
		value = 0
	}
}

aroai_productivity_formatted = {
	value = earnings
	multiply = 10
}

aroai_current_priority = {
	value = local_var:aroai_current_priority
}

aroai_evaluated_priority_level = {
	value = local_var:aroai_evaluated_priority_level
}

aroai_current_aroai_building_type_occupied_levels = {
	value = scope:aroai_current_state.var:aroai_building_type_occupied_levels
}

aroai_current_government_administration_level = {
	value = scope:aroai_current_state.var:aroai_building_government_administration_level
}

aroai_current_university_level = {
	value = scope:aroai_current_state.var:aroai_building_university_level
}

aroai_current_construction_sector_level = {
	value = scope:aroai_current_state.var:aroai_building_construction_sector_level
}

aroai_current_port_level = {
	value = scope:aroai_current_state.var:aroai_building_port_level
}

aroai_current_barracks_level = {
	value = scope:aroai_current_state.var:aroai_building_barracks_level
}

aroai_current_naval_base_level = {
	value = scope:aroai_current_state.var:aroai_building_naval_base_level
}

aroai_building_university_total = {
	value = var:aroai_building_university_total
}

aroai_building_government_administration_spending = {
	value = var:aroai_building_government_administration_spending
}

aroai_building_university_spending = {
	value = var:aroai_building_university_spending
}

aroai_building_port_spending = {
	value = var:aroai_building_port_spending
}

aroai_building_barracks_spending = {
	value = var:aroai_building_barracks_spending
}

aroai_building_naval_base_spending = {
	value = var:aroai_building_naval_base_spending
}
aroai_building_research_institute_spending = {
    value = var:aroai_building_research_institute_spending
}

aroai_state_construction_sector_limit = {
	value = modifier:state_building_construction_sector_max_level_add
}

aroai_state_port_limit = {
	value = modifier:state_building_port_max_level_add
}

aroai_state_barracks_limit = {
	value = modifier:state_building_barracks_max_level_add
}

aroai_state_naval_base_limit = {
	value = modifier:state_building_naval_base_max_level_add
}

aroai_order_of_current_element = {
	value = this
	subtract = {
		value = this
		floor = yes
	}
	multiply = 100
	floor = yes
}

aroai_buildings_with_highest_priority_id = {
	value = this
	floor = yes
}

aroai_average_between_level_and_productivity = {
	value = local_var:aroai_saved_supply_vs_demand_level
	add = local_var:aroai_saved_productivity_requirement_level
	divide = 2
	floor = yes
}

aroai_half_of_average_between_level_and_productivity = {
	value = local_var:aroai_saved_supply_vs_demand_level
	add = local_var:aroai_saved_productivity_requirement_level
	divide = 4
	ceiling = yes
}

aroai_available_agriculture_resources_1 = {
	value = state_region.var:aroai_available_agriculture_resources
	divide = 100000
	floor = yes
	multiply = 100000
}

aroai_available_agriculture_resources_2 = {
	value = state_region.var:aroai_available_agriculture_resources
	subtract = {
		value = state_region.var:aroai_available_agriculture_resources
		divide = 100000
		floor = yes
		multiply = 100000
	}
	divide = 10000
	floor = yes
	multiply = 10000
}

aroai_available_agriculture_resources_3 = {
	value = state_region.var:aroai_available_agriculture_resources
	subtract = {
		value = state_region.var:aroai_available_agriculture_resources
		divide = 10000
		floor = yes
		multiply = 10000
	}
	divide = 1000
	floor = yes
	multiply = 1000
}

aroai_available_agriculture_resources_4 = {
	value = state_region.var:aroai_available_agriculture_resources
	subtract = {
		value = state_region.var:aroai_available_agriculture_resources
		divide = 1000
		floor = yes
		multiply = 1000
	}
	divide = 100
	floor = yes
	multiply = 100
}

aroai_available_agriculture_resources_5 = {
	value = state_region.var:aroai_available_agriculture_resources
	subtract = {
		value = state_region.var:aroai_available_agriculture_resources
		divide = 100
		floor = yes
		multiply = 100
	}
	divide = 10
	floor = yes
	multiply = 10
}

aroai_available_agriculture_resources_6 = {
	value = state_region.var:aroai_available_agriculture_resources
	subtract = {
		value = state_region.var:aroai_available_agriculture_resources
		divide = 10
		floor = yes
		multiply = 10
	}
}

aroai_building_data_overflow_protection = {
	value = 10000
	subtract = {
		value = prev.aroai_occupied_levels
		round = yes
	}
}
