# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@diplo_play_side_width = 250

### DIPLOMATIC PLAYS TEMPLATES
template phase_image_swap {
	state = {
		name = _show
		using = illu_alpha
		duration = 1.5
		using = Animation_Curve_Default
	}
	state = {
		name = _hide
		alpha = 0
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template phase_image_small_swap {
	modify_texture = {
		name = "glow"
		texture = "gfx/interface/animation/shimmer.dds"
		blend_mode = colordodge
		translate_uv = { -1 -1 }
	}

	state = {
		name = _show
		alpha = 1
		duration = 1.5
		using = Animation_Curve_Default

		modify_texture = {
			name = "glow"
			translate_uv = { 1 1 }
		}
	}
	state = {
		name = _hide
		alpha = 0
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template phase_glow {
	state = {
		name = 1
		next = 2
		trigger_on_create = yes
		alpha = 0.7
		duration = 1.5
		using = Animation_Curve_Default
	}
	state = {
		name = 2
		next = 1
		alpha = 0.1
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template visibility_opening_moves {
	visible = "[LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END'))]"
}
template visibility_diplomatic_maneuvers {
	visible = "[And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START')))]"
}
template visibility_countdown_to_war {
	visible = "[GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))]"
}

template diplo_play_phases_scale {
	scale = 0.6
}

types diplomatic_play_panel_types
{
	### DIPLOMATIC PLAYS
	type diplomatic_play_panel = default_block_window {
		name = "diplomatic_play_panel"
		datacontext = "[DiplomaticPlayPanel.AccessDiplomaticPlay]"

		blockoverride "window_header_name" {
			text = "DIPLOMATIC_PLAY_NAME"
		}
		
		#TOP
		blockoverride "fixed_top"
		{
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_overview"
				}

				blockoverride "second_button"
				{
					text = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('involved_countries')]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('involved_countries')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('involved_countries') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_involved_countries"
				}
				blockoverride "second_button_icon" {

					diplo_play_sway_approval = {
						blockoverride "visible_approval_icon" {
							visible = "[DiplomaticPlay.AtLeastOneCountryWouldAcceptAnySway( GetPlayer.Self )]"
						}

						position = { 10 2 }
						tooltip = "HAS_COUNTRIES_YOU_CAN_SWAY_TOOLTIP"


						blockoverride "widget_size" {
							size = { 45 28 }
						}
						blockoverride "icon_size" {
							size = { 28 28 }
						}

						textbox = {
							align = left|nobaseline
							parentanchor = vcenter
							position = { 30 0 }
							raw_text = "#v [DiplomaticPlay.GetNumberOfPossibleSwayCountriesFormatted( GetPlayer.Self )]#!"
						}
					}

					diplo_play_sway_disapproval = {
						blockoverride "visible_disapproval_icon" {
							visible = "[And(Not(DiplomaticPlay.AtLeastOneCountryWouldAcceptAnySway( GetPlayer.Self )), Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self)))]"
						}

						position = { 10 2 }
						tooltip = "HAS_NO_COUNTRIES_YOU_CAN_SWAY_TOOLTIP"

						blockoverride "widget_size" {
							size = { 45 28 }
						}
						blockoverride "icon_size" {
							size = { 28 28 }
						}

						textbox = {
							align = left|nobaseline
							parentanchor = vcenter
							position = { 30 0 }
							raw_text = "#v [DiplomaticPlay.GetNumberOfPossibleSwayCountriesFormatted( GetPlayer.Self )]#!"
						}
					}
				}

				#blockoverride "third_button"
				#{
				#	text = "DIPLO_PLAY_POTENTIAL_FRONTS"
				#}
				#blockoverride "third_button_click"
				#{
				#	onclick = "[InformationPanel.SelectTab('fronts')]"
				#}
				#blockoverride "third_button_visibility"
				#{
				#	visible = "[InformationPanel.IsTabSelected('fronts')]"
				#}
				#blockoverride "third_button_visibility_checked"
				#{
				#	visible = "[Not( InformationPanel.IsTabSelected('fronts') )]"
				#}
				#blockoverride "third_button_selected"
				#{
				#	text = "DIPLO_PLAY_POTENTIAL_FRONTS"
				#}
			}
			
			widget = { size = { 1 5 }}
		}
		
		### CONTENT
		blockoverride "scrollarea_content" {
			
			### OVERVIEW TAB
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				
				### phase images
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_opening_moves_big.dds"
					using = visibility_opening_moves	
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_diplomatic_maneuvers_big.dds"
					using = visibility_diplomatic_maneuvers
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					using = visibility_countdown_to_war
					using = phase_image_swap
					alpha = 0.5
				}
				
				### HEADER
				default_header = {
					blockoverride "text" {
						text = ""
					}
					blockoverride "size" {
						size = { 100% 65 }
					}
					
					flowcontainer = {
						direction = vertical
						parentanchor = center
						
						### phase names
						textbox = {
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION"
							align = center|nobaseline
							using = fontsize_xl
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
							alpha = 0.5
						}
						textbox = {
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION"
							align = center|nobaseline
							using = fontsize_xl
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}
						
						### phase status
						textbox = {
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION_PAUSE"
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							align = center|nobaseline
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}

						textbox = {
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION_NO_PAUSE"
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							align = center|nobaseline
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}
					}
				}	
				
				### DIPLO PLAY SIDES
				container = {
					minimumsize = { @panel_width_plus_14 -1 }
					maximumsize = { @panel_width_plus_14 -1 } 
					parentanchor = hcenter
					
					background = {
						using = dark_area
						alpha = 0.2
						margin_right = -277
						margin_bottom = 50
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					background = {
						using = light_bg
						alpha = 0.2
						margin_left = -277
						margin_bottom = 50
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					#left
					diplo_play_side = {
						position = { 8 0 }
					}
					
					#right
					diplo_play_side = {
						position = { -8 0 }
						
						blockoverride "parentanchor" {
							parentanchor = right
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_TARGET"
						}
						blockoverride "confidence_text" {
							text = "[DiplomaticPlay.GetConfidenceLabel(DiplomaticPlay.GetTarget)]"
						}
						blockoverride "confidence_tooltip" {
							tooltip = "[DiplomaticPlay.GetConfidenceDesc(DiplomaticPlay.GetTarget)]"
						}						
						blockoverride "maneuvers_tooltip" {
							tooltip = "DIPLO_PLAY_MANEUVERS_TARGET_TOOLTIP"
						}
						blockoverride "maneuvers_amount" {
							text = "DIPLO_PLAY_MANEUVERS_TARGET"
						}
						blockoverride "datacontext" {
							datacontext = "[DiplomaticPlay.GetTarget]"
							datacontext = "[DiplomaticPlay.AccessTarget]"
						}
						blockoverride "wargoal_datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetWarGoals]"
						}
						blockoverride "side_visible_property" {
							visible = "[DiplomaticPlay.IsTarget(GetPlayer.Self)]"
						}
						blockoverride "side_visible_not_property" {
							visible = "[Not(DiplomaticPlay.IsTarget(GetPlayer.Self))]"
						}
						blockoverride "flowcontainers_direction" {
							righttoleft = yes
						}
						blockoverride "datamodel_supporters" {
							datamodel = "[DiplomaticPlay.AccessTargetBackers]"
						}
						blockoverride "datamodel_empty_supporters" {
							visible = "[IsDataModelEmpty(DiplomaticPlay.AccessTargetBackers)]"
						}
						blockoverride "datamodel_empty_supporters_not" {
							visible = "[Not(IsDataModelEmpty(DiplomaticPlay.AccessTargetBackers))]"
						}
					}
					
					#divider
					vertical_divider_full = {
						parentanchor = hcenter
					}
					
					### round progressbar + small phase images
					widget = {
						size = { 180 170 }
						parentanchor = hcenter

						animated_progresspie = {
							name = "progress"
							parentanchor = center
							texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
							size = { 246 246 }
							framesize = { 492 492 }
							frame = 2
							value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
							using = diplo_play_phases_scale
						}
						
						### phase images
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_opening_moves_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_opening_moves
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_diplomatic_maneuvers_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_diplomatic_maneuvers
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_countdown_to_war_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_countdown_to_war
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						
						### frame on top
						icon = {
							tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
							texture = "gfx/interface/diplomatic_plays/escalation_progress_frame.dds"
							size = { 254 254 }
							parentanchor = center
							using = diplo_play_phases_scale
						}
						
						### paused overlay
						icon = {
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							texture = "gfx/interface/diplomatic_plays/escalation_progress_paused.dds"
							size = { 246 246 }
							parentanchor = center
							using = diplo_play_phases_scale
							alpha = 0.3
							alwaystransparent = yes
						}
						
						### current phase glow highlight
						container = {
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							
							container = {
								position = { 79 0 }
								using = visibility_opening_moves
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_opening_moves.dds"
									size = { 160 130 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
							container = {
								position = { 0 55 }
								using = visibility_diplomatic_maneuvers
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_diplomatic_maneuvers.dds"
									size = { 300 193 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
							container = {
								position = { 6 0 }
								using = visibility_countdown_to_war
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_countdown_to_war.dds"
									size = { 160 130 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
						}
						
						### phase shift glows
						icon = {
							texture = "gfx/interface/diplomatic_plays/escalation_phase_shift_1.dds"
							size = { 65 65 }
							position = { 133 38 }
							using = visibility_diplomatic_maneuvers
							using = diplo_play_phases_scale
							alpha = 0
							
							state = {
								name = _show
								next = 2
								alpha = 0
							}
							state = {
								name = 2
								next = 3
								duration = 1
								alpha = 1
							}
							state = {
								name = 3
								duration = 1
								alpha = 0
							}
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/escalation_phase_shift_2.dds"
							size = { 65 65 }
							position = { 5 52 }
							using = visibility_countdown_to_war
							using = diplo_play_phases_scale
							alpha = 0
							
							state = {
								name = _show
								next = 2
								alpha = 0
							}
							state = {
								name = 2
								next = 3
								duration = 1
								alpha = 1
							}
							state = {
								name = 3
								duration = 1
								alpha = 0
							}
						}
					}
				}
			}
			
			### INVOLVED COUNTRIES TAB
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('involved_countries')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				spacing = 10
				
				### bgs for stance lanes
				background = {
					using = light_bg
					margin = { -110 0 }
					margin_bottom = 50
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
				background = {
					using = light_bg
					alpha = 0.5
					margin = { -220 0 }
					margin_bottom = 50
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}
				
				### phase images
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_opening_moves_big.dds"
					using = visibility_opening_moves	
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_diplomatic_maneuvers_big.dds"
					using = visibility_diplomatic_maneuvers
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					using = visibility_countdown_to_war
					using = phase_image_swap
					alpha = 0.5
				}
				
				### TOP INFO
				container = {
					parentanchor = hcenter
					minimumsize = { @panel_width -1 }
					
					### INITIATOR
					diplo_play_side_sway_tab = {}
					
					### INSTRUCTION (CANNOT SWAY AND INITIATOR OR TARGET)
					textbox = {
						visible = "[And(Or(LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')), GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), DiplomaticPlay.IsTargetOrInitiator(GetPlayer))]"
						position = { 0 20 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 300 -1 }
						maximumsize = { 300 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CANNOT_SWAY"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}

					### INSTRUCTION (CANNOT SWAY AND INVOLVED)
					textbox = {
						visible = "[And(Or(LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')), GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), And(Not(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))), Not(DiplomaticPlay.IsTargetOrInitiator(GetPlayer))))]"
						position = { 0 20 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 300 -1 }
						maximumsize = { 300 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SET_STANCE"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}

					### INSTRUCTION (INITIATOR OR TARGET CAN SWAY)
					textbox = {
						visible = "[And(And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), And(DiplomaticPlay.IsTargetOrInitiator(GetPlayer), Not(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer)))))]"
						position = { 0 20 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 300 -1 }
						maximumsize = { 300 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SWAY"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}
					
					### INSTRUCTION (INVOLVED COUNTRIES)
					textbox = {
						visible = "[Or(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer)), Not(DiplomaticPlay.IsInvolved(GetPlayer)))]"
						position = { 0 20 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 300 -1 }
						maximumsize = { 300 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SET_STANCE"
						default_format = "#title"
						align = hcenter|nobaseline
						using = fontsize_large
					}
					
					### TARGET
					diplo_play_side_sway_tab = {
						parentanchor = right
						blockoverride "datacontext" {
							datacontext = "[DiplomaticPlay.GetTarget]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_TARGET"
						}
						blockoverride "side_visible_property" {
							visible = "[DiplomaticPlay.IsTarget(GetPlayer.Self)]"
						}
						blockoverride "parentanchor" {
							parentanchor = right
						}
					}
				}
			
				### INVOLVED NATIONS
				flowcontainer = {
					direction = horizontal
					parentanchor = hcenter

					# initiator backer
					diplomatic_play_stance_lane = {
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessInitiatorBackersNoForcedSubjects]"
						}
						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
							mirror = horizontal
							tooltip = "DIPLO_PLAY_SUPPORTS_INITIATOR_TOOLTIP"
						}
						
						blockoverride "button_1_properties" {
							visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
							tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[Execute(DiplomaticPlay.SupportInitiator(GetPlayer))]"
						}
						blockoverride "button_2_properties" {
							visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
							tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportInitiator(GetPlayer))]"
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsInitiatorBacker( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )), Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
						}

						blockoverride "show_button" {
							visible = "[Not(Or( DiplomaticPlay.IsInitiatorBacker( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer ) ))]"
						}
						
						blockoverride "reverse_sway_button_properties" {
							enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
							onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetInitiator )]"
							tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
						}					
						
						blockoverride "show_reverse_sway_button" {
							visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
						}	
						
						blockoverride "show_reverse_sway_approval" {
							visible = "[DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetInitiator )]"
						}							

						blockoverride "show_reverse_sway_disapproval" {
							visible = "[Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetInitiator ))]"
						}							
					}

					vertical_divider_full = {}

					# initiator leaning
					diplomatic_play_stance_lane = {
						datacontext = "[DiplomaticPlay.GetInitiator]"
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessInitiatorLeaning]"
						}
						blockoverride "stance_icon_position" {
							position = { 20 0 } 
						}
						blockoverride "icon_size" {
							size = { 35 35 }
						}
						blockoverride "button_size" {
							size = { 50 50 }
						}
						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							mirror = horizontal
							tooltip = "DIPLO_PLAY_LEANING_INITIATOR_TOOLTIP"
						}
						blockoverride "button_1_properties" {
							visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanLeanTowardsInitiator(GetPlayer)]"
							tooltip = "LEAN_TOWARDS_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[Execute(DiplomaticPlay.LeanTowardsInitiator(GetPlayer))]"
						}
						blockoverride "button_2_properties" {
							visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanLeanTowardsInitiator(GetPlayer)]"
							tooltip = "LEAN_TOWARDS_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.LeanTowardsInitiator(GetPlayer))]"
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsInitiatorLeaning( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )), Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
						}

						blockoverride "show_button" {
							visible = "[Not(Or( DiplomaticPlay.IsInitiatorLeaning( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer ) ))]"
						}
					}
					
					vertical_divider_full = {}
					
					# on the fence
					diplomatic_play_stance_lane = {
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessOnTheFence]"
						}
						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
							tooltip = "DIPLO_PLAY_ON_THE_FENCE_TOOLTIP"
						}
						blockoverride "icon_size" {
							size = { 35 35 }
						}
						blockoverride "button_size" {
							size = { 50 50 }
						}
						blockoverride "button_1_properties" {
							visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanBeOnTheFence(GetPlayer)]"
							tooltip = "BE_ON_THE_FENCE_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[Execute(DiplomaticPlay.BeOnTheFence(GetPlayer))]"
						}
						blockoverride "button_2_properties" {
							visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanBeOnTheFence(GetPlayer)]"
							tooltip = "BE_ON_THE_FENCE_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.BeOnTheFence(GetPlayer))]"
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsOnTheFence( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )), Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
						}

						blockoverride "show_button" {
							visible = "[Not(Or( DiplomaticPlay.IsOnTheFence( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer ) ))]"
						}
					}
					
					vertical_divider_full = {}

					# target leaning
					diplomatic_play_stance_lane = {
						datacontext = "[DiplomaticPlay.GetTarget]"
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetLeaning]"
						}
						blockoverride "stance_icon_position" {
							position = { -20 0 } 
						}
						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							tooltip = "DIPLO_PLAY_LEANING_TARGET_TOOLTIP"
						}
						blockoverride "icon_size" {
							size = { 35 35 }
						}
						blockoverride "button_size" {
							size = { 50 50 }
						}
						blockoverride "button_1_properties" {
							visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanLeanTowardsTarget(GetPlayer)]"
							tooltip = "LEAN_TOWARDS_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[Execute(DiplomaticPlay.LeanTowardsTarget(GetPlayer))]"
						}
						blockoverride "button_2_properties" {
							visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanLeanTowardsTarget(GetPlayer)]"
							tooltip = "LEAN_TOWARDS_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.LeanTowardsTarget(GetPlayer))]"
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsTargetLeaning( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )), Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
						}

						blockoverride "show_button" {
							visible = "[Not(Or(DiplomaticPlay.IsTargetLeaning( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )))]"
						}
					}
					
					vertical_divider_full = {}
					
					# target backer
					diplomatic_play_stance_lane = {
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetBackersNoForcedSubjects]"
						}
						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
							tooltip = "DIPLO_PLAY_SUPPORTS_TARGET_TOOLTIP"
						}
						blockoverride "button_1_properties" {
							visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
							tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[Execute(DiplomaticPlay.SupportTarget(GetPlayer))]"
						}
						blockoverride "button_2_properties" {
							visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
							enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
							tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
							onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportTarget(GetPlayer))]"
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsTargetBacker( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )), Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
						}

						blockoverride "show_button" {
							visible = "[Not(Or(DiplomaticPlay.IsTargetBacker( GetPlayer ), DiplomaticPlay.IsTargetOrInitiator( GetPlayer )))]"
						}
						
						blockoverride "reverse_sway_button_properties" {
							enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
							onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetTarget )]"
							tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
						}	

						blockoverride "show_reverse_sway_button" {
							visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
						}
						
						blockoverride "show_reverse_sway_approval" {
							visible = "[DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetTarget )]"
						}	

						blockoverride "show_reverse_sway_disapproval" {
							visible = "[Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetTarget ))]"
						}							
					}
				}
			}
		}
		
		blockoverride "fixed_bottom" {
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				spacing = 8
				
				### INVOLVED NATIONS SUMMARY
				flowcontainer = {
					parentanchor = hcenter

					using = entry_bg_fancy
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSideBreakdown( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_FLOTILLAS_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSideBreakdown( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessInitiatorLeaning]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_LEANING_INITIATOR"
						}
					}

					vertical_divider = {}
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumOnTheFenceBattalionsBreakdown]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumOnTheFenceMobilizedBattalions]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumOnTheFenceTotalBattalions]"
						}

						blockoverride "involved_FLOTILLAS_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumOnTheFenceWarshipsBreakdown]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumOnTheFenceTotalWarships]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessOnTheFence]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_ON_THE_FENCE"
						}
					}
					
					vertical_divider = {}
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSideBreakdown( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_FLOTILLAS_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSideBreakdown( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetLeaning]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_LEANING_TARGET"
						}
					}
				}
				
				### ACTION BUTTONS
				flowcontainer = {
					visible = "[DiplomaticPlay.IsInvolved(GetPlayer)]"
					direction = vertical
					parentanchor = hcenter
					spacing = 3
					
					button = {
						using = default_button_action
						visible = "[And( DiplomaticPlay.IsInitiator(GetPlayer), Not( DiplomaticPlay.GetDiplomaticPlayType.HasEnableSwitchSides ))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_BACK_DOWN"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
						tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					}
					button = {
						using = default_button_action
						visible = "[And( DiplomaticPlay.IsTarget(GetPlayer), Not( DiplomaticPlay.GetDiplomaticPlayType.HasEnableSwitchSides ))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_GIVE_IN"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
						tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					}
					button = {
						using = default_button_action
						visible = "[And( DiplomaticPlay.IsTarget(GetPlayer), DiplomaticPlay.GetDiplomaticPlayType.HasEnableSwitchSides)]"
						size = { @panel_width 50 }
						text = "DIPLOMATIC_PLAY_SWITCH_COUNTRY"
						using = fontsize_large
						enabled = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
						tooltip = "DIPLOMATIC_PLAY_SWITCH_COUNTRY_TOOLTIP"
						onclick = "[Execute( DiplomaticPlay.SwitchSide( GetPlayer ))]"
					}
					button = {
						using = default_button_action
						visible = "[And( Not( DiplomaticPlay.IsInitiator(GetPlayer) ), Not( DiplomaticPlay.IsTarget(GetPlayer) ))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_DECLARE_NEUTRALITY"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanDeclareNeutrality(GetPlayer)]"
						tooltip = "DECLARE_NEUTRALITY_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.DeclareNeutrality(GetPlayer))]"
					}						
				}
			}
		}
	}
}

### CUSTOM POPUP TYPES
types custom_popup_types
{
	type diplo_play_sway_approval = widget {
		block "visible_approval_icon" {}
		block "widget_size" {
			size = { 28 28 }
		}
		parentanchor = vcenter
		
		icon = {
			block "icon_size" {
				size = { 100% 100% }
			}
			texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
		}
	}

	type diplo_play_sway_disapproval = widget {
		block "visible_disapproval_icon" {}
		size = { 28 28 }
		parentanchor = vcenter
		
		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
		}
	}
	
	type diplo_play_side_sway_tab = container {
		minimumsize = { @diplo_play_side_width -1 }
		
		flowcontainer = {
			block "parentanchor" {}
			direction = vertical
			spacing = 10
			margin = { 7 10 }
			block "datacontext" {
				datacontext = "[DiplomaticPlay.GetInitiator]"
			}
			
			flowcontainer = {
				block "parentanchor" {}
				spacing = 5
				
				textbox = {
					autoresize = yes
					using = fontsize_large
					block "header_text" {
						text = "DIPLO_PLAY_INITIATOR"
					}
					align = nobaseline
					default_format = "#title"
				}
				textbox = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					autoresize = yes
					using = fontsize_large
					text = "DIPLO_PLAY_YOU"
					align = nobaseline
				}
			}
			
			widget = {
				block "parentanchor" {}
				icon = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					parentanchor = center
					using = rotate_glow_animation_02
					size = { 220 220 }
				}
				large_flag = {
					resizeparent = yes
					mobilization_icon_flag = {}
				}
			}
		}
	}
	
	### involved countries summary gridbox
	type involved_countries_summary_gridbox = flowcontainer {
		margin = { 5 3 }
		margin_bottom = 8
		direction = vertical

		textbox = {
			minimumsize = { 170 -1 }
			maximumsize = { 170 -1 }
			multiline = yes
			autoresize = yes
			margin = { 5 5 }
			elide = right
			block "header_text" {}
			default_format = "#title"
			align = center|nobaseline
		}
		
		flowcontainer = {
			margin_bottom = 5
			direction = vertical
			parentanchor = hcenter	
			
			flowcontainer = {
				block "involved_battalions_tooltip" {}

				icon = {
					size = { 22 22 }
					texture = "gfx/interface/icons/generic_icons/battalions.dds"
					parentanchor = vcenter
				}
				textbox = {
					size = { 40 25 }
					block "involved_num_mobilized_battalions" {}
					align = right|nobaseline
				}
				textbox = {
					size = { 10 25 }
					raw_text = "/"
					align = center|nobaseline
				}
				textbox = {
					size = { 40 25 }
					block "involved_num_total_battalions" {}
					align = left|nobaseline
				}
			}
			
			flowcontainer = {
				block "involved_FLOTILLAS_tooltip" {}

				icon = {
					size = { 22 22 }
					texture = "gfx/interface/icons/generic_icons/flotillas.dds"
					parentanchor = vcenter
				}
				textbox = {
					size = { 40 25 }
					block "involved_num_total_warships" {}
					align = right|nobaseline
				}
			}
		}
		
		fixedgridbox = {
			addcolumn = 36
			addrow = 25
			datamodel_wrap = 4
			flipdirection = yes
			block "datamodel" {}
			parentanchor = hcenter

			item = {
				widget = {
					size = { 36 25 }
					
					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 65 65 }
					}
					tiny_flag = {
						mobilization_icon_flag = {}
						parentanchor = center
					}
				}
			}
		}
	}
	
	### DIPLO PLAY SIDE
	type diplo_play_side = flowcontainer {
		direction = vertical
		block "datacontext" {
			datacontext = "[DiplomaticPlay.GetInitiator]"
			datacontext = "[DiplomaticPlay.AccessInitiator]"
		}
		block "parentanchor" {}
		
		### TOTAL MOBILIZED
		flowcontainer = {
			margin = { 5 10 }
			direction = vertical
			block "parentanchor" {}
			minimumsize = { @diplo_play_side_width -1 }
			spacing = 2		
			
			textbox = {
				block "parentanchor" {}
				autoresize = yes
				text = "DIPLO_PLAY_TOTAL_MOBILIZED"
				align = nobaseline
				default_format = "#title"
			}
			
			flowcontainer = {
				spacing = 5

				block "parentanchor" {}

				icon = {
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/battalions.dds"
					parentanchor = vcenter
				}

				textbox = {
					autoresize = yes
					text = "[DiplomaticPlay.GetTotalNumMobilizedBattalionsForSide( Country.Self )|v]"
					tooltip = "DIPLO_PLAY_TOTAL_MOBILIZED_BATTALIONS_BREAKDOWN"
					align = nobaseline
					using = fontsize_xxl
					parentanchor = vcenter
				}
				
				widget = { size = { 10 0 }}

				icon = {
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/flotillas.dds"
					parentanchor = vcenter
				}

				textbox = {
					autoresize = yes
					text = "[DiplomaticPlay.GetTotalNumWarshipsForSide( Country.Self )|v]"
					tooltip = "DIPLO_PLAY_TOTAL_FLOTILLAS_BREAKDOWN"
					align = nobaseline
					using = fontsize_xxl
					parentanchor = vcenter
				}
			}
		}
		
		divider_clean = {}
		
		widget = { size = { 10 10 }}
		
		### HEADER
		flowcontainer = {
			margin = { 5 0 }
			block "parentanchor" {}
			spacing = 5
			
			textbox = {
				autoresize = yes
				using = fontsize_xxl
				block "header_text" {
					text = "DIPLO_PLAY_INITIATOR"
				}
				align = nobaseline
				default_format = "#title"
			}						
			textbox = {
				block "side_visible_property" {
					visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
				}
				autoresize = yes
				using = fontsize_large
				text = "DIPLO_PLAY_YOU"
				align = nobaseline
				parentanchor = vcenter
			}
		}

		### CONFIDENCE
		flowcontainer = {
			margin = { 5 0 }
			block "parentanchor" {}
			spacing = 5
			block "confidence_tooltip" {
				tooltip = "[DiplomaticPlay.GetConfidenceDesc(DiplomaticPlay.GetInitiator)]"
			}
			
			textbox = {
				autoresize = yes
				using = fontsize_large
				block "confidence_text" {
					text = "[DiplomaticPlay.GetConfidenceLabel(DiplomaticPlay.GetInitiator)]"
				}
				align = nobaseline
			}	
		}		
		
		### MANEUVERS
		flowcontainer = {
			margin = { 5 0 }
			block "parentanchor" {}
			spacing = 3
			block "maneuvers_tooltip" {
				tooltip = "DIPLO_PLAY_MANEUVERS_INITIATOR_TOOLTIP"
			}
			
			icon = {
				texture = "gfx/interface/icons/generic_icons/maneuvers.dds"
				size = { 28 28 }
				parentanchor = vcenter
			}
			textbox = {
				block "maneuvers_amount" {
					text = "DIPLO_PLAY_MANEUVERS_INITIATOR"
				}
				autoresize = yes
				align = nobaseline
				parentanchor = vcenter
				using = fontsize_large
			}
		}				
		
		### FLAG + TROOPS
		flowcontainer = {
			margin_top = 30
			margin_bottom = 10
			block "parentanchor" {}
			block "flowcontainers_direction" {}

			# flag
			container = {
				widget = {
					size = { 100% 100% }
					icon = {
						block "side_visible_property" {
							visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
						}
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 220 220 }
					}
				}
				flowcontainer = {
					margin = { 5 0 }
					large_flag = {
						mobilization_icon_flag = {}
					}
				}
			}
			
			widget = { size = { 5 5 }}

			# troops
			container = {
				icon = {
					block "side_visible_not_property" {
						visible = "[Not(DiplomaticPlay.IsInitiator(GetPlayer.Self))]"
					}
					using = entry_bg
					size = { 100% 100% }
				}
				
				button = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					using = default_button
					size = { 100% 100% }
					parentanchor = vcenter
					onclick = "[InformationPanelBar.OpenPanel('military')]"
				}
				
				flowcontainer = {
					direction = vertical
					margin = { 10 3 }
					
					flowcontainer = {
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							autoresize = yes
							minimumsize = { 40 30 }
							raw_text = "#v [Country.GetBattalions]#!"
							align = nobaseline
						}

						textbox = {
							autoresize = yes
							minimumsize = { 40 30 }
							raw_text = "(#v [Country.GetFullyMobilizedBattalionsPercentageRaw|0%]#!)"
							align = nobaseline
						}
					}
					
					flowcontainer = {
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}

						textbox = {
							autoresize = yes
							minimumsize = { 40 30 }
							raw_text = "#variable [Country.GetWarships]#!"
							align = nobaseline
						}
					}
				}
			}
		}
		
		divider_clean = {}
		
		### SUPPORTERS
		textbox = {
			block "parentanchor" {}
			block "datamodel_empty_supporters_not" {
				visible = "[Not(IsDataModelEmpty(DiplomaticPlay.AccessInitiatorBackers))]"
			}
			text = "DIPLO_PLAY_SUPPORTS"
			autoresize = yes
			align = nobaseline
			default_format = "#title"
			margin = { 5 0 }
			margin_top = 2
		}
		textbox = {
			block "datamodel_empty_supporters" {
				visible = "[IsDataModelEmpty(DiplomaticPlay.AccessInitiatorBackers)]"
			}
			block "parentanchor" {}
			text = "DIPLO_PLAY_NO_SUPPORTS"
			autoresize = yes
			align = nobaseline
			using = empty_state_text_properties
			margin = { 5 0 }
			margin_top = 2
			margin_bottom = 25
		}
		
		fixedgridbox = {
			addcolumn = 36
			addrow = 25
			datamodel_wrap = 7
			flipdirection = yes
			block "datamodel_supporters" {
				datamodel = "[DiplomaticPlay.AccessInitiatorBackers]"
			}
			block "parentanchor" {}

			item = {
				widget = {
					size = { 36 25 }
					
					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 65 65 }
					}
					tiny_flag = {
						mobilization_icon_flag = {}
						parentanchor = center
					}
				}
			}
		}
		
		widget = { size = { 5 5 }}
		
		divider_clean = {}
		
		### WARGOALS
		flowcontainer = {
			margin_top = 2
			margin_bottom = 10
			direction = vertical
			spacing = 5
			block "parentanchor" {}
			
			textbox = {
				block "parentanchor" {}
				text = "WARGOALS"
				autoresize = yes
				align = nobaseline
				margin = { 5 0 }
				default_format = "#title"
			}

			add_wargoal_button = {
				block "side_visible_property" {
					visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
				}
			}
			
			flowcontainer = {
				spacing = 2
				direction = vertical
				block "wargoal_datamodel" {
					datamodel = "[DiplomaticPlay.AccessInitiatorWarGoals]"
				}
				
				item = {
					flowcontainer = {
						margin = { 0 5 }
						margin_left = 10
						spacing = 3

						background = {
							using = entry_bg
							visible = "[WarGoal.IsPrimaryDemand]"
						}

						background = {
							using = entry_bg_simple
							visible = "[Not(WarGoal.IsPrimaryDemand)]"
							margin_left = 1
							margin_right = 1
						}


						minimumsize = { @diplo_play_side_width 40 }
						maximumsize = { @diplo_play_side_width -1 }
						tooltip = "WARGOAL_ACTIVE_TOOLTIP"
						onmousehierarchyenter = "[WarGoal.ShowHighlight]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
						alwaystransparent = no
						direction = vertical

						flowcontainer = {
							spacing = 5
							icon = {
								size = { 28 28 }
								texture = "[WarGoal.GetTexture]"
								parentanchor = vcenter
							}
									
							textbox = {
								autoresize = yes
								minimumsize = { 200 -1 }
								maximumsize = { 200 -1 }
								raw_text = "#BOLD [WarGoal.GetName]#!"
								align = nobaseline
								parentanchor = vcenter
								multiline = yes
								margin_left = 5
							}
						}
						
						flowcontainer = {
							spacing = 5
							tiny_flag = {
								parentanchor = vcenter
								datacontext = "[WarGoal.GetHolder]"
							}
							
							button = {
								using = default_button
								size = { 200 30 }
								text = "DIPLO_PLAY_MAKE_PRIMARY_DEMAND"
								tooltip = "DIPLO_PLAY_MAKE_PRIMARY_DEMAND_TOOLTIP"
								visible = "[Not(WarGoal.IsPrimaryDemand)]"
								enabled = "[IsValid(WarGoal.MakeWarGoalPrimaryDemand(GetPlayer.Self))]"
								onclick = "[Execute(WarGoal.MakeWarGoalPrimaryDemand(GetPlayer.Self))]"
								parentanchor = vcenter
							}
							
							textbox = {
								size = { 200 30 }
								text = "[concept_primary_demand]"
								visible = "[WarGoal.IsPrimaryDemand]"
								align = nobaseline
								parentanchor = vcenter
								margin_left = 5
							}								
						}
					}
				}
			}
		}
	}
	
	### flags
	type flag_with_str_left = widget {
		size = { 170 55 }
		
		flag = {
			position = { 15 0 }
			parentanchor = left|vcenter
			mobilization_icon_flag = {}
		}

		flowcontainer = {
			position = { -5 0 }
			parentanchor = right|vcenter
			direction = vertical

			textbox = {
				autoresize = yes
				raw_text = "#variable [Country.GetBattalions|0]#! @battalions!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = right|nobaseline
			}

			textbox = {
				autoresize = yes
				raw_text = "#variable [Country.GetWarships|0]#! @flotillas!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = right|nobaseline
			}
		}
	}

	type flag_with_str_right = widget {
		size = { 170 55 }
		
		flag = {
			position = { -15 0 }
			parentanchor = right|vcenter

			mobilization_icon_flag = {}
		}

		flowcontainer = {
			position = { 5 0 }
			parentanchor = left|vcenter
			direction = vertical

			textbox = {
				autoresize = yes
				raw_text = "#variable @battalions! [Country.GetBattalions|0]#!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = left|nobaseline
			}

			textbox = {
				autoresize = yes
				raw_text = "#variable @flotillas! [Country.GetWarships|0]#!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = left|nobaseline
			}
		}
	}

	type add_wargoal_button = button {
		using = default_button
		size = { @diplo_play_side_width 40 }
		text = "DIPLO_PLAY_ADD_WARGOAL"
		tooltip = "ADD_WARGOAL_TOOLTIP"
		enabled = "[DiplomaticPlay.CanAddWarGoal(GetPlayer.Self)]"
		onclick = "[InformationPanelBar.OpenAddWarGoalPanel( DiplomaticPlay.Self, GetPlayer.Self )]"
	}

	type diplomatic_play_stance_lane = flowcontainer {
		direction = vertical
		spacing = 2
		margin = { 2 0 }
		
		# header icon + move button
		flowcontainer = {
			direction = vertical
			margin_bottom = 5
			spacing = 2
			parentanchor = hcenter

			widget = {
				#TODO: also show this for the selected lane by an involved country (this is instead of disabling the button, we want to show the icon+highlight circle instead.)
				block "show_icon" {
					visible = no
				}
				size = { 105 65 }
				parentanchor = hcenter
				
				icon = {
					block "stance_icon_position" {}
					parentanchor = center
					block "icon_properties" {}
					block "icon_size" { 
						size = { 50 50 }
					}

					icon = {
						visible = "[And(DiplomaticPlay.IsInvolved( GetPlayer ), Not( DiplomaticPlay.IsTargetOrInitiator( GetPlayer )))]"

						size = { 100% 100% }
						using = highlighted_circle_selection_big
					}
				}
			}
			
			widget = {
				size = { 105 65 }
				visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
				
				block "show_button" {}
			
				button_icon_round_big_action = {
					parentanchor = center
					block "stance_icon_position" {}
					block "button_size" {
						size = { 50 50 }
					}
					using = diplomatic_play_support_button_sound
					block "button_1_properties" {}												

					blockoverride "icon" {
						block "icon_properties" {}
					}
					blockoverride "icon_size" {
						block "icon_size" {
							size = { 50 50 }
						}
					}												
				}
				
				button_icon_round_action = {
					parentanchor = center
					block "stance_icon_position" {}
					block "button_size" {
						size = { 50 50 }
					}
					using = diplomatic_play_support_button_sound
					block "button_2_properties" {}												

					blockoverride "icon" {
						block "icon_properties" {}
					}
					blockoverride "icon_size" {
						block "icon_size" {
							size = { 50 50 }
						}
					}												
				}							
			}
			
			widget = {
				size = { 110 65 }
				parentanchor = hcenter

				block "show_reverse_sway_button" {
					visible = no
				}
			
				button = {
					using = default_button_primary
					parentanchor = center
					using = diplomatic_play_support_button_sound

					block "button_size" {
						size = { 110 65 }
					}

					block "reverse_sway_button_properties" {}


					textbox = {
						parentanchor = center
						align = center|nobaseline
						multiline = yes
						autoresize = yes
						text = "OFFER_SUPPORT"
						max_width = 80
						elide = right
						fontsize_min = 14
					}
				}

				icon = {
					parentanchor = right
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"

					block "show_reverse_sway_approval" {
						visible = no
					}				
				
					block "icon_size" {
						size = { 20 20 }
					}

					block "reverse_sway_approval_tooltip" {}
				}

				icon = {
					parentanchor = right
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"

					block "show_reverse_sway_disapproval" {
						visible = no
					}					
				
					block "icon_size" {
						size = { 20 20 }
					}

					block "reverse_sway_disapproval_tooltip" {}
				}				
			}
		}
		
		# country list
		flowcontainer = {
			minimumsize = { 105 -1 }
			direction = vertical
			spacing = 5
			block "list_datamodel" {}
			
			item = {
				widget = {
					size = { 105 120 }

					widget = {
						visible = "[Not(Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self)))]"
						size = { 100% 100% }
						tooltip = "DIPLO_PLAY_COUNTRY_TOOLTIP"
					}
					
					background = {
						using = entry_bg_simple
					}
					
					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						using = highlighted_square_selection
					}
					
					button = {
						parentanchor = hcenter
						using = default_button
						size = { 100% 100% }
						visible = "[Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self))]"
						enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, Country.Self)]"
						onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, Country.Self )]"
						tooltip = "SWAY_COUNTRY_TOOLTIP"
					}
						
				
					# flag + icons
					widget = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self))]"
						position = { 0 20 }
						size = { 92 30 }
						parentanchor = hcenter
						
						tiny_flag_no_interact = {
							parentanchor = hcenter
							position = { 0 3 }
							mobilization_icon_flag = {}
						}
						
						icon = {
							visible = "[And(DiplomaticPlay.HasAcceptedSway(Country.Self),Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately))]"
							tooltip = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetName(GetPlayer.Self,Country.Self, DiplomaticPlay.Self)]"
							texture = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetTexture]"
							size = { 25 25 }
						}
						
						diplo_play_sway_approval = {
							blockoverride "visible_approval_icon" {
								visible = "[And(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self ), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
							}

							size = { 25 25 }
							parentanchor = right
							tooltip = "CAN_SWAY_COUNTRY_TOOLTIP"
						}

						diplo_play_sway_disapproval = {
							blockoverride "visible_disapproval_icon" {
								visible = "[And(Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self )), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
							}

							size = { 25 25 }
							parentanchor = right
							tooltip = "CANNOT_SWAY_COUNTRY_TOOLTIP"
						}
					}

					flowcontainer = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						direction = vertical
						parentanchor = hcenter
						position = { 0 2 }

						# flag + icons
						widget = {
							size = { 92 30 }
							parentanchor = hcenter
							
							icon = {
								parentanchor = center
								using = rotate_glow_animation_02
								size = { 85 85 }
							}

							tiny_flag_no_interact = {
								parentanchor = center
								position = { 0 3 }
								mobilization_icon_flag = {}
							}
							
							icon = {
								visible = "[And(DiplomaticPlay.HasAcceptedSway(Country.Self),Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately))]"
								tooltip = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetName(GetPlayer.Self,Country.Self, DiplomaticPlay.Self)]"
								texture = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetTexture]"
								size = { 25 25 }
							}
						}

						# you text
						textbox = {
							parentanchor = hcenter
							visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
							size = { 85 20 }
							elide = right
							text = "DIPLO_PLAY_YOU"
							align = center|nobaseline
						}
					}


					container = {
						position = { 0 -10 }
						parentanchor = bottom|hcenter
						
						button = {
							visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
							size = { 100% 100% }
							using = default_button
							onclick = "[InformationPanelBar.OpenPanel('military')]"
						}
						
						# troops
						flowcontainer = {
							direction = vertical

							# Battalions
							flowcontainer = {
								margin_left = 5

								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/generic_icons/battalions.dds"
									parentanchor = vcenter
								}

								textbox = {
									autoresize = yes
									minimumsize = { 35 30 }
									raw_text = "#v [Country.GetBattalions]#!"
									align = nobaseline
								}

								textbox = {
									autoresize = yes
									minimumsize = { 40 30 }
									raw_text = "(#v [Country.GetFullyMobilizedBattalionsPercentageRaw|0%]#!)"
									align = nobaseline
								}
							}

							# Flotillas
							flowcontainer = {
								margin_left = 5

								icon = {
									size = { 20 20 }
									texture = "gfx/interface/icons/generic_icons/flotillas.dds"
									parentanchor = vcenter
								}

								textbox = {
									autoresize = yes
									minimumsize = { 40 30 }
									raw_text = "#variable [Country.GetWarships]#!"
									align = nobaseline
								}
							}
						}
					}
				}
			}
		}
	}
}
