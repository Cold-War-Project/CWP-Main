types sway_country_types
{
	type sway_country_panel = default_block_window {
		name = "sway_country_panel"

		blockoverride "window_header_name" {
			text = "SWAY_COUNTRY_HEADER_SELECTOR"
		}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[SwayCountryPanel.DecreaseFilterLevel]"
				input_action = "back"
				visible = "[Not(SwayCountryPanel.IsShowingSwayOfferTypes)]"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				input_action = "back"
				visible = "[SwayCountryPanel.IsShowingSwayOfferTypes]"
			}
		}
		

		blockoverride "scrollarea_content" {	
			flowcontainer = {
				direction = vertical
				using = default_list_position
						
				dynamicgridbox = {
					name = "sway_offer_type_selection_list"
					visible = "[SwayCountryPanel.IsShowingSwayOfferTypes]"
					datamodel = "[SwayCountryPanel.AccessSwayOfferTypes]"
				
					item = {
						sway_offer_type_item = {}
					}	
				}
				
				dynamicgridbox = {
					name = "wargoal_type_selection_list"
					visible = "[SwayCountryPanel.IsShowingSwayOfferWarGoalTypes]"
					datamodel = "[SwayCountryPanel.AccessSwayOfferWarGoalTypes]"
				
					item = {
						sway_offer_wargoal_type_item = {}
					}
				}				
				
				dynamicgridbox = {
					name = "offer_wargoal_selection_list"
					visible = "[SwayCountryPanel.IsShowingSwayOffers]"
					datamodel = "[SwayCountryPanel.AccessShownSwayOffers]"
				
					item = {
						sway_offer_item = {}
					}
				}					
			}			
		}
	}

	type sway_offer_item = button {
		onclick = "[Execute( SwayCountryPanel.AccessDiplomaticPlay.CreateSway( GetPlayer.Self, SwayCountryPanel.GetCountry, SwayOffer.Self ))]"
		onclick = "[InformationPanelBar.ClosePanel]"		
		enabled = "[IsValid( SwayCountryPanel.AccessDiplomaticPlay.CreateSway( GetPlayer.Self, SwayCountryPanel.GetCountry, SwayOffer.Self ))]"			
		tooltip = "SWAY_OFFER_TOOLTIP"
		using = default_button_action

		container = {
			resizeparent = yes
			minimumsize = { 550 60 }

			icon = {
				position = { 10 0 }
				size = { 50 50 }
				texture = "[SwayOffer.GetTexture]"
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
			}

			icon = {
				visible = "[SwayOffer.WouldAcceptSway(SwayCountryPanel.GetDiplomaticPlay.Self, GetPlayer.Self, SwayCountryPanel.GetCountry)]"
				parentanchor = right|vcenter
				position = { -10 0 }
				size = { 40 40 }
				texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
			}					

			icon = {
				visible = "[Not(SwayOffer.WouldAcceptSway(SwayCountryPanel.GetDiplomaticPlay.Self, GetPlayer.Self, SwayCountryPanel.GetCountry))]"
				parentanchor = right|vcenter
				position = { -10 0 }
				size = { 40 40 }
				texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
			}

			flowcontainer = {
				direction = horizontal
				position = { -60 0 }
				parentanchor = right|vcenter
				spacing = 10
				
				flowcontainer = {
					parentanchor = vcenter
					spacing = 5		
						
					textbox = {				
						visible = "[And(SwayOffer.GetOfferedWarGoal.IsValid,GreaterThan_CFixedPoint(SwayOffer.GetOfferedWarGoal.GetInfamyAmount, '(CFixedPoint)0'))]"
						datacontext = "[SwayOffer.GetOfferedWarGoal]"
						text = "WARGOAL_INFAMY"
						autoresize = yes
						maximumsize = { 100 -1 }
						minimumsize = { 60 -1 }
						multiline = yes
						parentanchor = vcenter
						align = right|nobaseline
						using = fontsize_large
					}	

					textbox = {				
						visible = "[Not(SwayCountryPanel.IsReverseSway)]"
						raw_text = "@maneuvers! #v [SwayOffer.CalcManeuversCost(GetPlayer.Self, SwayCountryPanel.GetCountry, SwayCountryPanel.GetDiplomaticPlay)]#!"				
						autoresize = yes
						maximumsize = { 100 -1 }
						multiline = yes
						parentanchor = vcenter
						align = nobaseline
						using = fontsize_large
					}				
				}			

				small_flag_no_interact = {
					datacontext = "[SwayOffer.GetCountryForFlag(SwayCountryPanel.GetCountry)]"
					parentanchor = vcenter
				}
			}						

			textbox = {
				position = { 65 0 }
				using = fontsize_large
				parentanchor = vcenter
				text = "[SwayOffer.GetName(GetPlayer.Self, SwayCountryPanel.GetCountry, SwayCountryPanel.GetDiplomaticPlay)]"
				autoresize = yes
				maximumsize = { 245 -1 }
				elide = right
				fontsize_min = 12
				align = nobaseline
			}
		}
	}
	
	type sway_offer_type_item = button {
		onclick = "[SwayCountryPanel.SetSwayOfferType(SwayOfferType.Self)]"		
		using = default_button

		container = {
			datacontext = "[SwayCountryPanel.GetCountry]"
			datacontext = "[SwayCountryPanel.GetDiplomaticPlay]"
			datacontext = "[SwayOfferType]"

			resizeparent = yes
			minimumsize = { 550 60 }
			
			icon = {
				position = { 10 0 }
				size = { 50 50 }
				texture = "[SwayOfferType.GetTexture]"
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
			}	

			textbox = {
				position = { 70 0 }
				visible = "[Not(SwayCountryPanel.IsReverseSway)]"
				using = fontsize_large
				parentanchor = left|vcenter
				text = "SWAY_OFFER_TYPE"
				autoresize = yes
				maximumsize = { 440 -1 }
				multiline = yes
				align = nobaseline
			}
			
			textbox = {
				position = { 70 0 }
				visible = "[SwayCountryPanel.IsReverseSway]"
				using = fontsize_large
				parentanchor = left|vcenter
				text = "REVERSE_SWAY_OFFER_TYPE"
				autoresize = yes
				maximumsize = { 440 -1 }
				multiline = yes
				align = nobaseline
			}			
			
			diplo_play_sway_approval = {
				blockoverride "visible_approval_icon" {
					visible = "[And(DiplomaticPlay.HasAtLeastOneDesiredSwayOfType( GetPlayer.Self, Country.Self, SwayOfferType.Self ), SwayCountryPanel.IsReverseSway)]"
				}
				
				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CAN_REVERSE_SWAY_TOOLTIP"
			}

			diplo_play_sway_approval = {
				blockoverride "visible_approval_icon" {
					visible = "[And(DiplomaticPlay.HasAtLeastOneDesiredSwayOfType( GetPlayer.Self, Country.Self, SwayOfferType.Self ), Not(SwayCountryPanel.IsReverseSway))]"
				}
				
				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CAN_SWAY_TOOLTIP"
			}
			
			diplo_play_sway_disapproval = {
				blockoverride "visible_disapproval_icon" {
					visible = "[And(Not(DiplomaticPlay.HasAtLeastOneDesiredSwayOfType( GetPlayer.Self, Country.Self, SwayOfferType.Self )), SwayCountryPanel.IsReverseSway)]"
				}

				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CANNOT_REVERSE_SWAY_TOOLTIP"
			}

			diplo_play_sway_disapproval = {
				blockoverride "visible_disapproval_icon" {
					visible = "[And(Not(DiplomaticPlay.HasAtLeastOneDesiredSwayOfType( GetPlayer.Self, Country.Self, SwayOfferType.Self )), Not(SwayCountryPanel.IsReverseSway))]"
				}

				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CANNOT_SWAY_TOOLTIP"
			}
		}
	}	
	
	type sway_offer_wargoal_type_item = button {
		onclick = "[SwayCountryPanel.SetSwayOfferWarGoalType(WarGoalType.Self)]"
		tooltip = "[WarGoalType.GetDesc]"
		using = default_button

		container = {
			datacontext = "[SwayCountryPanel.GetCountry]"
			datacontext = "[SwayCountryPanel.GetDiplomaticPlay]"
			datacontext = "[WarGoalType]"

			resizeparent = yes
			minimumsize = { 550 60 }
			
			icon = {
				position = { 10 0 }
				size = { 50 50 }
				texture = "[WarGoalType.GetTexture]"
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
			}	

			textbox = {
				position = { 70 0 }
				visible = "[Not(SwayCountryPanel.IsReverseSway)]"
				using = fontsize_large
				parentanchor = left|vcenter
				text = "SWAY_OFFER_WARGOAL_TYPE"
				autoresize = yes
				maximumsize = { 440 -1 }
				multiline = yes
				align = nobaseline
			}
			
			textbox = {
				position = { 70 0 }
				visible = "[SwayCountryPanel.IsReverseSway]"					
				using = fontsize_large
				parentanchor = left|vcenter
				text = "REVERSE_SWAY_OFFER_WARGOAL_TYPE"
				autoresize = yes
				maximumsize = { 440 -1 }
				multiline = yes
				align = nobaseline
			}

			diplo_play_sway_approval = {
				blockoverride "visible_approval_icon" {
					visible = "[And(DiplomaticPlay.HasAtLeastOneDesiredSwayWargoalOfType( GetPlayer.Self, Country.Self, WarGoalType.Self ), SwayCountryPanel.IsReverseSway)]"
				}
				
				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CAN_REVERSE_SWAY_TOOLTIP_WARGOAL"
			}

			diplo_play_sway_approval = {
				blockoverride "visible_approval_icon" {
					visible = "[And(DiplomaticPlay.HasAtLeastOneDesiredSwayWargoalOfType( GetPlayer.Self, Country.Self, WarGoalType.Self ), Not(SwayCountryPanel.IsReverseSway))]"
				}
				
				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CAN_SWAY_TOOLTIP_WARGOAL"
			}
			
			diplo_play_sway_disapproval = {
				blockoverride "visible_disapproval_icon" {
					visible = "[And(Not(DiplomaticPlay.HasAtLeastOneDesiredSwayWargoalOfType( GetPlayer.Self, Country.Self, WarGoalType.Self )), SwayCountryPanel.IsReverseSway)]"
				}

				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CANNOT_REVERSE_SWAY_TOOLTIP_WARGOAL"
			}

			diplo_play_sway_disapproval = {
				blockoverride "visible_disapproval_icon" {
					visible = "[And(Not(DiplomaticPlay.HasAtLeastOneDesiredSwayWargoalOfType( GetPlayer.Self, Country.Self, WarGoalType.Self )), Not(SwayCountryPanel.IsReverseSway))]"
				}

				parentanchor = right|vcenter
				position = { -10 0 }
				tooltip = "SWAY_PANEL_CANNOT_SWAY_TOOLTIP_WARGOAL"
			}
		}
	}
}