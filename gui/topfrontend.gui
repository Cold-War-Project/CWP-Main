template frame_by_frame_envelope_duration
{
	duration = 0.03
}

template toplevel_envelope_animation
{
	state = {
		trigger_on_create = yes
		name = 1
		next = 2
		position_y = -20
		duration = 0
		start_sound = {
			soundeffect = "event:/SFX/UI/Alerts/letter_appear"
		}
	}
	state = {
		name = 2
		next = 3
		position_y = 5
		duration = 0.3
	}
	state = {
		name = 3
		next = 4
		position_y = -2
		duration = 0.1
	}
	state = {
		name = 4
		position_y = 0
		duration = 0.1
	}
}

types topfrontend_types {
	type topfrontend = widget {
		name = "topfrontend"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding 

		### SITUATIONS + ALERTS
		hbox = {
			using = hud_visibility
			using = default_fade_in_out
			spacing = 5
			margin_left = 15
			filter_mouse = right

			### CURRENT SITUATION
			widget = {
				size = { 65 1 }
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
				visible = "[Not( IsDataModelEmpty(TopFrontend.AccessImportantActions) )]"
					
				widget = {
					size = { 65 65 }
				
					current_situation_button = {
						visible = "[EqualTo_int32(TopFrontend.GetNumUnreadImportantActions,'(int32)0')]"
						tooltip = "CURRENT_SITUATION_TOOLTIP"
						input_action = "current_situation"				
					}

					current_situation_button = {
						texture = "gfx/interface/current_situations/current_situation_button_unread.dds"
						visible = "[GreaterThan_int32(TopFrontend.GetNumUnreadImportantActions,'(int32)0')]"
						tooltip = "CURRENT_SITUATION_TOOLTIP"
						input_action = "current_situation"				
					}

					### frame
					icon = {
						position = { 0 0 }
						size = { 100% 100% }
						alwaystransparent = yes
						parentanchor = hcenter
						texture = "gfx/interface/current_situations/current_situation_button_frame.dds"
					}

					### CURRENT SITUATION VFX - IDLE

					vfx = {
						blockoverride "size" {
							size = { 400% 400% }
						}
						blockoverride "parent_anchor" {
							parentanchor = hcenter|vcenter
						}
						blockoverride "entity_instance" {
							entity_instance = vfx_entity_ui_situations
						}			
						blockoverride "visible" {
							visible = "[GreaterThan_int32(TopFrontend.GetNumUnreadImportantActions,'(int32)0')]"
						}
					}

					### CURRENT SITUATION VFX - NEW
					vfx = {
						blockoverride "size" {
							size = { 600% 600% }
						}
						blockoverride "parent_anchor" {
							parentanchor = hcenter|vcenter
						}
						blockoverride "entity_instance" {
							entity_instance = vfx_entity_ui_situations_once_for_new
						}			
					}

					### unread icon
					icon = {
						visible = "[GreaterThan_int32(TopFrontend.GetNumUnreadImportantActions,'(int32)0')]"
						parentanchor = right|vcenter
						texture = "gfx/interface/current_situations/icon_situation_unread.dds"
						tooltip = "UNREAD_MESSAGES"
						size = { 25 25 }
						framesize = { 150 150 }
						position = { 0 20 }
					}
				}

				widget = {
					size = { 65 1 }
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
				}

			}

			### ALERTS
			overlappingitembox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding 
				datamodel = "[TopFrontend.AccessAlerts]"
				visible = "[Not(IsDataModelEmpty(TopFrontend.AccessAlerts))]"

				item = {
					widget = {
						size = { 70 70 }
						
						widget = {
							size = { 100% 100% }
							
							state = {
								trigger_when = "[Alert.IsAdding]"
								name = Add0
								next = Add1
								position_y = -40
								duration = 0
								alpha = 0
								start_sound = {
									soundeffect = "event:/SFX/UI/Alerts/warning_fist_appear"
								}
							}
							state = {
								name = Add1
								next = Add2
								position_y = 5
								duration = 0.25
								alpha = 1
								using = Animation_Curve_Default
							}
							state = {
								name = Add2
								next = Add3
								position_y = -2
								duration = 0.08
								using = Animation_Curve_Default
							}
							state = {
								name = Add3
								position_y = 0
								duration = 0.08
								using = Animation_Curve_Default
								on_finish = "[Alert.AddingFinished]"
							}

							# .this state defines the "normal" state of the widget
							# useful .if it should be different than the .default/creation state of the widget
							state = {
								name = Idle
								trigger_when = "[Alert.IsAdded]"
								duration = 0
								position = { 0 0 }
							}

							state = {
								trigger_when = "[Alert.IsRemoving]"
								name = Remove0
								next = Remove1
								position = { 0 0 }
								duration = 0
							}
							state = {
								name = Remove1
								position_y = -40
								duration = 0.3
								alpha = 0
								on_finish = "[Alert.RemovingFinished]"
							}	
							
							### ALERT BUTTON
							button = {
								size = { 100% 100% }
								texture = "gfx/interface/icons/alert_icons/alert_button.dds"
								effectname = "NoHighlight"
								using = current_situation_button_sound
								onclick = "[PopupManager.OpenAlert(Alert.AccessSelf)]"
								tooltip = "[Alert.GetToolTip]"
								using = tooltip_below
								
								### ALERT VFX - NEW
								vfx = {
									blockoverride "size" {
										size = { 400% 400% }
									}
									blockoverride "parent_anchor" {
										parentanchor = hcenter|vcenter
									}
									blockoverride "entity_instance" {
										entity_instance = vfx_entity_ui_alert_once_for_new
									}			
								}

								### alert animation
								modify_texture = {
									name = "glow_loop"
									texture = "gfx/interface/icons/alert_icons/alert_animation.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = overlay
									rotate_uv = 0
									alpha = 0.8
								}
								
								state = {
									trigger_on_create = yes
									name = glow_loop1
									next = glow_loop2
									duration = 1.5
								
									modify_texture = {
										name = "glow_loop"
										rotate_uv = -22.5
									}
								}
								state = {
									name = glow_loop2
									next = glow_loop1
									duration = 0
								
									modify_texture = {
										name = "glow_loop"
										rotate_uv = 0
									}
								}
								
								### button states
								modify_texture = {
									name = "mouse_enter"
									texture = "gfx/interface/buttons/button_icons/icon_button_mouse_enter.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = overlay
									alpha = 0
									rotate_uv = 0
								}
								modify_texture = {
									name = "mouse_press"
									texture = "gfx/interface/buttons/default_button_mousepress.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = overlay
									alpha = 0
								}
								
								### show
								state = {
									name = _show
									on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('show')]"
									position = { 0 0 }
									using = button_animation_duration
									
									modify_texture = {
										name = mouse_press
										alpha = 0
									}
									modify_texture = {
										name = mouse_enter
										alpha = 0
										rotate_uv = 0
									}
								}

								### enter
								state = {
									name = _mouse_enter
									on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('enter')]"
									position = { 0 0 }
									using = button_animation_duration
									
									modify_texture = {
										name = mouse_press
										alpha = 0
									}
									modify_texture = {
										name = mouse_enter
										alpha = 1
										rotate_uv = 180
									}
								}
								
								### leave
								state = {
									name = _mouse_leave
									on_start = "[PdxGuiWidget.AccessChild('icon').InterruptThenTriggerAnimation('enter','leave')]"
									position = { 0 0 }
									using = button_animation_duration
									
									modify_texture = {
										name = mouse_press
										alpha = 0
									}
									modify_texture = {
										name = mouse_enter
										alpha = 0
										rotate_uv = 0
									}
								}

								### press
								state = {
									name = _mouse_press
									on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('press')]"
									position = { 1 2 }
									using = button_animation_duration
									
									modify_texture = {
										name = mouse_press
										alpha = 1
									}
									modify_texture = {
										name = mouse_enter
										alpha = 0
										rotate_uv = 0
									}
								}

								### release
								state = {
									name = _mouse_release
									on_start = "[PdxGuiWidget.AccessChild('icon').TriggerAnimation('release')]"
									position = { 0 0 }
									using = button_animation_duration
									
									modify_texture = {
										name = mouse_press
										alpha = 0
									}
									modify_texture = {
										name = mouse_enter
										alpha = 0
										rotate_uv = 0
									}
								}
								
								### ALERT ICON INSIDE THE BUTTON
								icon = {
									name = icon
									parentanchor = center
									size = { 90% 90% }
									texture = "[Alert.GetTexture]"
									
									### button states
									modify_texture = {
										name = "mouse_enter"
										texture = "gfx/interface/buttons/button_icons/icon_button_mouse_enter.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = overlay
										alpha = 0
										rotate_uv = 0
									}
									modify_texture = {
										name = "mouse_press"
										texture = "gfx/interface/buttons/default_button_mousepress.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = overlay
										alpha = 0
									}
									
									scale = 1
									
									### show
									state = {
										name = show
										position = { 0 0 }
										using = button_animation_duration
										scale = 1
										
										modify_texture = {
											name = mouse_press
											alpha = 0
										}
										modify_texture = {
											name = mouse_enter
											alpha = 0
											rotate_uv = 0
										}
									}

									### enter
									state = {
										name = enter
										position = { 0 0 }
										using = button_animation_duration
										scale = 1.1
										
										modify_texture = {
											name = mouse_press
											alpha = 0
										}
										modify_texture = {
											name = mouse_enter
											alpha = 1
											rotate_uv = 180
										}
									}
									
									### leave
									state = {
										name = leave
										position = { 0 0 }
										using = button_animation_duration
										scale = 1
										
										modify_texture = {
											name = mouse_press
											alpha = 0
										}
										modify_texture = {
											name = mouse_enter
											alpha = 0
											rotate_uv = 0
										}
									}

									### press
									state = {
										name = press
										position = { 1 2 }
										using = button_animation_duration
										scale = 1.1
										
										modify_texture = {
											name = mouse_press
											alpha = 1
										}
										modify_texture = {
											name = mouse_enter
											alpha = 0
											rotate_uv = 0
										}
									}

									### release
									state = {
										name = release
										position = { 0 0 }
										using = button_animation_duration
										scale = 1.1
										
										modify_texture = {
											name = mouse_press
											alpha = 0
										}
										modify_texture = {
											name = mouse_enter
											alpha = 0
											rotate_uv = 0
										}
									}
								}

								### ALERT VFX - IDLE
								vfx = {
									blockoverride "size" {
										size = { 400% 400% }
									}
									blockoverride "parent_anchor" {
										parentanchor = hcenter|vcenter
									}
									blockoverride "entity_instance" {
										entity_instance = vfx_entity_ui_alert_above_icon
									}			
								}
							}
						}
					}
				}
			}

			### DIPLO MESSAGES
			hbox = {
				layoutpolicy_horizontal = growing
				layoutpolicy_vertical = expanding
				maximumsize = { -1 113 }
				datamodel = "[TopFrontend.AccessProposals]"
				visible = "[Not(IsDataModelEmpty(TopFrontend.AccessProposals))]"
				
				item = {
					container = {
						button = {
							size = { 90 83 }
							tooltip = "[Proposal.GetToolTip]"
							
							onclick = "[PopupManager.OpenProposal(Proposal.AccessSelf)]"
							onrightclick = "[PopupManager.CloseProposal( Proposal.AccessSelf )]"
							
							onmousehierarchyenter = "[SetCanOpenRightClickContextMenu( '(bool)no' )]"
							onmousehierarchyleave = "[SetCanOpenRightClickContextMenu( '(bool)yes' )]"
							
							using = current_situation_button_sound
							
							#TODO PSGE-5001
							using = toplevel_envelope_animation
							
							### SECOND PART OF ENVELOPE OPENING behind letter
							button = {
								position = { 0 -17 }
								size = { 85 45 }
								framesize = { 170 90 }
								alpha = 0
								texture = "gfx/interface/icons/proposal_icons/envelope_anim2.dds"
								alwaystransparent = yes
							
								state = {
									trigger_on_create = yes
									name = 0
									frame = 1
									next = 1
									alpha = 0
									duration = 0.18 #need to add up with frame_by_frame_envelope_duration and number of states.
								}
								state = {
									name = 1
									frame = 1
									next = 2
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 2
									frame = 2
									next = 3
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 3
									frame = 3
									next = 4
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 4
									frame = 4
									next = 5
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 5
									frame = 5
									next = 6
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 6
									frame = 6
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
							}
							
							### ENVELOPE BACKGROUND behind letter
							button = {
								position = { 0 20 }
								size = { 86 58 }
								texture = "gfx/interface/icons/proposal_icons/envelope_bg.dds"
								alwaystransparent = yes
							}
							
							### LETTER with icon on it
							button = {
								position = { 0 21 }
								size = { 80 54 }
								texture = "gfx/interface/icons/proposal_icons/letter.dds"
								alwaystransparent = yes
								
								state = {
									trigger_on_create = yes
									name = 1
									next = 2
									duration = 0.25
									position = { 0 21 }
								}
								state = {
									name = 2
									using = Animation_Curve_Default
									duration = 0.5
									position = { 4 0 }
								}						
								
								### icon
								button = {
									size = { 50 50 }
									parentanchor = center
									texture = "[Proposal.GetTexture]"
									alwaystransparent = yes
								}					
							}
							
							### ENVELOPE FOREGROUND above letter
							button = {
								position = { 0 20 }
								size = { 86 58 }
								texture = "gfx/interface/icons/proposal_icons/envelope_fg.dds"
								alwaystransparent = yes
							}
							
							### FIRST PART OF ENVELOPE OPENING
							button = {
								position = { 0 18 }
								size = { 85 45 }
								framesize = { 170 90 }
								texture = "gfx/interface/icons/proposal_icons/envelope_anim.dds"
								alwaystransparent = yes
							
								state = {
									trigger_on_create = yes
									name = 1
									frame = 1
									next = 2
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 2
									frame = 2
									next = 3
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 3
									frame = 3
									next = 4
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 4
									frame = 4
									next = 5
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 5
									frame = 5
									next = 6
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 6
									frame = 6
									next = 7
									alpha = 1
									using = frame_by_frame_envelope_duration
								}
								state = {
									name = 7
									frame = 6
									alpha = 0
									using = frame_by_frame_envelope_duration
								}
							}
							
							### FLAG
							tiny_flag = {
								datacontext = "[Proposal.GetActor]"
								parentanchor = left|bottom
								position = { 0 -5 }
							}
							
							### TIMER
							container = {
								parentanchor = right|bottom
								alwaystransparent = yes
								
								icon = {
									texture = "gfx/interface/icons/proposal_icons/timer_bg.dds"
									size = { 26 26 }
								}
								
								### TIMER PROGRESS
								piechart = {
									parentanchor = center
									size = { 20 20 }
									texture = "gfx/interface/icons/proposal_icons/timer.dds"
									datamodel = "[Proposal.AccessTimeoutTimer.GetSlicesInverted]"

									item = {
										pieslice = {
											value = "[PieTimerSlice.GetValue]"
											color = "[PieTimerSlice.GetColor]"
										}
									}
								}
							}
						}
					}
				}
			}
		
			widget = { size = { 10 10 }}
		}
	}

	type current_situation_button = button {
		size = { 100% 100% }
		gfxtype = buttongfx
		parentanchor = hcenter
		texture = "gfx/interface/current_situations/current_situation_button.dds"
		onclick = "[RightClickMenuManager.ToggleImportantActionsList(TopFrontend.AccessSelf, PdxGuiWidget.AccessSelf)]"
		using = current_situation_button_sound

		state = {
			name = _mouse_enter
			on_start = "[PdxGuiWidget.FindChild('text').TriggerAnimation('mouse_enter')]"
			on_start = "[PdxGuiWidget.FindChild('text_mouse_over').TriggerAnimation('mouse_enter')]"
		}		
		state = {
			name = _mouse_leave
			on_start = "[PdxGuiWidget.FindChild('text').InterruptThenTriggerAnimation('mouse_enter','mouse_leave')]"
			on_start = "[PdxGuiWidget.FindChild('text_mouse_over').TriggerAnimation('mouse_leave')]"
		}		
		state = {
			name = _mouse_press
			on_start = "[PdxGuiWidget.FindChild('text').TriggerAnimation('mouse_press')]"
			on_start = "[PdxGuiWidget.FindChild('text_mouse_over').TriggerAnimation('mouse_press')]"
		}		
		state = {
			name = _mouse_release
			on_start = "[PdxGuiWidget.FindChild('text').TriggerAnimation('mouse_release')]"
			on_start = "[PdxGuiWidget.FindChild('text_mouse_over').TriggerAnimation('mouse_release')]"
		}
		
		# text 
		textbox = {
			name = "text"
			raw_text = "#v [TopFrontend.GetTotalNumOfImportantActionGroups]#!"
			size = { 100% 100% }
			using = fontsize_large
			align = center|nobaseline
			parentanchor = hcenter
			position = { 0 0 }
			alpha = 0.8
			
			state = {
				name = mouse_enter
				using = button_animation_duration
				alpha = 0
			}
			state = {
				name = mouse_leave
				using = button_animation_duration
				alpha = 0.8
			}
			state = {
				name = mouse_press
				using = button_animation_duration
				alpha = 0
			}
			state = {
				name = mouse_release
				using = button_animation_duration
				alpha = 1
			}
		}
		
		# text mouse over
		textbox = {
			name = "text_mouse_over"
			raw_text = "#v [TopFrontend.GetTotalNumOfImportantActionGroups]#!"
			size = { 100% 100% }
			using = fontsize_large
			align = center|nobaseline
			parentanchor = hcenter
			position = { 0 0 }
			alpha = 0
			
			state = {
				name = mouse_enter
				using = button_animation_duration
				alpha = 1
				position_y = 0
			}
			state = {
				name = mouse_leave
				using = button_animation_duration
				alpha = 0
				position_y = 0
			}
			state = {
				name = mouse_press
				using = button_animation_duration
				alpha = 0.8
				position_y = 1
			}
			state = {
				name = mouse_release
				using = button_animation_duration
				alpha = 0
				position_y = 0
			}
		}
	}
}
