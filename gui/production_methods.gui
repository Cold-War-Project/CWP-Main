# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types production_methods
{
	type production_methods_entries_container = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		using = default_content_fade
		spacing = 10

		flowcontainer = {
			block "production_entries" {
			}
			direction = vertical
			parentanchor = hcenter
			spacing = 10

			item = {
				buildings_production_method_item = {}
			}
		}

#		block "potential_entries_header" {
#			default_header = {
#				parentanchor = hcenter
#			}
#		}

		block "potential_entries_entire_widget" {
			flowcontainer = {
				margin = { 7 -5 }

				dynamicgridbox = {
					block "potential_entries" {
					}
					flipdirection = yes
					datamodel_wrap = 5

					item = {
						container = {
							producing_building_button = {}
						}
					}
				}
			}
		}
	}

	type production_methods_panel = default_block_window {
		name = "production_methods_panel"

		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/buildings"
				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/buildings_stop"
				}
			}
		}

		blockoverride "window_header_name" {
			text = "PRODUCTION_METHODS_HEADER"
		}


		blockoverride "fixed_top" {

			top_illu = {
				datacontext = "[AccessPlayer]"

				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_market.dds"
				}

				flowcontainer = {
					direction = vertical
					parentanchor = center
					spacing = 5

					flowcontainer = {
						parentanchor = hcenter
						spacing = 10
						tooltip = "CONSTRUCTION_SPEED_BASE_TOOLTIP"

						icon = {
							parentanchor = vcenter
							size = { 35 35 }
							texture = "gfx/interface/icons/state_status_icons/has_construction.dds"
							visible = "[Not(Country.IsConstructionPaused)]"
						}

						icon = {
							parentanchor = vcenter
							size = { 35 35 }
							texture = "gfx/interface/icons/state_status_icons/has_construction_paused.dds"
							visible = "[Country.IsConstructionPaused]"
						}

						textbox = {
							parentanchor = vcenter
							using = fontsize_mega
							text = "CONSTRUCTION_VALUE"
							autoresize = yes
							align = center|nobaseline
						}
					}
					textbox = {
						parentanchor = hcenter
						using = fontsize_large
						autoresize = yes
						text = "CURRENT_INVESTMENT_POOL"
						using = investment_pool_tooltip_with_graph
						align = center|nobaseline
					}
				}
			}

			tab_buttons = {
				blockoverride "first_button" {
					text = "URBAN_BUILDINGS"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "URBAN_BUILDINGS"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('urban')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('urban')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('urban') )]"
				}
				blockoverride "first_button_selected" {
					text = "URBAN_BUILDINGS"
				}

				blockoverride "second_button" {
					text = "INDUSTRIAL_BUILDINGS"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "INDUSTRIAL_BUILDINGS"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('industrial')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('industrial')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('industrial') )]"
				}
				blockoverride "second_button_selected" {
					text = "INDUSTRIAL_BUILDINGS"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_industrial_tab"
				}

				blockoverride "third_button" {
					text = "RESOURCE_BUILDINGS"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "RESOURCE_BUILDINGS"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('resource')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('resource')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('resource') )]"
				}
				blockoverride "third_button_selected" {
					text = "RESOURCE_BUILDINGS"
				}
				blockoverride "third_button_name" {
					name = "tutorial_highlight_resource_tab"
				}

				blockoverride "fourth_button" {
					text = "RURAL_BUILDINGS"
				}
				blockoverride "fourth_button_tooltip" {
					tooltip = "RURAL_BUILDINGS"
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanel.SelectTab('rural')]"
				}
				blockoverride "fourth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('rural')]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('rural') )]"
				}
				blockoverride "fourth_button_selected" {
					text = "RURAL_BUILDINGS"
				}
				blockoverride "fourth_button_name" {
					name = "tutorial_highlight_rural_tab"
				}

				blockoverride "fifth_button" {
					text = "DEVELOPMENT_BUILDINGS"
				}
				blockoverride "fifth_button_tooltip" {
					tooltip = "DEVELOPMENT_BUILDINGS"
				}
				blockoverride "fifth_button_click" {
					onclick = "[InformationPanel.SelectTab('development')]"
				}
				blockoverride "fifth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('development')]"
				}
				blockoverride "fifth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('development') )]"
				}
				blockoverride "fifth_button_selected" {
					text = "DEVELOPMENT_BUILDINGS"
				}
				blockoverride "fifth_button_name" {
					name = "tutorial_highlight_development_tab"
				}

				blockoverride "sixth_button" {
					text = "CONSTRUCTION"
				}
				blockoverride "sixth_button_tooltip" {
					tooltip = "CONSTRUCTION"
				}
				blockoverride "sixth_button_click" {
					onclick = "[InformationPanel.SelectTab('construction_queues')]"
				}
				blockoverride "sixth_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('construction_queues')]"
				}
				blockoverride "sixth_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('construction_queues') )]"
				}
				blockoverride "sixth_button_selected" {
					text = "CONSTRUCTION"
				}
			}
		}

		blockoverride "scrollarea_content" {

			flowcontainer = {
				direction = vertical

				flowcontainer = {
					using = default_list_position
					direction = vertical
					spacing = 5
					margin_top = -20

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('urban')]"
						flowcontainer = {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesUrban]"
							direction = vertical
							parentanchor = hcenter
							spacing = 10

							item = {
								buildings_production_method_item = {
									blockoverride "visible" {
										visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Not(Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_chemical_plants')), Or(EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant'), EqualTo_string(BuildingType.GetKey, 'building_steelworks')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery'), EqualTo_string(BuildingType.GetKey, 'building_motor_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_shipyards'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'), EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries')), Or(EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries'), EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry'), EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_distilleries')), EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories'))))))]"
									}
								}
							}
						}
						flowcontainer = {
							direction = vertical
							default_header = {
								parentanchor = hcenter
								blockoverride "text" {
									text = "AVAILABLE_URBAN_BUILDINGS"
								}
							}
							margin = { 7 10 }

							dynamicgridbox = {
								datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesUrban]"
								flipdirection = yes
								datamodel_wrap = 5
								ignoreinvisible = yes
								item = {
									container = {
										producing_building_button = {
											visible = "[Not(Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_chemical_plants')), Or(EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant'), EqualTo_string(BuildingType.GetKey, 'building_steelworks')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery'), EqualTo_string(BuildingType.GetKey, 'building_motor_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_shipyards'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'), EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries')), Or(EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries'), EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry'), EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_distilleries')), EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories')))))]"
										}
									}
								}
							}
						}

					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('industrial')]"
						flowcontainer = {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesUrban]"
							direction = vertical
							parentanchor = hcenter
							spacing = 10

							item = {
								buildings_production_method_item = {
									blockoverride "visible" {
										visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_chemical_plants')), Or(EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant'), EqualTo_string(BuildingType.GetKey, 'building_steelworks')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery'), EqualTo_string(BuildingType.GetKey, 'building_motor_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_shipyards'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'), EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries')), Or(EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries'), EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry'), EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_distilleries')), EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories')))))]"
									}
								}
							}
						}
						flowcontainer = {
							direction = vertical
							default_header = {
								parentanchor = hcenter
								blockoverride "text" {
									text = "AVAILABLE_INDUSTRIAL_BUILDINGS"
								}
							}
							margin = { 7 10 }

							dynamicgridbox = {
								datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesUrban]"
								flipdirection = yes
								datamodel_wrap = 5

								item = {
									container = {
										producing_building_button = {
											visible = "[Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_chemical_plants')), Or(EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant'), EqualTo_string(BuildingType.GetKey, 'building_steelworks')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery'), EqualTo_string(BuildingType.GetKey, 'building_motor_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_shipyards'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'), EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries')), Or(EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries'), EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry'), EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_distilleries')), EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories'))))]"
										}
									}
								}
							}
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('resource')]"
						flowcontainer = {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesRural]"
							direction = vertical
							parentanchor = hcenter
							spacing = 10

							item = {
								buildings_production_method_item = {
									blockoverride "visible" {
										visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_coal_mine'), EqualTo_string(BuildingType.GetKey, 'building_iron_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_copper_mine'), EqualTo_string(BuildingType.GetKey, 'building_rare_earth_elements_mine'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_bauxite_mine'), EqualTo_string(BuildingType.GetKey, 'building_uranium_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_lead_mine'), EqualTo_string(BuildingType.GetKey, 'building_phosphorus_mine')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_gold_mine'), EqualTo_string(BuildingType.GetKey, 'building_logging_camp')), Or(EqualTo_string(BuildingType.GetKey, 'building_fishing_wharf'), EqualTo_string(BuildingType.GetKey, 'building_oil_rig'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_un_conventional_oil_well'), EqualTo_string(BuildingType.GetKey, 'building_offshore_oil_well')), Or(EqualTo_string(BuildingType.GetKey, 'building_natural_gas_well'), EqualTo_string(BuildingType.GetKey, 'building_un_conventional_gas_well'))))), EqualTo_string(BuildingType.GetKey, 'building_offshore_gas_well')))]"
									}
								}
							}
						}
						flowcontainer = {
							direction = vertical
							default_header = {
								parentanchor = hcenter
								blockoverride "text" {
									text = "AVAILABLE_RESOURCE_BUILDINGS"
								}
							}
							margin = { 7 10 }

							dynamicgridbox = {
								datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesRural]"
								flipdirection = yes
								datamodel_wrap = 5

								item = {
									container = {
										producing_building_button = {
											visible = "[Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_coal_mine'), EqualTo_string(BuildingType.GetKey, 'building_iron_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_copper_mine'), EqualTo_string(BuildingType.GetKey, 'building_rare_earth_elements_mine'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_bauxite_mine'), EqualTo_string(BuildingType.GetKey, 'building_uranium_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_lead_mine'), EqualTo_string(BuildingType.GetKey, 'building_phosphorus_mine')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_gold_mine'), EqualTo_string(BuildingType.GetKey, 'building_logging_camp')), Or(EqualTo_string(BuildingType.GetKey, 'building_fishing_wharf'), EqualTo_string(BuildingType.GetKey, 'building_oil_rig'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_un_conventional_oil_well'), EqualTo_string(BuildingType.GetKey, 'building_offshore_oil_well')), Or(EqualTo_string(BuildingType.GetKey, 'building_natural_gas_well'), EqualTo_string(BuildingType.GetKey, 'building_un_conventional_gas_well'))))), EqualTo_string(BuildingType.GetKey, 'building_offshore_gas_well'))]"

											#"[Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_chemical_plants'),	EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_steelworks'),EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery')), Or(EqualTo_string(BuildingType.GetKey, 'building_motor_industry'), EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_shipyards'), EqualTo_string(BuildingType.GetKey, 'building_carrier_drydocks')),	Or(EqualTo_string(BuildingType.GetKey, 'building_surface_ship_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_submarine_drydocks'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries'), EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'))))))]"
										}
									}
								}
							}
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('rural')]"
						flowcontainer = {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesRural]"
							direction = vertical
							parentanchor = hcenter
							spacing = 10

							item = {
								buildings_production_method_item = {
									blockoverride "visible" {
										visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Not(Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_coal_mine'), EqualTo_string(BuildingType.GetKey, 'building_iron_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_copper_mine'), EqualTo_string(BuildingType.GetKey, 'building_rare_earth_elements_mine'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_bauxite_mine'), EqualTo_string(BuildingType.GetKey, 'building_uranium_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_lead_mine'), EqualTo_string(BuildingType.GetKey, 'building_phosphorus_mine')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_gold_mine'), EqualTo_string(BuildingType.GetKey, 'building_logging_camp')), Or(EqualTo_string(BuildingType.GetKey, 'building_fishing_wharf'), EqualTo_string(BuildingType.GetKey, 'building_oil_rig'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_un_conventional_oil_well'), EqualTo_string(BuildingType.GetKey, 'building_offshore_oil_well')), Or(EqualTo_string(BuildingType.GetKey, 'building_natural_gas_well'), EqualTo_string(BuildingType.GetKey, 'building_un_conventional_gas_well'))))), EqualTo_string(BuildingType.GetKey, 'building_offshore_gas_well'))))]"
									}
								}
							}
						}
						flowcontainer = {
							direction = vertical
							default_header = {
								parentanchor = hcenter
								blockoverride "text" {
									text = "AVAILABLE_RURAL_BUILDINGS"
								}
							}
							margin = { 7 10 }

							dynamicgridbox = {
								datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesRural]"
								flipdirection = yes
								datamodel_wrap = 5

								item = {
									container = {
										producing_building_button = {
											visible = "[Not(Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_coal_mine'), EqualTo_string(BuildingType.GetKey, 'building_iron_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_copper_mine'), EqualTo_string(BuildingType.GetKey, 'building_rare_earth_elements_mine'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_bauxite_mine'), EqualTo_string(BuildingType.GetKey, 'building_uranium_mine')), Or(EqualTo_string(BuildingType.GetKey, 'building_lead_mine'), EqualTo_string(BuildingType.GetKey, 'building_phosphorus_mine')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_gold_mine'), EqualTo_string(BuildingType.GetKey, 'building_logging_camp')), Or(EqualTo_string(BuildingType.GetKey, 'building_fishing_wharf'), EqualTo_string(BuildingType.GetKey, 'building_oil_rig'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_un_conventional_oil_well'), EqualTo_string(BuildingType.GetKey, 'building_offshore_oil_well')), Or(EqualTo_string(BuildingType.GetKey, 'building_natural_gas_well'), EqualTo_string(BuildingType.GetKey, 'building_un_conventional_gas_well'))))), EqualTo_string(BuildingType.GetKey, 'building_offshore_gas_well')))]"

											#"[Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_food_industry'), EqualTo_string(BuildingType.GetKey, 'building_textile_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_furniture_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_glassworks'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_tool_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_paper_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_chemical_plants'),	EqualTo_string(BuildingType.GetKey, 'building_synthetics_plant')))), Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_steelworks'),EqualTo_string(BuildingType.GetKey, 'building_aluminum_refinery')), Or(EqualTo_string(BuildingType.GetKey, 'building_motor_industry'), EqualTo_string(BuildingType.GetKey, 'building_automobile_manufactories'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_shipyards'), EqualTo_string(BuildingType.GetKey, 'building_carrier_drydocks')),	Or(EqualTo_string(BuildingType.GetKey, 'building_surface_ship_drydocks'), EqualTo_string(BuildingType.GetKey, 'building_submarine_drydocks'))))), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_advanced_military_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_electronics_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_small_arms_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_explosives_industry'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_fuel_refineries'), EqualTo_string(BuildingType.GetKey, 'building_semiconductor_manufactories')), Or(EqualTo_string(BuildingType.GetKey, 'building_aircraft_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_uranium_refineries')))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_battery_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_pharmaceutical_industry')), Or(EqualTo_string(BuildingType.GetKey, 'building_computer_manufactories'), EqualTo_string(BuildingType.GetKey, 'building_consumer_electronics_manufactories'))))))]"
										}
									}
								}
							}
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('development')]"
						flowcontainer = {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesDevelopment]"
							direction = vertical
							parentanchor = hcenter
							spacing = 10

							item = {
								buildings_production_method_item = {
									blockoverride "visible" {
										visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Not(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_suez_canal'), EqualTo_string(BuildingType.GetKey, 'building_panama_canal')), Or(EqualTo_string(BuildingType.GetKey, 'building_south_shore_canal'), EqualTo_string(BuildingType.GetKey, 'building_beauharnois_canal'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_wiley-dondero_canal'), EqualTo_string(BuildingType.GetKey, 'building_iroquois_canal')), Or(EqualTo_string(BuildingType.GetKey, 'building_welland_canal'), EqualTo_string(BuildingType.GetKey, 'building_detroit_river')))), Or(EqualTo_string(BuildingType.GetKey, 'building_st_marys_canal'), EqualTo_string(BuildingType.GetKey, 'building_panama_canal')))))]"
									}
								}
							}

						}
						flowcontainer = {
							direction = vertical
							default_header = {
								parentanchor = hcenter
								blockoverride "text" {
									text = "AVAILABLE_DEVELOPMENT_BUILDINGS"
								}
							}
							margin = { 7 10 }

							dynamicgridbox = {
								datamodel = "[ProductionMethodsPanel.AccessPotentialBuildingEntriesDevelopment]"
								flipdirection = yes
								datamodel_wrap = 5

								item = {
									container = {
										producing_building_button = {}
									}
								}
							}
						}
					}

					production_methods_entries_container = {
						visible = "[InformationPanel.IsTabSelected('construction_queues')]"
						datacontext = "[AccessPlayer]"

						blockoverride "production_entries" {
							datamodel = "[ProductionMethodsPanel.AccessProductionMethodPanelEntriesConstruction]"
						}

						# There are no potential entries yet, for now hide the header and list
						blockoverride "potential_entries_header" {}
						blockoverride "potential_entries_entire_widget" {}

						construction_queue = {}
					}
				}
			}
		}

		blockoverride "fixed_bottom" {
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('construction_queues')]"
				margin_top = 5
				flowcontainer = {
					visible = "[And(ProductionMethodsPanel.IsShowingGovernmentConstructions,GreaterThan_int32(ProductionMethodsPanel.GetNumGovernmentConstructionQueuePages(GetMetaPlayer.GetPlayedOrObservedCountry), '(int32)1'))]"
					spacing = 20

					button_select_arrow = {
						size = { 25 25 }
						mirror = horizontal
						parentanchor = vcenter
						using = decrease_button_sound
						using = tooltip_above

						block "tooltip_left_arrow" {
							tooltip = "PREVIOUS_PAGE"
						}

						block "onclick_prev"
						{
							onclick = "[ProductionMethodsPanel.PrevGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)]"
						}
					}

					text_single = {
						text = "CONSTRUCTION_CURRENT_PAGE"
						parentanchor = vcenter
						align = nobaseline
					}

					button_select_arrow = {
						size = { 25 25 }
						parentanchor = vcenter
						using = increase_button_sound
						using = tooltip_above

						block "tooltip_right_arrow" {
							tooltip = "NEXT_PAGE"
						}

						block "onclick_next"
						{
							onclick = "[ProductionMethodsPanel.NextGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)]"
						}
					}
				}

				flowcontainer = {
					visible = "[And(ProductionMethodsPanel.IsShowingPrivateConstructions,GreaterThan_int32(ProductionMethodsPanel.GetNumPrivateConstructionQueuePages(GetMetaPlayer.GetPlayedOrObservedCountry), '(int32)1'))]"
					spacing = 20

					button_select_arrow = {
						size = { 25 25 }
						mirror = horizontal
						parentanchor = vcenter
						using = decrease_button_sound
						using = tooltip_above

						block "tooltip_left_arrow" {
							tooltip = "PREVIOUS_PAGE"
						}

						block "onclick_prev"
						{
							onclick = "[ProductionMethodsPanel.PrevPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)]"
						}
					}

					text_single = {
						text = "CONSTRUCTION_CURRENT_PAGE_PRIVATE"
						parentanchor = vcenter
						align = nobaseline
					}

					button_select_arrow = {
						size = { 25 25 }
						parentanchor = vcenter
						using = increase_button_sound
						using = tooltip_above

						block "tooltip_right_arrow" {
							tooltip = "NEXT_PAGE"
						}

						block "onclick_next"
						{
							onclick = "[ProductionMethodsPanel.NextPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)]"
						}
					}
				}
			}
		}
	}

	### autoexpand
	type building_auto_expand = widget {
		visible = "[IsPotential( Building.ToggleAutoExpand )]"
		size = { 30 30 }

		icon = {
			using = rotate_glow_blue
			size = { 130% 130% }
			visible = "[Building.IsAutoExpanding]"
			alwaystransparent = yes
			parentanchor = center
			using = default_fade_in_out
		}

		button_icon_round_action = {
			size = { 100% 100% }
			visible = "[Building.IsAutoExpanding]"
			enabled = "[IsValid( Building.ToggleAutoExpand )]"
			onclick = "[Execute( Building.ToggleAutoExpand )]"
			tooltip = [Building.GetAutoExpandTooltip]

			blockoverride "icon" {
				texture = "gfx/interface/production_methods/auto_expand.dds"
			}
			blockoverride "icon_size" {
							size = { 77% 77% }
			}
		}

		button_icon_round_action = {
			size = { 100% 100% }
			visible = "[Not(Building.IsAutoExpanding)]"
			enabled = "[IsValid( Building.ToggleAutoExpand )]"
			onclick = "[Execute( Building.ToggleAutoExpand )]"
			tooltip = [Building.GetAutoExpandTooltip]
			using = confirm_button_sound

			blockoverride "icon" {
				texture = "gfx/interface/production_methods/auto_expand_not.dds"
			}
			blockoverride "icon_size" {
							size = { 77% 77% }
			}
		}
	}

#	### has new PM icon_ANIMATED_ARROW_
#	type has_new_pm_icon = icon {
#		size = { 26 26 }
#		framesize = { 52 52 }
#		texture = "gfx/interface/production_methods/has_new_pm_icon.dds"
#		block "visible" {}
#		tooltip = "TOOLTIP_NEW_PRODUCTION_METHOD"
#
#		state = {
#			trigger_on_create = yes
#			name = 1
#			frame = 1
#			next = 2
#			duration = 0.10
#		}
#		state = {
#			name = 2
#			frame = 2
#			next = 3
#			duration = 0.11
#		}
#		state = {
#			name = 3
#			frame = 3
#			next = 4
#			duration = 0.12
#		}
#		state = {
#			name = 4
#			frame = 4
#			next = 5
#			duration = 0.13
#		}
#		state = {
#			name = 5
#			frame = 5
#			next = 6
#			duration = 0.14
#		}
#		state = {
#			name = 6
#			frame = 5
#			duration = 1.5
#		}
#	}

	### has new PM icon_Exclamation mark_
	type has_new_pm_icon = icon {
		size = { 16 16 }
		framesize = { 52 52 }
		texture = "gfx/interface/current_situations/icon_situation_unread.dds"
		block "visible" {}
		tooltip = "TOOLTIP_NEW_PRODUCTION_METHOD"
	}

	### PM ITEM
	type buildings_production_method_item = flowcontainer {
		block "visible" {
			visible = "[Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings))]"
		}

		block "datacontext" {
			datacontext = "[ProductionMethodsPanelEntry.GetBuildingType]"
		}

		direction = vertical
		spacing = 10

		### TOP ITEM
		widget = {
			size = { @panel_width_plus_14 90 }
			highlight_tutorial = {
	   			visible = "[BuildingType.IsBeingTutorialHighlighted]"
	    	}
			### DROPDOWN / EXPAND
			section_header_button = {
				parentanchor = left
				position = { 90 20 }
				size = { 460 35 }

				blockoverride "left_text" {
					raw_text = "#v [BuildingType.GetNameNoFormatting]#!"
				}
				blockoverride "right_text" {
					section_header_right_text = {
						visible = "[And( And(Not(BuildingType.IsGovernmentFunded), Not(BuildingType.IsSubsistenceBuilding)), GreaterThan_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0' ))]"
						text = "[BuildingType.GetProductivitySpanDesc(GetPlayer.Self)]"
						tooltip = "PRODUCTIVITY_SPAN_TOOLTIP"
					}
				}

				blockoverride "onclick" {
					onclick = "[ProductionMethodsPanelEntry.ToggleExpand]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(ProductionMethodsPanelEntry.IsExpanded)]"
				}

				blockoverride "onclick_showless" {
					visible = "[ProductionMethodsPanelEntry.IsExpanded]"
				}
			}

			### production methods grouped
			flowcontainer = {
				position = { 100 60 }
				parentanchor = top

				fixedgridbox = {
					datamodel = "[ProductionMethodsPanelEntry.AccessBuildingType.AccessProductionMethodGroups]"
					flipdirection = yes
					addcolumn = 40
					addrow = 50
					datamodel_wrap = 8
					item = {
						widget = {
							size = { 40 40 }
							tooltip = "[ProductionMethodsPanelEntry.GetBulkChangeTooltip( ProductionMethodGroup.Self )]"
							using = tooltip_above


							button = {
								visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessCountryProductionMethods( GetPlayer.Self ) ), '(int32)1' )]"
								distribute_visual_state = no
								inherit_visual_state = no
								using = expand_button_bg_dropdown
								size = { 100% 100% }
								onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenuForType(ProductionMethodsPanelEntry.AccessBuildingType, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}

							### pm icon
							icon = {
								visible = "[ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self )]"
								size = { 30 30 }
								parentanchor = center
								texture = "[ProductionMethodsPanelEntry.GetAllSameProductionMethodTexture( ProductionMethodGroup.Self )]"
							}

							### mixed pm icon
							icon = {
								visible = "[Not( ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self ) )]"
								size = { 30 30 }
								parentanchor = center
								texture = "[ProductionMethodGroup.GetMixedIcon]"
							}

							### new pm
							has_new_pm_icon = {
								position = { -2 2 }
								parentanchor = bottom|left
								blockoverride "visible" {
									visible = "[GetPlayer.HasNewProductionMethodInGroup( ProductionMethodGroup.Self )]"
								}
							}


							### nr available
							textbox = {
								raw_text = "#bold [ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType)]#!"
								parentanchor = top|right
								position = { -5 0 }
								autoresize = yes
								align = right|nobaseline
								visible = "[GreaterThan_int32( ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType), '(int32)1')]"
								tooltip = "PRODUCTION_METHOD_OPTIONS_BULK"
								using = tooltip_above
								using = fontsize_small

								background = {
									using = default_background
									margin = { 8 4 }
								}
							}
						}
					}
				}
			}

			### building icon
			button = {
				texture = "[BuildingType.GetTexture]"
				onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
				effectname = "NoHighlight"
				distribute_visual_state = no
				inherit_visual_state = no

				size = { 75 75 }
				position = { 10 15 }
				parentanchor = left|vcenter

				tooltipwidget = {
					FancyTooltip_BuildingType = {}
				}
			}

			### ACTION BUTTONS
			flowcontainer = {
				parentanchor = bottom|right
				position = { -15 5 }
				spacing = 5

				### expand
				button_icon_round_map_interaction = {
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}

					onclick = "[BuildingType.ActivateExpansionLens]"
					using = select_button_sound
					visible = "[And(Or( BuildingType.IsBuildable, BuildingType.IsExpandable ), Not(BuildingType.IsMilitaryBuilding))]"
					tooltip = "EXPAND"
				}

				### subsidize
				widget = {
					size = { 30 30 }
					visible = "[BuildingType.CanBeSubsidized]"

					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}

					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_YES"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllNoSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_NO"
						using = confirm_button_sound

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_MIXED"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}

				### auto expand
				widget = {
					size = { 30 30 }
					visible = "[BuildingType.CanBeAutoExpanded]"

					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}

					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_YES"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllNoAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_NO"
						using = confirm_button_sound

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedAutoExpand]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_MIXED"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}

			}

			### PRODUCTIVITY SPAN ###
			textbox = {
				text = "BUILDING_TYPE_COUNT"
				autoresize = yes
				position = { 15 5 }
				parentanchor = bottom
				align = hcenter|nobaseline
				using = fontsize_xxl
				minimumsize = { 26 26 }
			}
		}

		### EXPANDED LIST OF BUILDINGS
		expanded_list = {
			using = expanded_list_bg
			datamodel = "[ProductionMethodsPanelEntry.AccessBuildings]"
			visible = "[ProductionMethodsPanelEntry.IsExpanded]"
			item = {
				widget = {
					highlight_tutorial_ui = {
						visible = "[Building.IsBeingTutorialHighlighted]"
					}
					size = { @panel_width 100 }
					parentanchor = hcenter

					background = {
						using = entry_bg_simple
					}
					onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no

					### building button
					button = {
						parentanchor = hcenter
						position = { 0 5 }
						size = { @panel_width_minus_10 28 }
						using = default_button

						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
						distribute_visual_state = no

						tooltipwidget = {
							FancyTooltip_Building = {}
						}

						textbox = {
							position = { 15 0 }
							raw_text = "#v [Building.GetState.GetName]#!"
							size = { 305 30 }
							align = left|nobaseline
							elide = right
							parentanchor = left|vcenter
						}

						flowcontainer = {
							parentanchor = right|vcenter
							position = { -10 0 }
							spacing = 5

							icon = {
								visible = "[And(Not(Building.IsSubsistenceBuilding), Building.HasFailedHires)]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_FULLY_EMPLOYED"
							}

							icon = {
								visible = "[Building.ShouldShowAsNotHiring]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_HIRING"
							}

							icon = {
								visible = "[Building.ShouldShowAsHiring]"
								size = { 28 28 }
								parentanchor = vcenter
								texture = "gfx/interface/icons/generic_icons/employment_not_full_hiring.dds"
								tooltip = "TOOLTIP_BUILDING_HIRING"
							}

							### PROFITABLE
							textbox = {
								widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
								visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
								raw_text = "#tooltippable #tooltip:[Building.GetTooltipTag],TOOLTIP_BUILDING_PRODUCTIVITY,GraphTooltipTypeProfitability #v [GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] [Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!#!#!"
								autoresize = yes
								align = nobaseline
								parentanchor = vcenter
							}
						}
					}

					### production methods single
					fixedgridbox = {
						position = { 130 45 }
						parentanchor = top
						datamodel = "[Building.AccessProductionMethodGroups]"
						flipdirection = yes
						datamodel_wrap = 10
						addcolumn = 40
						addrow = 50

						item = {
							widget = {
								size = { 40 40 }
								datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
								datacontext = "[ProductionMethod]"
                                datacontext = "[Building]"
                                datacontext = "[ProductionMethodGroup]"
								using = tooltip_above
								tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

								button = {
									visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
									using = expand_button_bg_dropdown
									size = { 100% 100% }
									onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
								}

								icon = {
									size = { 30 30 }
									parentanchor = center
									texture = "[ProductionMethod.GetTexture]"
								}

								### new pm
								has_new_pm_icon = {
									position = { -2 2 }
									parentanchor = bottom|left
									blockoverride "visible" {
										visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
									}
								}

								### nr available
								textbox = {
									raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
									parentanchor = top|right
									position = { -5 0 }
									autoresize = yes
									align = right|nobaseline
									visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
									tooltip = "PRODUCTION_METHOD_OPTIONS"
									using = tooltip_above
									using = fontsize_small

									background = {
										using = default_background
										margin = { 8 4 }
									}
								}
							}
						}
					}

					### ACTION BUTTONS
					flowcontainer = {
						parentanchor = center
						position = { 200 20 }
						spacing = 1

						### subsidize
						widget = {
							size = { 80 35 }

							textbox = {
								raw_text = "#N [GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] #bold -[Building.GetSubsidies|D]#!"
								tooltip = "[Building.GetSubsidiesDesc]"
								autoresize = yes
								position = { 0 0 }
								align = nobaseline
								parentanchor = right|vcenter
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
								alpha = 0

								state = {
									name = _show
									position_x = -42
									alpha = 1
									duration = 0.2
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.4
									position_x = 0
									using = Animation_Curve_Default
								}
							}

							widget = {
								size = { 30 30 }
								parentanchor = right

								icon = {
									using = rotate_glow_blue
									size = { 130% 130% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									alwaystransparent = yes
									parentanchor = center
									using = default_fade_in_out
								}
								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]"
									tooltip = SUBSIDIZED_YES

									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}

								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]"
									tooltip = SUBSIDIZED_NO
									using = confirm_button_sound

									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized_not.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
							}
						}

						### AUTOEXPAND
						building_auto_expand = {}
					}

					flowcontainer = {
						position = { 5 15 }
						direction = vertical
						spacing = 5
						parentanchor = vcenter

						### DOWNSIZE / EXPAND
						container = {
							minimumsize = { 110 35 }

							### DOWNSIZE
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[Execute( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[Not( ShouldAskConfirmation( Building.Downsize ) )]"
								using = tooltip_below
							}

							### DOWNSIZE WITH CONFIRMATION
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[ShouldAskConfirmation( Building.Downsize )]"
								using = tooltip_below
							}

							### CANCEL CONSTRUCTION
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetCancelConstructionTooltip]"
								visible = "[IsValid( Building.CancelConstruction )]"
								onclick = "[Execute( Building.CancelConstruction )]"
								using = tooltip_below
							}

							### LEVEL
							container = {
								position = { 35 0 }
								background = {
									using = entry_bg
									margin = { 0 -2 }
								}

								textbox = {
									text = "[Building.GetExpansionLevelDesc]"
									align = hcenter|nobaseline
									size = { 40 35 }
									elide = right
									fontsize_min = 12
								}
							}

							### EXPAND
							button_icon_plus_action = {
								widgetid = "[Concatenate('building_expand', Building.GetIDString)]"
								position = { 75 0 }
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetQueueConstructionTooltip]"
								onclick = "[Execute( Building.QueueConstruction )]"
								enabled = "[IsValid( Building.QueueConstruction )]"
								visible = "[And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable)]"
							}
						}

						### BUILD PROGRESS
						default_progressbar_horizontal = {
							visible = "[Building.HasConstructionQueued]"
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							size = { 100 5 }
							using = default_list_position

							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
						}
					}
				}
			}
		}
	}
	type buildings_canal_item = flowcontainer {
		block "visible" {
			visible = "[And(Not(IsDataModelEmpty(ProductionMethodsPanelEntry.AccessBuildings)), Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey, 'building_suez_canal'), EqualTo_string(BuildingType.GetKey, 'building_panama_canal')), Or(EqualTo_string(BuildingType.GetKey, 'building_south_shore_canal'), EqualTo_string(BuildingType.GetKey, 'building_beauharnois_canal'))), Or(Or(EqualTo_string(BuildingType.GetKey, 'building_wiley-dondero_canal'), EqualTo_string(BuildingType.GetKey, 'building_iroquois_canal')), Or(EqualTo_string(BuildingType.GetKey, 'building_welland_canal'), EqualTo_string(BuildingType.GetKey, 'building_detroit_river')))), Or(EqualTo_string(BuildingType.GetKey, 'building_st_marys_canal'), EqualTo_string(BuildingType.GetKey, 'building_panama_canal'))))]"
		}

		block "datacontext" {
			datacontext = "[ProductionMethodsPanelEntry.GetBuildingType]"
		}

		direction = vertical
		spacing = 10

		### TOP ITEM
		widget = {
			size = { @panel_width_plus_14 90 }
			highlight_tutorial = {
	   			visible = "[BuildingType.IsBeingTutorialHighlighted]"
	    	}
			### DROPDOWN / EXPAND
			section_header_button = {
				parentanchor = left
				position = { 90 20 }
				size = { 460 35 }

				blockoverride "left_text" {
					raw_text = "#v Canals [BuildingType.GetNameNoFormatting]#!"
				}
				blockoverride "right_text" {
					section_header_right_text = {
						visible = "[And( And(Not(BuildingType.IsGovernmentFunded), Not(BuildingType.IsSubsistenceBuilding)), GreaterThan_int32( BuildingType.GetLevelCountInCountry(GetPlayer.Self), '(int32)0' ))]"
						text = "[BuildingType.GetProductivitySpanDesc(GetPlayer.Self)]"
						tooltip = "PRODUCTIVITY_SPAN_TOOLTIP"
					}
				}

				blockoverride "onclick" {
					onclick = "[ProductionMethodsPanelEntry.ToggleExpand]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(ProductionMethodsPanelEntry.IsExpanded)]"
				}

				blockoverride "onclick_showless" {
					visible = "[ProductionMethodsPanelEntry.IsExpanded]"
				}
			}

			### production methods grouped
			flowcontainer = {
				position = { 100 60 }
				parentanchor = top

				fixedgridbox = {
					datamodel = "[ProductionMethodsPanelEntry.AccessBuildingType.AccessProductionMethodGroups]"
					flipdirection = yes
					addcolumn = 40
					addrow = 50
					datamodel_wrap = 8
					item = {
						widget = {
							size = { 40 40 }
							tooltip = "[ProductionMethodsPanelEntry.GetBulkChangeTooltip( ProductionMethodGroup.Self )]"
							using = tooltip_above


							button = {
								visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessCountryProductionMethods( GetPlayer.Self ) ), '(int32)1' )]"
								distribute_visual_state = no
								inherit_visual_state = no
								using = expand_button_bg_no_fade
								size = { 100% 100% }
								onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenuForType(ProductionMethodsPanelEntry.AccessBuildingType, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
							}

							### pm icon
							icon = {
								visible = "[ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self )]"
								size = { 30 30 }
								parentanchor = center
								texture = "[ProductionMethodsPanelEntry.GetAllSameProductionMethodTexture( ProductionMethodGroup.Self )]"
							}

							### mixed pm icon
							icon = {
								visible = "[Not( ProductionMethodsPanelEntry.HasAllSameProductionMethod( ProductionMethodGroup.Self ) )]"
								size = { 30 30 }
								parentanchor = center
								texture = "[ProductionMethodGroup.GetMixedIcon]"
							}

							### new pm
							has_new_pm_icon = {
								position = { -2 2 }
								parentanchor = bottom|left
								blockoverride "visible" {
									visible = "[GetPlayer.HasNewProductionMethodInGroup( ProductionMethodGroup.Self )]"
								}
							}


							### nr available
							textbox = {
								raw_text = "#bold [ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType)]#!"
								parentanchor = top|right
								position = { -5 0 }
								autoresize = yes
								align = right|nobaseline
								visible = "[GreaterThan_int32( ProductionMethodGroup.GetNumAvailableOptionsForBuildingType(ProductionMethodsPanelEntry.AccessBuildingType), '(int32)1')]"
								tooltip = "PRODUCTION_METHOD_OPTIONS_BULK"
								using = tooltip_above
								using = fontsize_small

								background = {
									using = default_background
									margin = { 8 4 }
								}
							}
						}
					}
				}
			}

			### building icon
			button = {
				texture = "[BuildingType.GetTexture]"
				onrightclick = "[RightClickMenuManager.ShowForBuildingType(BuildingType.AccessSelf)]"
				effectname = "NoHighlight"
				distribute_visual_state = no
				inherit_visual_state = no

				size = { 75 75 }
				position = { 10 15 }
				parentanchor = left|vcenter

				tooltipwidget = {
					FancyTooltip_BuildingType = {}
				}
			}

			### ACTION BUTTONS
			flowcontainer = {
				parentanchor = bottom|right
				position = { -15 5 }
				spacing = 5

				### expand
				button_icon_round_map_interaction = {
					size = { 30 30 }
					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}

					onclick = "[BuildingType.ActivateExpansionLens]"
					using = select_button_sound
					visible = "[Or( BuildingType.IsBuildable, BuildingType.IsExpandable )]"
					tooltip = "EXPAND"
				}

				### subsidize
				widget = {
					size = { 30 30 }
					visible = "[BuildingType.CanBeSubsidized]"

					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}

					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_YES"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasAllNoSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_NO"
						using = confirm_button_sound

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedSubsidies]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllSubsidies )]"
						tooltip = "SUBSIDIZED_ALL_MIXED"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}

				### auto expand
				widget = {
					size = { 30 30 }
					visible = "[BuildingType.CanBeAutoExpanded]"

					icon = {
						using = rotate_glow_blue
						size = { 130% 130% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						alwaystransparent = yes
						parentanchor = center
						using = default_fade_in_out
					}

					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_YES"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[And(ProductionMethodsPanelEntry.HasAllNoAutoExpand, ProductionMethodsPanelEntry.GetBuildingType.CanBeAutoExpanded)]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_NO"
						using = confirm_button_sound

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/auto_expand_not.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
					button_icon_round_action = {
						size = { 100% 100% }
						visible = "[ProductionMethodsPanelEntry.HasMixedAutoExpand]"
						enabled = "[IsValid( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						onclick = "[Execute( ProductionMethodsPanelEntry.ToggleAllAutoExpand )]"
						tooltip = "AUTO_EXPAND_ALL_MIXED"

						blockoverride "icon" {
							texture = "gfx/interface/production_methods/subsidized_mixed.dds"
						}
						blockoverride "icon_size" {
							size = { 70% 70% }
						}
					}
				}

			}

			### PRODUCTIVITY SPAN ###
			textbox = {
				text = "BUILDING_TYPE_COUNT"
				autoresize = yes
				position = { 15 5 }
				parentanchor = bottom
				align = hcenter|nobaseline
				using = fontsize_xxl
				minimumsize = { 26 26 }
			}
		}

		### EXPANDED LIST OF BUILDINGS
		expanded_list = {
			using = expanded_list_bg
			datamodel = "[ProductionMethodsPanelEntry.AccessBuildings]"
			visible = "[ProductionMethodsPanelEntry.IsExpanded]"
			item = {
				widget = {
					highlight_tutorial_ui = {
						visible = "[Building.IsBeingTutorialHighlighted]"
					}
					size = { @panel_width 100 }
					parentanchor = hcenter

					background = {
						using = entry_bg_simple
					}
					onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no

					### building button
					button = {
						parentanchor = hcenter
						position = { 0 5 }
						size = { @panel_width_minus_10 28 }
						using = default_button

						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
						distribute_visual_state = no

						tooltipwidget = {
							FancyTooltip_Building = {}
						}

						textbox = {
							position = { 15 0 }
							raw_text = "#v [Building.GetState.GetName]#!"
							size = { 305 30 }
							align = left|nobaseline
							elide = right
							parentanchor = left|vcenter
						}

						flowcontainer = {
							parentanchor = right|vcenter
							position = { -10 0 }
							spacing = 5

							icon = {
								visible = "[And(Not(Building.IsSubsistenceBuilding), Building.HasFailedHires)]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_FULLY_EMPLOYED"
							}

							icon = {
								visible = "[Building.ShouldShowAsNotHiring]"
								size = { 28 28 }
								texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
								parentanchor = vcenter
								tooltip = "NOT_HIRING"
							}

							icon = {
								visible = "[Building.ShouldShowAsHiring]"
								size = { 28 28 }
								parentanchor = vcenter
								texture = "gfx/interface/icons/generic_icons/employment_not_full_hiring.dds"
								tooltip = "TOOLTIP_BUILDING_HIRING"
							}

							### PROFITABLE
							textbox = {
								widgetid = "[Concatenate('productivity_value', Building.GetIDString)]"
								visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
								raw_text = "#tooltippable #tooltip:[Building.GetTooltipTag],TOOLTIP_BUILDING_PRODUCTIVITY,GraphTooltipTypeProfitability #v [GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] [Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!#!#!"
								autoresize = yes
								align = nobaseline
								parentanchor = vcenter
							}
						}
					}

					### production methods single
					fixedgridbox = {
						position = { 130 45 }
						parentanchor = top
						datamodel = "[Building.AccessProductionMethodGroups]"
						flipdirection = yes
						datamodel_wrap = 10
						addcolumn = 40
						addrow = 50

						item = {
							widget = {
								size = { 40 40 }
								datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
								datacontext = "[ProductionMethod]"
                                datacontext = "[Building]"
                                datacontext = "[ProductionMethodGroup]"
								using = tooltip_above
								tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

								button = {
									visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
									using = expand_button_bg_no_fade
									size = { 100% 100% }
									onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
								}

								icon = {
									size = { 30 30 }
									parentanchor = center
									texture = "[ProductionMethod.GetTexture]"
								}

								### new pm
								has_new_pm_icon = {
									position = { -2 2 }
									parentanchor = bottom|left
									blockoverride "visible" {
										visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
									}
								}

								### nr available
								textbox = {
									raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
									parentanchor = top|right
									position = { -5 0 }
									autoresize = yes
									align = right|nobaseline
									visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
									tooltip = "PRODUCTION_METHOD_OPTIONS"
									using = tooltip_above
									using = fontsize_small

									background = {
										using = default_background
										margin = { 8 4 }
									}
								}
							}
						}
					}

					### ACTION BUTTONS
					flowcontainer = {
						parentanchor = center
						position = { 200 20 }
						spacing = 1

						### subsidize
						widget = {
							size = { 80 35 }

							textbox = {
								raw_text = "#N [GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] #bold -[Building.GetSubsidies|D]#!"
								tooltip = "[Building.GetSubsidiesDesc]"
								autoresize = yes
								position = { 0 0 }
								align = nobaseline
								parentanchor = right|vcenter
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
								alpha = 0

								state = {
									name = _show
									position_x = -42
									alpha = 1
									duration = 0.2
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.4
									position_x = 0
									using = Animation_Curve_Default
								}
							}

							widget = {
								size = { 30 30 }
								parentanchor = right

								icon = {
									using = rotate_glow_blue
									size = { 130% 130% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									alwaystransparent = yes
									parentanchor = center
									using = default_fade_in_out
								}
								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]"
									tooltip = SUBSIDIZED_YES

									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}

								button_icon_round_action = {
									size = { 100% 100% }
									visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
									enabled = "[IsValid( Building.ToggleSubsidies )]"
									onclick = "[Execute( Building.ToggleSubsidies )]"
									tooltip = SUBSIDIZED_NO
									using = confirm_button_sound

									blockoverride "icon" {
										texture = "gfx/interface/production_methods/subsidized_not.dds"
									}
									blockoverride "icon_size" {
										size = { 80% 80% }
									}
								}
							}
						}

						### AUTOEXPAND
						building_auto_expand = {}
					}

					flowcontainer = {
						position = { 5 15 }
						direction = vertical
						spacing = 5
						parentanchor = vcenter

						### DOWNSIZE / EXPAND
						container = {
							minimumsize = { 110 35 }

							### DOWNSIZE
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[Execute( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[And(Not( ShouldAskConfirmation( Building.Downsize ) ), Not(BuildingType.IsMilitaryBuilding))]"
								using = tooltip_below
							}

							### DOWNSIZE WITH CONFIRMATION
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetDownsizeTooltip]"
								onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
								enabled = "[IsValid( Building.Downsize )]"
								visible = "[And(ShouldAskConfirmation( Building.Downsize ), Not(BuildingType.IsMilitaryBuilding))]"
								using = tooltip_below
							}

							### CANCEL CONSTRUCTION
							button_icon_minus_action = {
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetCancelConstructionTooltip]"
								visible = "[And(IsValid( Building.CancelConstruction ), Not(BuildingType.IsMilitaryBuilding))]"
								onclick = "[Execute( Building.CancelConstruction )]"
								using = tooltip_below
							}

							### LEVEL
							container = {
								position = { 35 0 }
								background = {
									using = entry_bg
									margin = { 0 -2 }
								}

								textbox = {
									text = "[Building.GetExpansionLevelDesc]"
									align = hcenter|nobaseline
									size = { 40 35 }
									elide = right
									fontsize_min = 12
								}
							}

							### EXPAND
							button_icon_plus_action = {
								widgetid = "[Concatenate('building_expand', Building.GetIDString)]"
								position = { 75 0 }
								size = { 30 30 }
								parentanchor = vcenter
								tooltip = "[Building.GetQueueConstructionTooltip]"
								onclick = "[Execute( Building.QueueConstruction )]"
								enabled = "[IsValid( Building.QueueConstruction )]"
								visible = "[And(And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable), Not(BuildingType.IsMilitaryBuilding))]"
							}
						}

						### BUILD PROGRESS
						default_progressbar_horizontal = {
							visible = "[Building.HasConstructionQueued]"
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							size = { 100 5 }
							using = default_list_position

							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
						}
					}
				}
			}
		}
	}
}
