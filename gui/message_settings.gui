message_settings_window = {}

types message_settings {
	type message_settings_window = default_popup {
		name = "message_settings_window"
		parentanchor = center

		blockoverride "window_header_name" {
			text = MESSAGE_SETTINGS
		}

		blockoverride "header_close_button_visibility" {
			visible = yes
		}

		blockoverride "header_close_button" {
			onclick = "[ToggleMessageSettings]"
		}

		blockoverride "content" {

			flowcontainer = {
				direction = vertical
				resizeparent = yes
				minimumsize = { 700 300 }
				margin_top = 90
				margin_bottom = 30
				margin_left = 14
				margin_right = 14

				widget = {
                    size = { 700 44 }

                    tab_buttons = {
                        blockoverride "first_button" {
                            text = "MESSAGE_SETTINGS_NOTIFICATION_TYPES"
                        }
                        blockoverride "first_button_tooltip" {
                            tooltip = "MESSAGE_SETTINGS_NOTIFICATION_TYPES"
                        }
                        blockoverride "first_button_click" {
                            onclick = "[GetVariableSystem.Set('message_settings_notification_types', 'true')]"
                            onclick = "[GetVariableSystem.Set('message_settings_alerts', 'false')]"
                            onclick = "[GetVariableSystem.Set('message_settings_interesting_countries', 'false')]"
                        }
                        blockoverride "first_button_visibility" {
                            visible = "[GetVariableSystem.HasValue('message_settings_notification_types', 'true')]"
                        }
                        blockoverride "first_button_visibility_checked" {
                            visible = "[Not( GetVariableSystem.HasValue('message_settings_notification_types', 'true') )]"
                        }
                        blockoverride "first_button_selected" {
                            text = "MESSAGE_SETTINGS_NOTIFICATION_TYPES"
                        }

                        blockoverride "second_button" {
                            text = "MESSAGE_SETTINGS_ALERTS"
                        }
                        blockoverride "second_button_tooltip" {
                            tooltip = "MESSAGE_SETTINGS_ALERTS"
                        }
                        blockoverride "second_button_click" {
                            onclick = "[GetVariableSystem.Set('message_settings_notification_types', 'false')]"
                            onclick = "[GetVariableSystem.Set('message_settings_alerts', 'true')]"
                            onclick = "[GetVariableSystem.Set('message_settings_interesting_countries', 'false')]"
                        }
                        blockoverride "second_button_visibility" {
                            visible = "[GetVariableSystem.HasValue('message_settings_alerts', 'true')]"
                        }
                        blockoverride "second_button_visibility_checked" {
                            visible = "[Not( GetVariableSystem.HasValue('message_settings_alerts', 'true') )]"
                        }
                        blockoverride "second_button_selected" {
                            text = "MESSAGE_SETTINGS_ALERTS"
                        }

                        blockoverride "third_button" {
                            text = "MESSAGE_SETTINGS_DIPLOMATICALLY_INTERESTING"
                        }
                        blockoverride "third_button_tooltip" {
                            tooltip = "MESSAGE_SETTINGS_DIPLOMATICALLY_INTERESTING"
                        }
                        blockoverride "third_button_click" {
                            onclick = "[GetVariableSystem.Set('message_settings_notification_types', 'false')]"
                            onclick = "[GetVariableSystem.Set('message_settings_alerts', 'false')]"
                            onclick = "[GetVariableSystem.Set('message_settings_interesting_countries', 'true')]"
                        }
                        blockoverride "third_button_visibility" {
                            #visible = "[GetVariableSystem.HasValue('message_settings_interesting_countries', 'true')]" # todo PRCAL-26835
                            visible = no

                        }
                        blockoverride "third_button_visibility_checked" {
                            #visible = "[Not( GetVariableSystem.HasValue('message_settings_interesting_countries', 'true') )]" # todo PRCAL-26835
                            visible = no
                        }
                        blockoverride "third_button_selected" {
                            text = "MESSAGE_SETTINGS_DIPLOMATICALLY_INTERESTING"
                        }
                    }
                }

				flowcontainer = {
					parentanchor = hcenter
					spacing = 7
					margin_bottom = 5
					visible = "[GetVariableSystem.HasValue('message_settings_notification_types', 'true')]"

					textbox = {
						text = "MESSAGE_SETTINGS_SORT_NOTIFICATION_TYPE"
						autoresize = yes
						minimumsize = { 290 -1 }
						maximumsize = { 290 -1 }
						align = nobaseline
						default_format = "#title"
						elide = right
						fontsize_min = 14
					}

					textbox = {
						text = "MESSAGE_SETTINGS_SORT_APPEARANCE"
						autoresize = yes
						minimumsize = { 200 -1 }
						maximumsize = { 200 -1 }
						align = nobaseline
						default_format = "#title"
						elide = right
						fontsize_min = 14
					}

					textbox = {
						text = "MESSAGE_SETTINGS_SORT_PAUSE"
						autoresize = yes
						minimumsize = { 150 -1 }
						maximumsize = { 150 -1 }
						align = right|nobaseline
						default_format = "#title"
						margin_right = 5
						elide = right
						fontsize_min = 14
					}									
				}

				flowcontainer = {
                    direction = vertical
                    parentanchor = hcenter
                    visible = "[GetVariableSystem.HasValue('message_settings_alerts', 'true')]"

					flowcontainer = {
	                    direction = vertical
	                    parentanchor = hcenter
	                    visible = "[GetVariableSystem.HasValue('message_settings_alerts', 'true')]"
	                    spacing = 10

	                    widget = {
	                    	size = { 5 5 }
	                    }

	                    ### CURRENT SITUATION LABEL
						widget = {
		                    parentanchor = hcenter
		                    size = { 660 84 }

		                    background = {
		                    	using = entry_bg_simple
		                    }

		                    ### TITLE
		                    textbox = {
		                        parentanchor = vcenter
		                        position = { 20 0 }
		                        text = "MESSAGE_SETTINGS_ALERTS_BUTTON_LABEL"
		                        autoresize = yes
		                        minimumsize = { 290 -1 }
		                        maximumsize = { 290 -1 }
		                        elide = right
		                        fontsize_min = 14
		                        align = nobaseline
		                    }

		                    ### CURRENT SITUTAION LABEL OPTIONS
		                    flowcontainer = {
		                    	parentanchor = vcenter|right
		                    	position = { -20 0 }
		                    	spacing = 10

		                    	### UNREAD (Option)
		                        widget = {
		                        	size = { 150 44 }
		                        	tooltip = "CURRENT_SITUATION_UNREAD_TOOLTIP"

		                        	background = {
		                        		visible = "[Not(MessageSettingsWindow.IsCurrentSituationLabelTotal)]"
		                        		using = paper_bg
		                        	}

		                        	button = {
		                        		visible = "[MessageSettingsWindow.IsCurrentSituationLabelTotal]"
		                        		size = { 100% 100% }
		                        		using = default_button_action
		                        		onclick = "[MessageSettingsWindow.CurrentSituationLabelSelectUnread]"
		                        	}

		                        	textbox = {
		                        		parentanchor = center
		                        		autoresize = yes
		                        		align = nobaseline
		                        		max_width = 150
		                        		elide = right
		                        		fontsize_min = 14
		                        		text = "CURRENT_SITUATION_LABEL_UNREAD"
		                        	}

		                        	icon = {
		                        		visible = "[Not(MessageSettingsWindow.IsCurrentSituationLabelTotal)]"
		                        		using = highlighted_square_selection
		                        	}
		                        }

		                        ### TOTAL (Option)
		                        widget = {
		                        	size = { 150 44 }
		                        	tooltip = "CURRENT_SITUATION_TOTAL_TOOLTIP"
		                        	
		                        	background = {
		                        		visible = "[MessageSettingsWindow.IsCurrentSituationLabelTotal]"
		                        		using = paper_bg
		                        	}

		                        	button = {
		                        		visible = "[Not(MessageSettingsWindow.IsCurrentSituationLabelTotal)]"
		                        		size = { 100% 100% }
		                        		using = default_button_action
		                        		onclick = "[MessageSettingsWindow.CurrentSituationLabelSelectTotal]"
		                        	}

		                        	textbox = {
		                        		#visible = "[Not(MessageSettingsWindow.IsCurrentSituationLabelTotal)]"
		                        		parentanchor = center
		                        		autoresize = yes
		                        		align = nobaseline
		                        		max_width = 150
		                        		elide = right
		                        		fontsize_min = 14
		                        		text = "CURRENT_SITUATION_LABEL_TOTAL"
		                        	}

		                        	icon = {
		                        		visible = "[MessageSettingsWindow.IsCurrentSituationLabelTotal]"
		                        		using = highlighted_square_selection
		                        	}
		                        }
		                    }
		                }
		            }

					flowcontainer = {
						parentanchor = hcenter
						spacing = 7
						margin_bottom = 5
						margin_top = 10

						textbox = {
							text = "MESSAGE_SETTINGS_SORT_ALERT_NAME"
							autoresize = yes
							minimumsize = { 320 -1 }
							maximumsize = { 320 -1 }
							align = nobaseline
							default_format = "#title"
						}

						textbox = {
							text = "MESSAGE_SETTINGS_SORT_APPEARANCE"
							autoresize = yes
							minimumsize = { 320 -1 }
							maximumsize = { 320 -1 }
							align = nobaseline
							default_format = "#title"
						}
					}
				}

				flowcontainer = {
                    direction = vertical
                    parentanchor = hcenter
                    #visible = "[GetVariableSystem.HasValue('message_settings_interesting_countries', 'true')]" # todo PRCAL-26835
                    visible = no

                    flowcontainer = {
                        parentanchor = hcenter
                        spacing = 7
                        margin_bottom = 5
                        margin_top = 10

                        textbox = {
							text = "MESSAGE_SETTINGS_SORT_ALERT_NAME"
							autoresize = yes
							minimumsize = { 305 -1 }
							maximumsize = { 305 -1 }
							align = nobaseline
							default_format = "#title"
						}

						textbox = {
							text = "MESSAGE_SETTINGS_SORT_APPEARANCE"
							autoresize = yes
							minimumsize = { 335 -1 }
							maximumsize = { 335 -1 }
							align = nobaseline
							default_format = "#title"
						}
                    }
                }

				scrollarea = {
					using = default_list_position
					layoutpolicy_vertical = preferred
					layoutpolicy_horizontal = preferred
					maximumsize = { 684 600 }
					minimumsize = { 684 150 }

					scrollbarpolicy_horizontal = always_off
					
					scrollbar_vertical = {
						using = vertical_scrollbar		
					}

					scrollwidget = {
						container = {
							parentanchor = hcenter
							resizeparent = yes
								
							flowcontainer = {
								parentanchor = hcenter
								direction = vertical
								spacing = 4
								visible = "[GetVariableSystem.HasValue('message_settings_notification_types', 'true')]"
								datamodel = "[MessageSettingsWindow.GetNotificationSettingsItems]"
								
								item = {
									notification_type_list_item = {}
								}
							}

							flowcontainer = {
			                    direction = vertical
			                    parentanchor = hcenter
			                    visible = "[GetVariableSystem.HasValue('message_settings_alerts', 'true')]"

                                datamodel = "[MessageSettingsWindow.GetAlertSettingsItems]"

			                    item = {
			                    	alert_type_list_item = {}
			                    }
			                }

			                flowcontainer = {
			                    direction = vertical
			                    parentanchor = hcenter
			                    #visible = "[GetVariableSystem.HasValue('message_settings_interesting_countries', 'true')]" # todo PRCAL-26835
			                    visible = no

                                datamodel = "[MessageSettingsWindow.GetInterestingCountryItems]"

			                    item = {
			                    	diplomatically_interesting_country_list_item = {}
			                    }
			                }

						}					
					}
				}
				
				flowcontainer = {
					visible = "[MessageSettingsWindow.HasSingleShownItem]"
					parentanchor = hcenter
					spacing = 10
					margin_top = 10
					
					button_primary = {
						onclick = "[MessageSettingsWindow.RemoveSingleShownItem]"
						size = { 660 40 }
						text = "SHOW_ALL_MESSAGE_SETTINGS"
					}	
				}

				flowcontainer = {
					parentanchor = hcenter
					spacing = 10
					margin_top = 10

					button = {
                        visible = "[GetVariableSystem.HasValue('message_settings_notification_types', 'true')]"
						onclick = "[MessageSettingsWindow.ResetNotificationSettings]"
						size = { 310 40 }
						text = "RESET_TO_DEFAULT"
						using = default_button
					}

					button = {
                        visible = "[GetVariableSystem.HasValue('message_settings_alerts', 'true')]"
						onclick = "[MessageSettingsWindow.ResetAlertSettings]"
						size = { 310 40 }
						text = "RESET_TO_DEFAULT"
						using = default_button
					}

					button = {
						onclick = "[ToggleMessageSettings]"
						size = { 310 40 }
						text = "CLOSE_LABEL"
						using = default_button
					}					
				}
			}
		}
	}

	type notification_type_list_item = widget {
		size = { 660 44 }
		visible = "[MessageSettingsWindow.ShouldBeShown(NotificationSettingsItem.GetTag)]"

		background = { 
			using = entry_bg_simple
		}

		hbox = {
			textbox = {
				text = "[NotificationSettingsItem.GetName]"
				align = nobaseline
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = preferred
				maximumsize = { 290 -1 }
				margin_left = 10
				fontsize_min = 14
				elide = right
			}

			widget = {
				size = { 290 44 }

				dropdown_menu_standard = {
					parentanchor = vcenter

					blockoverride "dropdown_properties"
					{
						datamodel = "[NotificationSettingsItem.GetValidOptions]"
						onselectionchanged = "[NotificationSettingsItem.OnSelectOption]"
					}

					blockoverride "dropdown_size"
					{
						size = { 290 32 }
					}

					blockoverride "dropdown_list_maxsize"
					{
						size = { 290 600 }
					}

					blockoverride "dropdown_active_item_properties"
					{
						text_single = {
							parentanchor = vcenter
							position = { 10 0 }
							autoresize = yes
							align = nobaseline
							default_format = "#clickable"
							text = "[NotificationSettingsItem.GetCurrentOption.GetNameWithConcept]"
						}
								
						text_single = {
							parentanchor = right|vcenter
							position = { -30 0 }
							autoresize = yes
							align = right|nobaseline
							default_format = "#title"
							text = "MESSAGE_SETTINGS_DEFAULT"
							visible = "[NotificationSettingsItem.GetCurrentOption.IsDefault]"
						}
					}

					blockoverride "dropdown_item_properties"
					{
						widget = {
							size = { 100% 100% }

							background = {
								visible = "[ObjectsEqual(NotificationOptionItem.AccessSelf, NotificationSettingsItem.GetCurrentOption)]"
								using = paper_bg
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 10

								text_single = {
									layoutpolicy_horizontal = expanding
									align = nobaseline
									margin_left = 10
									default_format = "#clickable"
									text = "[NotificationOptionItem.GetNameWithConcept]"
								}

								expand = {}
								
								text_single = {
									layoutpolicy_horizontal = expanding
									align = right|nobaseline
									default_format = "#title"
									text = "MESSAGE_SETTINGS_DEFAULT"
									visible = "[NotificationOptionItem.IsDefault]"
								}
							}

							icon = {
								visible = "[ObjectsEqual(NotificationOptionItem.AccessSelf, NotificationSettingsItem.GetCurrentOption)]"
								using = highlighted_square_selection
							}
						}
					}
				}
			}

			widget = {
				size = { 60 44 }
				checkbutton = {
					using = check_button
					size = { 24 24 }
					parentanchor = center
					onclick = "[NotificationSettingsItem.ToggleAutoPause]"
					checked = "[NotificationSettingsItem.HasAutoPause]"
				}
			}
		}
	}

	type alert_type_list_item = widget {
		size = { 660 44 }

		background = { 
			using = entry_bg_simple
		}

		hbox = {
			textbox = {
				text = "[AlertSettingsItem.GetSettingName]" 
				align = nobaseline
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = preferred
				maximumsize = { 320 -1 }
				margin_left = 10
			}

			widget = {
				size = { 320 44 }

				dropdown_menu_standard = {
					parentanchor = vcenter

					blockoverride "dropdown_properties"
					{
						datamodel = "[AlertSettingsItem.GetValidOptions]"
						onselectionchanged = "[AlertSettingsItem.OnSelectOption]"
					}

					blockoverride "dropdown_size"
					{
						size = { 320 32 }
					}

					blockoverride "dropdown_list_maxsize"
					{
						size = { 320 600 }
					}

					blockoverride "dropdown_active_item_properties"
					{
						text_single = {
							parentanchor = vcenter
							position = { 10 0 }
							autoresize = yes
							align = nobaseline
							default_format = "#clickable"

							text = "[AlertSettingsItem.GetCurrentOption.GetNameWithConcept]"
							
						}
								
						text_single = {
							parentanchor = right|vcenter
							position = { -30 0 }
							autoresize = yes
							align = right|nobaseline
							default_format = "#title"
							text = "MESSAGE_SETTINGS_DEFAULT"
							visible = "[AlertSettingsItem.GetCurrentOption.IsDefault]"
						}
					}

					blockoverride "dropdown_item_properties"
					{
						widget = {
							size = { 100% 100% }

							background = {
								visible = "[ObjectsEqual(AlertOptionItem.AccessSelf, AlertSettingsItem.GetCurrentOption)]"
								using = paper_bg
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 10

								text_single = {
									layoutpolicy_horizontal = expanding
									align = nobaseline
									margin_left = 10
									default_format = "#clickable"

									text = "[AlertOptionItem.GetNameWithConcept]"
								}

								expand = {}
								
								text_single = {
									layoutpolicy_horizontal = expanding
									align = right|nobaseline
									default_format = "#title"
									text = "MESSAGE_SETTINGS_DEFAULT"
									visible = "[AlertOptionItem.IsDefault]"
								}
							}

							icon = {
								visible = "[ObjectsEqual(AlertOptionItem.AccessSelf, AlertSettingsItem.GetCurrentOption)]"
								using = highlighted_square_selection
							}
						}
					}
				}
			}
		}
	}

	type diplomatically_interesting_country_list_item = widget {
        size = { 660 44 }

        background = {
            using = entry_bg_simple
        }

        hbox = {

        	widget = {
        		size = { 7 7 }
        	}

        	small_flag = {
                datacontext = "[InterestingCountryItem.GetCountry]"
            }

            textbox = {
                datacontext = "[InterestingCountryItem.GetCountry]"
                text = "[Country.GetNameNoFlag]"
                align = nobaseline
                layoutpolicy_vertical = preferred
                layoutpolicy_horizontal = preferred
                maximumsize = { 280 -1 }
                margin_left = 10
                elide = right
            }

            widget = {
                size = { 345 44 }

                dropdown_menu_standard = {
                    parentanchor = vcenter

                    blockoverride "dropdown_properties" {
                        datamodel = "[GetInterestingCountrySettings]"
                        onselectionchanged = "[InterestingCountryItem.OnSelectOption]"
                        onselectionchanged = "[MessageSettingsWindow.OnChangeInterestingCountrySettings]"
                    }

                    blockoverride "dropdown_size" {
                        size = { 340 32 }
                    }

                    blockoverride "dropdown_list_maxsize" {
                        size = { 340 600 }
                    }

                    blockoverride "dropdown_active_item_properties" {
                        #tooltip = "[InterestingCountryItem.GetSetting.GetTooltip]"  # todo PRCAL-26835

	                    text_single = {
	                        parentanchor = vcenter
	                        position = { 10 0 }
	                        autoresize = yes
	                        align = nobaseline
	                        default_format = "#clickable"
	                        text = "[InterestingCountryItem.GetSetting.GetName]"
	                        elide = right
                            max_width = 220
                            fontsize_min = 14
	                    }

	                    text_single = {
							parentanchor = right|vcenter
							position = { -30 0 }
							autoresize = yes
							align = right|nobaseline
							default_format = "#title"
							text = "MESSAGE_SETTINGS_DEFAULT"
							#visible = "[InterestingCountryItem.GetSetting.IsDefault]"  # todo PRCAL-26835
						}
	                }

	                blockoverride "dropdown_item_properties" {

                        widget = {
                            size = { 100% 100% }

                            background = {
								#visible = "[ObjectsEqual(InterestingCountrySetting.AccessSelf, InterestingCountryItem.GetSetting)]"  # todo PRCAL-26835
								using = paper_bg
							}

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                margin_right = 10
                                #tooltip = "[InterestingCountrySetting.GetTooltip]"  # todo PRCAL-26835

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    align = nobaseline
                                    margin_left = 10
                                    default_format = "#clickable"
                                    text = "[InterestingCountrySetting.GetName]"
                                    elide = right
                                    max_width = 220
                                    fontsize_min = 14
                                }

                                expand = {}

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    align = right|nobaseline
                                    default_format = "#title"
                                    text = "MESSAGE_SETTINGS_DEFAULT"
									#visible = "[InterestingCountrySetting.IsDefault]"  # todo PRCAL-26835
                                }
                            }

                            icon = {
								#visible = "[ObjectsEqual(InterestingCountrySetting.AccessSelf, InterestingCountryItem.GetSetting)]"  # todo PRCAL-26835
								using = highlighted_square_selection
							}
                        }
                    }
                }
            }
        }
    }
}
