template paused_effect_duration_show
{
	duration = 0.2
}
template paused_effect_duration_hide
{
	duration = 0.1
}
template paused_effect_alpha
{
	alpha = 0.5
}
template speedometer_set_speed_properties
{
	gfxtype = framedbuttongfx
	effectname = "NoHighlight"
	upframe = 1
	overframe = 2
	downframe = 3
	enabled = "[TimeKeeper.CanSetGameSpeed]"
	using = tooltip_se
	using = game_speed_sound
}
template speed_button_1
{
	texture = "gfx/interface/main_hud/speedometer_set_speed_1.dds"
	framesize = { 48 62 }
	size = { 24 31 }
	using = speedometer_set_speed_properties
	onclick = "[TimeKeeper.SetGameSpeed('(int32)0')]"
	input_action = "speed_1"
	tooltip = "CHANGE_SPEED_TOOLTIP_1"
}
template speed_button_2
{
	texture = "gfx/interface/main_hud/speedometer_set_speed_2.dds"
	framesize = { 64 68 }
	size = { 32 34 }
	using = speedometer_set_speed_properties
	onclick = "[TimeKeeper.SetGameSpeed('(int32)1')]"
	input_action = "speed_2"
	tooltip = "CHANGE_SPEED_TOOLTIP_2"
}
template speed_button_3
{
	texture = "gfx/interface/main_hud/speedometer_set_speed_3.dds"
	framesize = { 74 46 }
	size = { 37 23 }
	using = speedometer_set_speed_properties
	onclick = "[TimeKeeper.SetGameSpeed('(int32)2')]"
	input_action = "speed_3"
	tooltip = "CHANGE_SPEED_TOOLTIP_3"
}
template speed_button_4
{
	texture = "gfx/interface/main_hud/speedometer_set_speed_4.dds"
	framesize = { 64 68 }
	size = { 32 34 }
	using = speedometer_set_speed_properties
	onclick = "[TimeKeeper.SetGameSpeed('(int32)3')]"
	input_action = "speed_4"
	tooltip = "CHANGE_SPEED_TOOLTIP_4"
}
template speed_button_5
{
	texture = "gfx/interface/main_hud/speedometer_set_speed_5.dds"
	framesize = { 48 62 }
	size = { 24 31 }
	using = speedometer_set_speed_properties
	onclick = "[TimeKeeper.SetGameSpeed('(int32)4')]"
	input_action = "speed_5"
	tooltip = "CHANGE_SPEED_TOOLTIP_5"
}

types timekeeper
{			
	type time_animation = icon {
		texture = "gfx/interface/main_hud/speedometer_cogwheel_texture.dds"
		size = { 30 30 }
		
		modify_texture = {
			name = cogwheel
			texture = "gfx/interface/main_hud/speedometer_cogwheel_mask.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply
		}
		
		state = {
			trigger_on_create = yes
			name = 1
			next = 2

			modify_texture = {
				name = cogwheel
				rotate_uv = 360
			}
		}
		state = {
			name = 2
			next = 1
			block "speed" {}

			modify_texture = {
				name = cogwheel
				rotate_uv = 0
			}
		}
	}

	type pause_border = widget {
		name = "pause_border"
		size = { 100% 100% }
		alwaystransparent = yes
		visible = "[IsInGame]"
		ignore_in_debug_draw = yes
		
		widget = {
			size = { 100% 100% }
			using = fullscreen_hide

			widget = {
				size = { 100% 100% }
				visible = "[TimeKeeper.IsPaused]"
				ignore_in_debug_draw = yes

				state = {
					name = _hide
					alpha = 0
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = _show
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}


				container = {
					parentanchor = center
					position = { 0 -340 }

					### PAUSED MIDDLE BUTTON
					button = {
						enabled = "[TimeKeeper.CanTogglePause]"
						onclick = "[TimeKeeper.TogglePause]"
						tooltip = "[TimeKeeper.GetTogglePauseTooltip]"
						using = play_continue_button_sound
						parentanchor = hcenter
						onmousehierarchyenter = "[PdxGuiWidget.FindChild('glow').InterruptThenTriggerAnimation('hover_hide','hover_show')]"
						onmousehierarchyleave = "[PdxGuiWidget.FindChild('glow').InterruptThenTriggerAnimation('hover_show','hover_hide')]"
						
						container = {
							resizeparent = yes

							widget = { 
								size = { 50 50 }
								parentanchor = hcenter

								icon = {
									name = glow
									size = { 100% 100% }
									texture = "gfx/interface/map_markers/round_highlight.dds"
									parentanchor = center
									alwaystransparent = yes
									position = { 0 2 }

									alpha = 0
									
									state = {
										name = hover_show
										alpha = 0.7
										duration = 0.2
										using = Animation_Curve_Default
									}
									state = {
										name = hover_hide
										alpha = 0
										duration = 0.2
										using = Animation_Curve_Default
									}
								}
								
								icon = {
									size = { 100% 100% }
									alwaystransparent = yes
									texture = "gfx/interface/main_hud/paused_symbol.dds"
								}
							}

							textbox = {
								autoresize = yes
								position = {  0 46 } 
								alwaystransparent = yes
								
								text = "PAUSED"
								align = nobaseline
								parentanchor = hcenter

								background = {
									texture = "gfx/interface/main_hud/paused_bg_text.dds"
									texture_density = 2
									margin = { 18 10 }  
									spriteType = Corneredstretched
									spriteborder = { 50 40 }
								}
							}
						}
					}

					### PAUSE TEXT FOR MP
					flowcontainer = {
						name = "multiplayer_paused_by_player"
						visible = "[And(TimeKeeper.IsPaused, GameHasMultiplePlayers)]"

						parentanchor = hcenter
						position = { 0 74 }

						ignoreinvisible = yes
						direction = vertical

						state = {
							name = _show
							using = Animation_FadeIn_Quick
						}

						state = {
							name = _hide
							using = Animation_FadeOut_Standard
						}

						text_label_center = {
							visible = "[Not( StringIsEmpty( TimeKeeper.GetPausedBy ) )]"
							text = "PAUSED_BY_PLAYER_MP"
							using = fontsize_xxl
							parentanchor = hcenter
						}

						text_label_center = {
							visible = "[And( TimeKeeper.IsPausedByMe, Not( TimeKeeper.CanAnyoneUnpause ) )]"
							text = "PAUSED_BY_UNPAUSE_ONLY_ME"
							using = fontsize_large
							parentanchor = hcenter
						}

						text_label_center = {
							visible = "[And( Not( TimeKeeper.IsPausedByMe ), Not( TimeKeeper.CanAnyoneUnpause ) )]"
							text = "PAUSED_BY_UNPAUSE_ONLY_PAUSED_BY"
							using = fontsize_large
							parentanchor = hcenter
						}

						text_label_center = {
							visible = "[TimeKeeper.CanAnyoneUnpause]"
							text = "PAUSED_BY_UNPAUSE_ANYONE"
							using = fontsize_large
							parentanchor = hcenter
						}
					}
				}

				### PAUSED FRAME
				icon = {
					size = { 100% 100% }
					alwaystransparent = yes
					ignore_in_debug_draw = yes
					spriteType = Corneredtiled
					spriteborder = { 600 400 }
					texture_density = 2
					texture = "gfx/interface/main_hud/ui_paus_frame.dds"
					
					using = hud_shiny_effect
				}
			}
		}
	}
	

	type timemanip = container {
		name = "timemanip"
		alwaystransparent = no
		using = clickthrough_blocker
		visible = "[And( And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )), IsInGame)]"
		ignore_in_debug_draw = yes
		
		using = default_fade_in_out
		
		### CONSTRUCTION
		widget = {
			name = "tutorial_highlight_outliner_construction"
			size = { 410 75 }
			position = { 0 76 }
			parentanchor = right
			using = fullscreen_hide
			
			background = {
				texture = "gfx/interface/main_hud/topbar_bg.dds"
				mirror = horizontal
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_bottom = 94
				spriteborder_right = 100
				texture_density = 2
				using = hud_elements_alpha
				
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0.5
				}
				modify_texture = {
					using = texture_velvet
				}
				modify_texture = {
					using = fancy_pattern
				}
			}
			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/main_hud/topbar_side_dec_simple.dds"
				mirror = horizontal
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				spriteborder_bottom = 94
				spriteborder_right = 110
				texture_density = 2
				
				using = hud_shiny_effect
			}
			
			flowcontainer = {
				position = { 30 5 }
				parentanchor = vtop
				datacontext = "[AccessMetaPlayer.AccessPlayedOrObservedCountry]"
				spacing = 10

				# Hidden buttons to toggle pause/unpause
				button = {
					size = { 0 0 }
					onclick = "[Execute( Country.PauseConstruction )]"
					enabled = "[And(IsValid( Country.PauseConstruction ), Country.HasConstructionQueued)]"
					visible = "[Not(Country.IsConstructionPaused)]"
					input_action = "toggle_construction_queue_pause"
				}

				button = {
					size = { 0 0 }
					onclick = "[Execute( Country.ResumeConstruction )]"
					enabled = "[IsValid( Country.ResumeConstruction )]"
					visible = "[Country.IsConstructionPaused]"
					input_action = "toggle_construction_queue_pause"
				}

				button = {
					size = { 100 38 }
					using = default_button
					onclick = "[InformationPanelBar.OpenPanelTab('production_methods', 'construction_queues')]"
					enabled = "[Country.IsValid]"
					tooltip = "CONSTRUCTION_QUEUE_TOOLTIP"
					input_action = construction_queue

					flowcontainer = {
						direction = horizontal
						parentanchor = vcenter
						widget = {
							parentanchor = vcenter
							size = { 32 32 }
							
							icon = {
								visible = "[Not(Country.IsConstructionPaused)]"
								parentanchor = vcenter
								size = { 24 24 }
								position = { 8 0 }
								#onclick = "[Execute( Country.PauseConstruction )]"
								#enabled = "[And(IsValid( Country.PauseConstruction ), Country.HasConstructionQueued)]"
								texture = "gfx/interface/icons/state_status_icons/has_construction.dds"
							}

							icon = {
								parentanchor = vcenter
								#onclick = "[Execute( Country.ResumeConstruction )]"
								#enabled = "[IsValid( Country.ResumeConstruction )]"
								position = { 8 0 }
								size = { 24 24 }
								visible = "[Country.IsConstructionPaused]"
								texture = "gfx/interface/icons/state_status_icons/has_construction_paused.dds"
							}
						}

						textbox = {
							parentanchor = vcenter
							align = left|nobaseline
							text = "CONSTRUCTION_VALUE"
							autoresize = yes
							fontsize_min = 12
							maximumsize = { 100 -1 }
							minimumsize = { 100 -1 }
							margin_left = 8
							margin_top = 0
						}
					}
				}

				#MINI CONSTRUCTION QUEUE
				flowcontainer = {
					direction = vertical
					parentanchor = vcenter
					mini_construction_queue = {
						blockoverride "alpha" {
							#alpha = "[TransparentIfZero_int32(Country.GetNumInactiveAndNonShownGovernmentConstructionQueueElements)]"
						}

						blockoverride "tooltip" {
							tooltip = "NUM_GOVERNMENT_CONSTRUCTION_TOOLTIP"
						}

						blockoverride "icon" {
							texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
						}

						blockoverride "text" {
							raw_text = "[Country.GetNumInactiveAndNonShownGovernmentConstructionQueueElements|v=]"
						}

						blockoverride "text_visible" {
							#visible = "[GreaterThan_int32(Country.GetNumInactiveAndNonShownGovernmentConstructionQueueElements, '(int32)15')]"
						}

						blockoverride "buildings_datamodel" {
							datamodel = "[Country.AccessShownCurrentlyConstructingGovernmentQueue]"
						}
					}
	
					mini_construction_queue = {
						blockoverride "alpha" {	
							#alpha = "[TransparentIfZero_int32(Country.GetNumInactiveAndNonShownPrivateConstructionQueueElements)]"
						}

						blockoverride "tooltip" {
							tooltip = "NUM_PRIVATE_CONSTRUCTION_TOOLTIP"
						}

						blockoverride "icon" {
							texture = "gfx/interface/icons/generic_icons/privately_owned_building_icon.dds"
						}

						blockoverride "text" {
							raw_text = "[Country.GetNumInactiveAndNonShownPrivateConstructionQueueElements|v=]"
						}

						blockoverride "text_visible" {
							#visible = "[GreaterThan_int32(Country.GetNumInactiveAndNonShownPrivateConstructionQueueElements, '(int32)15')]"
						}

						blockoverride "buildings_datamodel" {
							datamodel = "[Country.AccessShownCurrentlyConstructingPrivateQueue]"
						}
					}
				}
				
				textbox = {
					autoresize = yes
					visible = "[Not(GetPlayer.HasConstructionQueued)]"
					parentanchor = vcenter
					align = left|nobaseline
					text = "NOTHING_CONSTRUCTING"
					minimumsize = { 215 -1 }
					maximumsize = { 215 -1 }
					margin_left = 25
					margin_top = 0
				}
			}
		}

		### TOP RIGHT STUFF
		widget = {
			size = { 460 80 }
			parentanchor = right
			alwaystransparent = no

			### BACKGROUND
			widget = {
				size = { 100% 100% }
				using = fullscreen_hide
				
				state = {
					name = _show
					alpha = 1
					duration = 0
				}
				state = {
					name = _hide
					alpha = 0
					duration = 0.2
				}
				
				background = {
					texture = "gfx/interface/main_hud/topbar_bg.dds"
					mirror = horizontal
					shaderfile = "gfx/FX/pdxgui_default.shader"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					spriteborder_bottom = 94
					spriteborder_right = 100
					texture_density = 2
					using = hud_elements_alpha
					
					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
						alpha = 0.5
					}
					modify_texture = {
						using = texture_velvet
					}
					modify_texture = {
						using = fancy_pattern
					}
				}
				icon = {
					texture = "gfx/interface/main_hud/topbar_side_dec.dds"
					mirror = horizontal
					size = { 100% 100% }
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					spriteborder_bottom = 94
					spriteborder_right = 110
					texture_density = 2
					
					using = hud_shiny_effect
				}			
			}

			### DATE
			widget = {
				position = { 60 2 }
				size = { 170 68 }
					
				### PAUSED DATE
				textbox = {
					position = { 0 2 }
					text = CLOCK_TEXT
					tooltip = "[MultiplayerSynchronizationInfo.GetPlayerDatesString]"
					align = left|nobaseline
					autoresize = yes
					visible = "[TimeKeeper.IsPaused]"
					default_format = "#variable"
					alpha = 0.7
				}
				### NOT PAUSED DATE
				textbox = {
					position = { 0 2 }
					text = CLOCK_TEXT
					tooltip = "[MultiplayerSynchronizationInfo.GetPlayerDatesString]"
					align = left|nobaseline
					autoresize = yes
					visible = "[Not(TimeKeeper.IsPaused)]"
					default_format = "#variable"
				}
				
				### TICKS (week)
				widget = {
					size = { 100% 16 }
					position = { 0 5 }
					parentanchor = vcenter
					
					### PAUSED PROGRESSBAR
					white_progressbar_horizontal = {
						visible = "[TimeKeeper.IsPaused]"
						size = { 100% 100% }
						
						blockoverride "values" {
							min = 0
							max = 28
							value = "[IntToFloat(TimeKeeper.GetProgressOfWeek)]"
						}
						blockoverride "color" {
							color = { 0.55 0.55 0.55 1 }
						}
						blockoverride "progress_changed_animation" {}
					}
					
					### NOT PAUSED PROGRESSBAR
					#Normal speed, animate
					green_progressbar_horizontal = {
						visible = "[And( Not(TimeKeeper.IsPaused), LessThanOrEqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)3'))]"
						size = { 100% 100% }
						
						blockoverride "values" {
							min = 0
							max = 28
							value = "[IntToFloat(TimeKeeper.GetProgressOfWeek)]"
						}
						blockoverride "animate_negative_change" {
							animate_negative_changes = no
						}
					}

					# Max speed, no animation
					green_progressbar_horizontal = {
						visible = "[And( Not(TimeKeeper.IsPaused), GreaterThan_int32(TimeKeeper.GetGameSpeed, '(int32)3'))]"
						size = { 100% 100% }
						
						blockoverride "values" {
							min = 0
							max = 28
							value = "[IntToFloat(TimeKeeper.GetProgressOfWeek)]"
						}
						blockoverride "progress_changed_animation" {}
						blockoverride "animate_negative_change" {
							animate_negative_changes = no
						}
					}
					
					#tick text
					textbox = {
						position = { 6 0 }
						visible = "[TimeKeeper.IsPaused]"
						text = CLOCK_DEBUG_TEXT
						tooltip = "[MultiplayerSynchronizationInfo.GetPlayerDatesString]"
						align = left|nobaseline
						autoresize = yes
						alpha = 0.6
						using = fontsize_small
						default_format = "#variable"
					}
					
					textbox = {
						position = { 6 0 }
						visible = "[Not(TimeKeeper.IsPaused)]"
						text = CLOCK_DEBUG_TEXT
						tooltip = "[MultiplayerSynchronizationInfo.GetPlayerDatesString]"
						align = left|nobaseline
						autoresize = yes
						using = fontsize_small
						default_format = "#variable"
					}
				}
				
				### PAUSED TEXT
				textbox = {
					position = { -5 -22 }
					visible = "[TimeKeeper.IsPaused]"
					parentanchor = bottom|right
					text = "CLOCK_PAUSED"
					autoresize = yes
					using = fontsize_small
					default_format = "#variable"
					align = left|nobaseline
					alpha = 0.5
				}
			}
			
			### SPEEDOMETER
			widget = {
				size = { 180 80 }
				parentanchor = right
				name = "tutorial_highlight_speedometer"
				position = { -53 1 }
				
				# animation triggers
				widget = {
					visible = "[TimeKeeper.IsPaused]"
					
					state = {
						name = _show
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('speedometer_lever_play','speedometer_lever_pause')]"
					}
					state = {
						name = _hide
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('speedometer_lever_pause','speedometer_lever_play')]"
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('speedometer_steam_play','speedometer_steam_play')]"
					}
				}
				
				# background (part under steam)
				icon = {
					parentanchor = right
					texture = "gfx/interface/main_hud/speedometer_bg_behind.dds"
					size = { 164 72 }
				}
				
				# steam animation when pressing play
				icon = {
					texture = "gfx/interface/main_hud/speedometer_steam.dds"
					size = { 100 70 }
					alwaystransparent = yes
					position = { 0 0 }
					alpha = 0

					modify_texture = {
						name = mask_01
						texture = "gfx/interface/main_hud/speedometer_steam.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					
						translate_uv = { 0 1 }
					}

					state = {
						name = speedometer_steam_play
						next = 2
						
						position_y = 0
						alpha = 0
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 0 }
						}
					}
					state = {
						name = 2
						next = 3
						
						duration = 0.5
						
						position_y = -10
						alpha = 0.7
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 0.25 }
						}
					}
					state = {
						name = 3
						
						duration = 1.5
						using = Animation_Curve_EaseOut
						
						position_y = -30
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 1 }
						}
					}
				}
				
				icon = {
					texture = "gfx/interface/main_hud/speedometer_steam.dds"
					size = { 100 70 }
					alwaystransparent = yes
					position = { 40 0 }
					alpha = 0

					modify_texture = {
						name = mask_01
						texture = "gfx/interface/main_hud/speedometer_steam.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					
						translate_uv = { 0 1 }
					}

					state = {
						name = speedometer_steam_play
						next = 2
						
						position_y = 0
						alpha = 0
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 0 }
						}
					}
					state = {
						name = 2
						next = 3
						
						duration = 0.75
						
						position_y = -10
						alpha = 0.7
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 0.25 }
						}
					}
					state = {
						name = 3
						
						duration = 3
						using = Animation_Curve_EaseOut
						
						position_y = -30
					
						modify_texture = {
							name = mask_01
							translate_uv = { 0 1 }
						}
					}
				}

				# background
				icon = {
					parentanchor = right
					texture = "gfx/interface/main_hud/speedometer_bg.dds"
					size = { 164 72 }
				}
				
				# pause / play  buttons and icons
				icon = {
					position = { 23 40 }
					visible = "[Not(TimeKeeper.IsPaused)]"
					name = "play_icon"
					texture = "gfx/interface/main_hud/play_icon.dds"
					size = { 35 27 }
				}
				icon = {
					position = { 25 14 }
					visible = "[TimeKeeper.IsPaused]"
					name = "pause_icon"
					texture = "gfx/interface/main_hud/pause_icon.dds"
					size = { 37 33 }
				}
				
				button = {
					position = { 23 40 }
					visible = "[TimeKeeper.IsPaused]"
					name = "play_button"
					texture = "gfx/interface/main_hud/play_button.dds"
					framesize = { 70 54 }
					size = { 35 27 }
					gfxtype = framedbuttongfx
					upframe = 1
					overframe = 2
					downframe = 3
					effectname = "NoHighlight"
					
					enabled = "[TimeKeeper.CanTogglePause]"
					onclick = "[TimeKeeper.TogglePause]"
					tooltip = "[TimeKeeper.GetTogglePauseTooltip]"
					using = play_continue_button_sound
					input_action = "pause"
				}
				button = {
					position = { 25 14 }
					visible = "[Not(TimeKeeper.IsPaused)]"
					name = "pause_button"
					texture = "gfx/interface/main_hud/pause_button.dds"
					framesize = { 74 66 }
					size = { 37 33 }
					gfxtype = framedbuttongfx
					upframe = 1
					overframe = 2
					downframe = 3
					effectname = "NoHighlight"
					
					enabled = "[TimeKeeper.CanTogglePause]"
					onclick = "[TimeKeeper.TogglePause]"
					tooltip = "[TimeKeeper.GetTogglePauseTooltip]"
					using = play_pause_button_sound
					input_action = "pause"
				}
				
				
				# lever shadow
				icon = {
					size = { 60 45 }
					texture = "gfx/interface/main_hud/play_pause_lever_texture_shadow.dds"
					position = { 10 -1 }
					visible = no
					
					modify_texture = {
						name = lever
						texture = "gfx/interface/main_hud/play_pause_lever_mask_shadow.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						
						rotate_uv = 0
					}
					
					state = {
						name = speedometer_lever_pause
						duration = 0.2
						using = Animation_Curve_Default
						position = { 10 -1 }
					
						modify_texture = {
							name = lever
							rotate_uv = 0
						}
					}
					state = {
						name = speedometer_lever_play
						duration = 0.2
						using = Animation_Curve_Default
						position = { 2 27 }
					
						modify_texture = {
							name = lever
							rotate_uv = 27
						}
					}
				}
				
				# lever
				icon = {
					size = { 60 45 }
					texture = "gfx/interface/main_hud/play_pause_lever_texture.dds"
					position = { 12 6 }
					
					modify_texture = {
						name = lever
						texture = "gfx/interface/main_hud/play_pause_lever_mask.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						
						rotate_uv = 0
					}
					
					state = {
						name = speedometer_lever_pause
						duration = 0.2
						using = Animation_Curve_Default
						position = { 12 6 }
					
						modify_texture = {
							name = lever
							rotate_uv = 0
						}
					}
					state = {
						name = speedometer_lever_play
						duration = 0.2
						using = Animation_Curve_Default
						position = { 6 31 }
					
						modify_texture = {
							name = lever
							rotate_uv = 15
						}
					}
				}
				
				# meter
				widget = {
					parentanchor = right
					size = { 124 72 }
					
					### cogwheel
					container = {
						parentanchor = hcenter
						position = { 0 42 }
						
						### paused
						icon = {
							visible = "[TimeKeeper.IsPaused]"
							size = { 30 30 }
							texture = "gfx/interface/main_hud/speedometer_cogwheel_texture.dds"
							alpha = 0.8
							
							modify_texture = {
								name = cogwheel
								texture = "gfx/interface/main_hud/speedometer_cogwheel_mask.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
							}
						}
						
						### playing (animation)
						container = {
							visible = "[Not(TimeKeeper.IsPaused)]"

							time_animation = {
								visible = "[EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)1')]"
								blockoverride "speed" {
									duration = 15
								}
							}
							time_animation = {
								visible = "[EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)2')]"
								blockoverride "speed" {
									duration = 12
								}
							}
							time_animation = {
								visible = "[EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)3')]"
								blockoverride "speed" {
									duration = 9
								}
							}
							time_animation = {
								visible = "[EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)4')]"
								blockoverride "speed" {
									duration = 6
								}
							}
							time_animation = {
								visible = "[EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)5')]"
								blockoverride "speed" {
									duration = 3
								}
							}
						}
					}
					
					# current speed / pointer
					icon = {
						position = { 0 4 }
						parentanchor = hcenter
						texture = "gfx/interface/main_hud/speedometer_current_speed.dds"
						size = { 110 64 }
						framesize = { 220 128 }
						frame = "[TimeKeeper.GetGameSpeedFrame]"
					}
					icon = {
						position = { 0 16 }
						parentanchor = hcenter
						texture = "gfx/interface/main_hud/speedometer_pointer.dds"
						size = { 80 50 }
						framesize = { 160 100 }
						frame = "[TimeKeeper.GetGameSpeedFrame]"
					}
					
					# set speed buttons
					button = {
						using = speed_button_1
						position = { 9 35 }
						visible = "[Not(EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)1'))]"
					}
					button = {
						using = speed_button_2
						position = { 16 9 }
						visible = "[Not(EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)2'))]"
					}
					button = {
						using = speed_button_3
						parentanchor = hcenter
						position = { 0 5 }
						visible = "[Not(EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)3'))]"
					}
					button = {
						using = speed_button_4
						position = { -16 9 }
						parentanchor = right
						visible = "[Not(EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)4'))]"
					}
					button = {
						using = speed_button_5
						position = { -9 35 }
						parentanchor = right
						visible = "[Not(EqualTo_int32(TimeKeeper.GetGameSpeed, '(int32)5'))]" 
					}
				}
			}
			
			### FASTER / SLOWER ( not visible in game, only here for the shortcuts )
			widget = {
				size = { 0 0 }
				alwaystransparent = yes
				alpha = 0
				
				button = {
					name = "slower_button"
					size = { 0 0 }
					using = default_button
					enabled = "[TimeKeeper.CanDecreaseGameSpeed]"
					onclick = "[TimeKeeper.DecreaseGameSpeed]"
					tooltip = "[TimeKeeper.GetDecreaseSpeedTooltip]"
					using = decrease_button_sound
					input_action = "decrease_speed"
				}			
				
				button = {
					name = "faster_button"
					size = { 0 0 }
					using = default_button
					enabled = "[TimeKeeper.CanIncreaseGameSpeed]"
					onclick = "[TimeKeeper.IncreaseGameSpeed]"
					tooltip = "[TimeKeeper.GetIncreaseSpeedTooltip]"
					using = increase_button_sound
					input_action = "increase_speed"
				}
			}
			
			### RIGHT BUTTONS
			flowcontainer = {
				direction = vertical
				parentanchor = right
				position = { -5 3 }
				spacing = 2
				
				### menu
				flowcontainer = {
					direction = horizontal
					parentanchor = hcenter
					spacing = 2

					button_icon_settings = {
						size = { 24 24 }
						onclick = "[ToggleMessageSettings]"
						parentanchor = vcenter
					}

					button_icon_menu = {
						size = { 32 32 }
						onclick = "[ToggleMainMenu]"
						enabled = "[Not( IsGameOverScreenShown )]"
						parentanchor = vcenter
					}

				}
				
				flowcontainer = {
					direction = horizontal
					parentanchor = hcenter
					spacing = 2
					
					button_icon_vickypedia = {
						size = { 24 24 }
						onclick = "[ToggleEncyclopedia]"
					}
					button_icon_music_player = {
						size = { 24 24 }
						onclick = "[ToggleMusicPlayer]"
					}
				}
			}
		}
	}
}

types construction_in_outliner
{
	type mini_construction_queue = widget {
		visible = "[Country.HasConstructionQueued]"
		size = { 265 32 }

		block "alpha" {}

		block "tooltip" {
			tooltip = "NUM_GOVERNMENT_CONSTRUCTION_TOOLTIP"
		}

		widget = {
			size = { 32 32 }
			parentanchor = vcenter
		
			icon = {
				block "icon" {}

				size = { 100% 100% }
				parentanchor = vcenter
				position = { 0 -2 }
			}
		}

		textbox = {
			block "text" {}
			block "text_visible" {}

			autoresize = yes
			align = right|nobaseline
			parentanchor = vcenter|right
			minimumsize = { 60 -1 }
			maximumsize = { 60 -1 }
			margin_right = 10
		}

		overlappingitembox = {
			parentanchor = vcenter
			position = { 33 0 }
			size = { 172 30 }

			block "buildings_datamodel" {}

			item = {
				widget = {
					size = { 32 30 }
					button = {
						parentanchor = vcenter
						datacontext = "[ConstructionQueueElement.GetBuilding]"
						tooltipwidget = {
							FancyTooltip_Building = {}
						}
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"

						size = { 30 30 }
						texture = "[Building.GetTexture]"

						default_progressbar_horizontal = {
							datacontext = "[ConstructionQueueElement.GetBuilding]"
							size = { 24 2 }
							parentanchor = hcenter
							position = { 0 4 }
							
							blockoverride "values" {
								value = "[ConstructionQueueElement.CalcPercentComplete]"
								min = 0 
								max = 1 
							}
						}
					}
				}
			}
		}

		background = {
			using = entry_bg_simple
			margin_left = -10
			margin_top = -5
			margin_bottom = -5
			margin_right = 0
		}
	}
}