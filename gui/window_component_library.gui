window = {
    name = "component_library_window"
    parentanchor = center
    size = { 1910 1070 }
    layer = windows_layer
	movable = no

    background = {
		using = default_background
		margin = { 15 15 }
	}

    state = {
        name = _show
        using = Animation_FadeIn_Quick

        on_start = "[GetVariableSystem.Set( 'ui_components_tabs', 'buttons' )]"
    }

    vbox = {
		spacing = 5

		### TOP TABS
		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			button = {
				using = default_button
				layoutpolicy_horizontal = expanding
				size = { 0 40 }
				using = fontsize_large
				
				raw_text = "UI Components"
				onclick = "[GetVariableSystem.Set( 'top_tabs', 'ui_components' )]"
				down = "[GetVariableSystem.HasValue( 'top_tabs', 'ui_components' )]"
				
				icon = {
					texture = "gfx/interface/icons/generic_icons/information.dds"
					size = { 30 30 }
					position = { 10 0 }
					parentanchor = left|vcenter
					alwaystransparent = no
					onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('ui_components_information_hide','ui_components_information_show')]"
					onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('ui_components_information_show','ui_components_information_hide')]"
				}
			}
			
			button = {
				using = default_button
				layoutpolicy_horizontal = expanding
				size = { 0 40 }
				using = fontsize_large
				
				raw_text = "UI Art Guide"
				onclick = "[GetVariableSystem.Set( 'top_tabs', 'ui_art_guide' )]"
				down = "[GetVariableSystem.HasValue( 'top_tabs', 'ui_art_guide' )]"
			}
			
			button = {
				using = default_button
				layoutpolicy_horizontal = expanding
				size = { 0 40 }
				using = fontsize_large
				
				raw_text = "UX Guide"
				onclick = "[GetVariableSystem.Set( 'top_tabs', 'ux_guide' )]"
				down = "[GetVariableSystem.HasValue( 'top_tabs', 'ux_guide' )]"
			}
			
			widget = { size = { 20 1 }}
			
			close_button = {
				size = { 35 35 }
				name = "button_close"
				shortcut = "close_window"
				tooltip = "CLOSE_TOOLTIP"
				using = Animation_ShowHide_Standard
				onclick = "[ExecuteConsoleCommand('gui.clearwidgets')]"
			}
		}
		
		### UI COMPONENTS
		vbox = {
			visible = "[GetVariableSystem.HasValue( 'top_tabs', 'ui_components' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			### TABS UI COMPONENTS
			hbox = {
				layoutpolicy_horizontal = expanding

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Buttons"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'buttons' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'buttons' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Backgrounds"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'backgrounds' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'backgrounds' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Headers"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'headers' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'headers' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Frames"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'frames' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'frames' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Dividers"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'dividers' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'dividers' )]"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding

					raw_text = "Progressbars"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'progressbars' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'progressbars' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding

					raw_text = "Icons"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'icons' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'icons' )]"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding

					raw_text = "Text"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'text' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'text' )]"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Characters"
					enabled = "[IsInGame]"
					raw_tooltip = "You have to be in-game to see Characters and Flags"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'characters' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'characters' )]"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Flags"
					enabled = "[IsInGame]"
					raw_tooltip = "You have to be in-game to see Characters and Flags"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'flags' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'flags' )]"
				}

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Animations"

					onclick = "[GetVariableSystem.Set( 'ui_components_tabs', 'animations' )]"
					down = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'animations' )]"
				}
			}

			### CONTENT / SCROLLAREA
			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_content" {
					
					# BUTTONS
					vbox = {
						name = "buttons"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'buttons' )]"
						layoutpolicy_horizontal = expanding
						
						button_checkbox_label = {

							onclick = "[GetVariableSystem.Toggle( 'ui_library_down_state')]"
							blockoverride "checkbox"
							{

								checked = "[GetVariableSystem.Exists('ui_library_down_state')]"
							}
							blockoverride "text"
							{
								raw_text = "Down State (selected buttons in lists etc)"
							}
						}
						
						# NAVIGATIONAL BUTTONS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Navigational Buttons"
							}
							blockoverride "info_text" {
								raw_text = "They are just for navigation around the UI and will not make any game state changes."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('navigational_buttons')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('navigational_buttons'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('navigational_buttons')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('navigational_buttons')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button
										size = { 300 40 }
										raw_text = "Button Text"
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "The most common button in the game. Also used in lists and all kinds of general usage."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_primary"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_primary
										size = { 300 40 }
										raw_text = "Button Text"
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Primary button to show more important/primary navigational options."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_primary_big"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_primary_big
										size = { 300 50 }
										raw_text = "Button Text"
										using = fontsize_large
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Same as above but should be used when the button is 50px or higher in height."
								}
							}
						}

						# ACTION BUTTONS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Action Buttons"
							}
							blockoverride "info_text" {
								raw_text = "Used for an action you can do, that change the game state or applies changes."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('action_buttons')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('action_buttons'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('action_buttons')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('action_buttons')]"
							layoutpolicy_horizontal = expanding
						
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_action"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_action
										size = { 300 40 }
										raw_text = "Button Text"
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Default action button, the most common action button."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_primary_action"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_primary_action
										size = { 300 40 }
										raw_text = "Button Text"
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Primary action button, used to indicate more primary and important actions."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_primary_big_action"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_primary_big_action
										size = { 300 50 }
										raw_text = "Button Text"
										using = fontsize_large
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Same as above but should be used when the button is 50px or higher in height."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_button_map_interaction"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = default_button_map_interaction
										size = { 300 40 }
										raw_text = "Button Text"
										down = "[GetVariableSystem.Exists('ui_library_down_state')]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Button used for interactions on the map, so this is a delayed/2-click action which will happen after you have clicked on the map."
								}
							}
						}
						
						# ICON BUTTONS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Icon Buttons"
							}
							blockoverride "info_text" {
								raw_text = "Small buttons with an icon. Used for places where there isn't room for a rectangular button with text."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('icon_buttons')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('icon_buttons'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('icon_buttons')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('icon_buttons')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Icon Button Examples"
								}

								blockoverride "component_area" {
									hbox = {
										spacing = 5
										
										button_icon_plus = {
											size = { 40 40 }
										}
										button_icon_menu = {
											size = { 40 40 }
										}
										button_icon_location_finder = {
											size = { 40 40 }
										}
										button_icon_vickypedia = {
											size = { 40 40 }
										}
										button_icon_reset = {
											size = { 40 40 }
										}
										button_icon_check = {
											size = { 40 40 }
										}
										button_icon_unpin = {
											size = { 40 40 }
										}
										button_icon_move_right = {
											size = { 40 40 }
										}
									}
								}
								
								blockoverride "component_desc" {
									raw_text = "These examples use our default golden look for the icon inside of the button."
								}

								blockoverride "component_implementation_note" {
									raw_text = "You can create more of these at the bottom of button_icons.gui, create a new type and link it to one of the base asset types below (make sure to use the correct version, if it is a navigational, action or map interaction). Our default shape should be round buttons, but in some rare cases we use square/rectangular. You only need to create new buttons inside this .gui file if they will be re-used alot, if you only need a button at one place you can just use the base asset and blockoverride the icon texture that you need."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Assets"
								}
								blockoverride "component_name_type" {
									raw_text = "(Types)"
								}

								blockoverride "component_area" {
									vbox = {
										spacing = 5
										hbox = {
											spacing = 10
											button_icon_round = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round"
											}
										}
										hbox = {
											spacing = 10
											button_icon_round_action = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round_action"
											}
										}
										hbox = {
											spacing = 10
											button_icon_round_map_interaction = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round_map_interaction"
											}
										}
										hbox = {
											spacing = 10
											button_icon_round_big = {
												size = { 60 60 }
												blockoverride "icon" {
													texture = "gfx/interface/icons/generic_icons/battalions.dds"
												}
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round_big"
											}
										}
										hbox = {
											spacing = 10
											button_icon_round_big_action = {
												size = { 60 60 }
												blockoverride "icon" {
													texture = "gfx/interface/icons/generic_icons/battalions.dds"
												}
												blockoverride "icon_size" {
													size = { 65% 65% }
												}
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round_big_action"
											}
										}
										hbox = {
											spacing = 10
											button_icon_round_big_map_interaction = {
												size = { 60 60 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_round_big_map_interaction"
											}
										}
										hbox = {
											spacing = 10
											button_icon_square = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_square"
											}
										}
										hbox = {
											spacing = 10
											button_icon_square_action = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_square_action"
											}
										}
										hbox = {
											spacing = 10
											button_icon_square_map_interaction = {
												size = { 40 40 }
											}
											textbox = {
												size = { 400 25 }
												align = left|nobaseline
												raw_text = "button_icon_square_map_interaction"
											}
										}
										expand = {}
									}
								}

								blockoverride "component_desc" {
									raw_text = "All of these base assets can have ANY icon inside them, the icon will automatically get mouse enter / mouse down effects. You should use the big version for 60 px or bigger. The square versions can be any size."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use blockoverride for icon and insert a texture path to any icon. Use blockoverride for icon_size to adjust the size of the icon."
								}
							}
						}
						
						# VIEW CONTROLS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "View Controls"
							}
							blockoverride "info_text" {
								raw_text = "Buttons that will control the viewing of the UI's."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('view_controls')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('view_controls'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('view_controls')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('view_controls')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tab_button"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									tab_button = {
										size = { 300 50 }
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used to divide windows into tabs."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "sort_button"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									hbox = {
										sort_button = {
											size = { 40 30 }
											button = {
												texture = "gfx/interface/buttons/sort_button_icons/sort_icon_rank.dds"
												size = { 25 25 }
												parentanchor = center
												alwaystransparent = yes
											}
										}
										sort_button = {
											size = { 150 30 }
											raw_text = "Sort by this."
										}
										sort_button = {
											size = { 150 30 }
											raw_text = "Sort by that."
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used to sort lists. If a column is to small then make an icon instead of text."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "section_header_button"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									vbox = {
										layoutpolicy_vertical = expanding
										layoutpolicy_horizontal = expanding
										
										section_header_button = {
											blockoverride "layout" {
												size = { 350 40 }
											}
											blockoverride "left_text" {
												raw_text = "More info under here."
											}
											blockoverride "onclick" {
												onclick = "[GetVariableSystem.Toggle('section_header_button_example')]"
											}
											blockoverride "onclick_showmore" {
												visible = "[Not(GetVariableSystem.Exists('section_header_button_example'))]"
											}
											blockoverride "onclick_showless" {
												visible = "[GetVariableSystem.Exists('section_header_button_example')]"
											}
										}
										
										textbox = {
											visible = "[GetVariableSystem.Exists('section_header_button_example')]"
											raw_text = "More Info"
											size = { 350 30 }
											align = center|nobaseline
											
											background = {
												using = entry_bg_simple
											}
										}
										expand = {}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for headers that can be expanded to show more information."
								}
							}
						
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "expand_button_bg, expand_button_bg_right_fade, expand_button_bg_left_fade, expand_button_bg_no_fade"
								}
								blockoverride "component_name_type" {
									raw_text = "(templates)"
								}

								blockoverride "component_area" {
									hbox = {
										spacing = 80
										
										vbox = {
											spacing = 5
											button = {
												using = expand_button_bg
												size = { 100 40 }
											}
											button = {
												using = expand_button_bg_right_fade
												size = { 100 40 }
											}
											button = {
												using = expand_button_bg_left_fade
												size = { 100 40 }
											}
											button = {
												using = expand_button_bg_no_fade
												size = { 100 40 }
											}
										}
										button = {
											using = expand_button_bg_no_fade
											size = { 75 75 }
											
											icon = {
												size = { 60 60 }
												parentanchor = center
												texture = "gfx/interface/icons/production_method_icons/armored_division.dds"
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "The base templates for our expand button, should be used whenever the section_header_button doesn't work. For example production methods that only have an icon and no arrow+title text."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "scrollbox"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									scrollbox = {
										size = { 220 100 }
										
										blockoverride "scrollbox_content" {
											widget = {
												size = { 200 150 }
												
												textbox = {
													margin = { 5 5 }
													autoresize = yes
													multiline = yes
													maximumsize = { 180 -1 }
													parentanchor = hcenter
													raw_text = "Lots of info here, you need to scroll to read all of it. Lots of info here, you need to scroll to read all of it."
												}
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Scroll button to scroll through lists. The scroll resizes in height to show the amount of content. There is a horizontal version as well, but our aim is to NEVER use it because horizontal scroll is horrible."
								}
							}
						}
						
						# MISC BUTTONS
						ui_guide_title_and_info = {
							blockoverride "title_text"
							{
								raw_text = "Misc Buttons"
							}
							blockoverride "info_text"
							{
								raw_text = "Various different buttons."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('misc_buttons')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('misc_buttons'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('misc_buttons')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('misc_buttons')]"
							layoutpolicy_horizontal = expanding
						
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "checkbutton"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								
								blockoverride "component_name_2" {
									raw_text = "check_button"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									checkbutton = {
										using = check_button
										size = { 40 40 }
									}
								}

								blockoverride "component_desc" {
									raw_text = "Checkboxes are used when there are lists of options and the user may select any number of choices, including zero, one, or several."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use the template inside of the type."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "button_radio"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									hbox = {
										button_radio = {
											size = { 40 40 }
											frame = 1
										}
										button_radio = {
											size = { 40 40 }
											frame = 2
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Radio buttons are used when there is a list of two or more options that are mutually exclusive and the user must select exactly one choice."
								}
								blockoverride "component_implementation_note" {
									raw_text = "We use two of them in script and then set frame = 1 and frame = 2 on them which are controlled with visible states."
								}
							}
						
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "glow_button"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									button = {
										using = glow_button
										raw_text = "Hover me to see glow."
										size = { 300 35 }
									}
								}

								blockoverride "component_desc" {
									raw_text = "Should be used when you need a more subtle appearance. Used for example for the topbar values that are clickable (we don't want big buttons there)."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "glow_button_border"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									icon = {
										using = entry_bg_simple
										size = { 300 100 }
										
										button = {
											using = glow_button_border
											raw_text = "Image Here. Hover me to see glow."
											size = { 295 95 }
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Can be used as a button highlight for illustrations. Used for example in the objectives screen."
								}
							}
						}
					}

					# BACKGROUNDS
					vbox = {
						name = "backgrounds"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'backgrounds' )]"
						layoutpolicy_horizontal = expanding
						
						# MAIN BACKGROUNDS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Main Backgrounds"
							}
							blockoverride "info_text" {
								raw_text = "Backgrounds for the main windows."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('main_backgrounds')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('main_backgrounds'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('main_backgrounds')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('main_backgrounds')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										background = {
											using = default_bg
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Our default background used for the sidepanels and fullscreen UI's."
								}
								blockoverride "component_implementation_note" {
									raw_text = "When we put frames on top of this we mask it with that frames corresponding mask (so that the shape of the background will follow the shape of the frame on top)."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_background"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										background = {
											using = default_background
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "A multipurpose background. Currently used for example in pop-ups, hud elements, right-click menu etc. Can be used with or without a frame on top."
								}
								blockoverride "component_implementation_note" {
									raw_text = "When we put frames on top of this we mask it with that frames corresponding mask (so that the shape of the background will follow the shape of the frame on top)."
								}
							}
						}
						
						# SUB BACKGROUNDS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Sub Backgrounds"
							}
							blockoverride "info_text" {
								raw_text = "Backgrounds to box in information inside of the main windows."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('sub_backgrounds')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('sub_backgrounds'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('sub_backgrounds')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('sub_backgrounds')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "entry_bg_fancy"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 80 }
										using = entry_bg_fancy
									}
								}

								blockoverride "component_desc" {
									raw_text = "Fancy background (sub tier 1), should be used sparsely within the same window. Avoid using it for example as a list-element."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "entry_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 80 }
										background = {
											using = entry_bg
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Less fancy (sub tier 2)"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "entry_bg_simple"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 80 }
										background = {
											using = entry_bg_simple
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "The most simple background (sub tier 3), works well as list element for example. Can also be put inside of the other 2 sub-backgrounds if you need several steps of boxing in information."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "dark_area"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 50 50 }
										background = {
											using = dark_area
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Multi-purpose dark background. Use when you need a dark box."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use alpha to control intensity."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "light_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 50 50 }
										background = {
											using = light_bg
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Multi-purpose light background. Use when you need a light box."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use alpha to control intensity."
								}
							}
						}
						
						# MISC BACKGROUNDS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Misc Backgrounds"
							}
							blockoverride "info_text" {
								raw_text = "Various backgrounds."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('misc_backgrounds')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('misc_backgrounds'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('misc_backgrounds')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('misc_backgrounds')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "top_illu"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									top_illu = {
										size = { 450 80 }
										
										blockoverride "illu" {
											texture = "gfx/interface/illustrations/top_illus/top_illu_budget.dds"
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used at the top of our main/most important sidepanels. A faded illustration that should have the main information/values inside of it."
								}
								blockoverride "component_warning_note" {
									raw_text = "Do NOT add these randomly in the sidepanels before checking with art since they will need an illustration."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "paper_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 80 }
										background = {
											using = paper_bg
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Paper background. Used mostly for smaller external things outside of the main windows, such as notifications, outliner journal entries, loading tips, map markers. Avoid using this for boxing in information within the main windows, it is used for our graphs within the main windows as an exception."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "circle_bg_simple"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 60 60 }
										background = {
											using = circle_bg_simple
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Circular background (light)."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "circle_bg_simple_dark"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 60 60 }
										background = {
											using = circle_bg_simple_dark
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Circular background (dark)."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "text_edit_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 200 35 }
										background = {
											using = text_edit_bg
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Text editbox."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "dropdown_background"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 80 }
										background = {
											using = dropdown_background
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Dropdown background."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "blurry_dark_background"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 40 40 }
										background = {
											using = blurry_dark_background
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Blurry dark blob. Use as a shadow underneath a value/number if you need it to be more visible in contrast."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use alpha to control intensity."
								}
							}
						}
					}

					# HEADERS
					vbox = {
						name = "headers"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'headers' )]"
						layoutpolicy_horizontal = expanding
						
						# HEADER SETUP
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Header Setup"
							}
							blockoverride "info_text" {
								raw_text = "How the headers are set up."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('header_setup')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('header_setup'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('header_setup')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('header_setup')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "header_color"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									icon = {
										size = { 450 80 }
										using = header_color
									}
								}

								blockoverride "component_desc" {
									raw_text = "Header color. The base that all headers use."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Tweak the color of ALL headers in the game by changing 'gfx/interface/backgrounds/header_color.dds'."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "header_graphical_properties"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									icon = {
										size = { 450 80 }
										using = header_graphical_properties
									}
								}

								blockoverride "component_desc" {
									raw_text = "Header graphical properties."
								}
								blockoverride "component_implementation_note" {
									raw_text = "In this template you can tweak the textures ( applied as modify_textures )."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "top_header_bg"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									icon = {
										size = { 450 80 }
										using = top_header_bg
									}
								}

								blockoverride "component_desc" {
									raw_text = "Top header background, the big headers that are on top of all the main windows (side panels, fullscreens and popups)."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Here you can apply shadings or similar things that you want all the top headers to have."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "sidepanel_top_header"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = { 
										size = { 450 80 }
										
										using = sidepanel_top_header
									}
								}

								blockoverride "component_desc" {
									raw_text = "The frame (in this case the sidepanel frame) are put on top and its corresponding mask are put as modify_texture to mask the header. The decorative pattern are also on top as modify_texture."
								}
							}
						}
						
						# MAIN/TOP HEADERS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Main/Top Headers"
							}
							blockoverride "info_text" {
								raw_text = "The headers on top of the main windows (sidepanels, fullscreens, popups)."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('main_headers')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('main_headers'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('main_headers')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('main_headers')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "sidepanel_top_header"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 560 102 }
										using = sidepanel_top_header
										
										textbox = {
											autoresize = yes
											raw_text = "The header used for our sidepanels."
											parentanchor = center
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fullscreen_top_header"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 1500 92 }
										fullscreen_top_header = {
											size = { 100% 100% }
											parentanchor = center
											position = { 0 0 }
											
											textbox = {
												autoresize = yes
												raw_text = "The header used for our fullscreens."
												parentanchor = center
												position = { 0 10 }
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "popup_top_header"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 1500 82 }
										popup_top_header = {
											
											textbox = {
												autoresize = yes
												raw_text = "The header used for our popups (the framing is part of the frame for the entire popup window)."
												parentanchor = center
												position = { 0 0 }
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
						}
						
						# SUB HEADERS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Sub Headers"
							}
							blockoverride "info_text" {
								raw_text = "Smaller headers further down the hierarchy."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('sub_headers')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('sub_headers'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('sub_headers')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('sub_headers')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_header"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									default_header = {
										blockoverride "text" {
											raw_text = "Insert a centered text"
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "Default sub header. Use to divide larger/main sections within the main windows."
								}
								blockoverride "component_implementation_note" {
									raw_text = "These are adapted in width for the sidepanels. If you use them in other places or any type of dynamic layout for example in the fullscreens you need to blockoverride size and use layoutpolicies for width."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_header_2texts"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									default_header_2texts = {
										blockoverride "text1" {
											raw_text = "Insert a left text"
										}
										blockoverride "text2" {
											raw_text = "Insert a right text"
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "Same as above but use when you need 2 texts."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_header_clean"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 600 160 }
										
										default_header_clean = {
											parentanchor = top|hcenter
											blockoverride "text" {
												raw_text = "Insert a centered text"
											}
										}
										
										widget = {
											size = { 560 100 }
											parentanchor = bottom|hcenter
											
											using = entry_bg_fancy
											
											default_header_clean = {
												blockoverride "text" {
													raw_text = "Example with header masked out so shape follows the frame."
												}
												blockoverride "header_mask" {
													using = frame_small_mask_top
												}
												blockoverride "size" {
													size = { 100% 42 }
												}
											}
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "Cleaner version without the decoration on the sides. Used primarily when you need to mask out the header to work with a certain frame."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_header_2texts_clean"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									default_header_2texts_clean = {
										blockoverride "text1" {
											raw_text = "Insert a left text"
										}
										blockoverride "text2" {
											raw_text = "Insert a right text"
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "Same as above but use when you need 2 texts."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_header_clean_faded"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									default_header_clean_faded = {
										blockoverride "text" {
											raw_text = "Insert a centered text"
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "Cleaner version (faded). Use when there is not a clear border or frame on the sides of the header."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "dark_area"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									flowcontainer = {
										direction = vertical
										spacing = 15
										
										icon = {
											size = { 500 30 }
											using = dark_area
										}
										icon = {
											size = { 500 30 }
											using = dark_area
											
											modify_texture = {
												texture = "gfx/interface/masks/fade_horizontal_center.dds"
												blend_mode = alphamultiply
											}
											
											textbox = {
												autoresize = yes
												parentanchor = center
												raw_text = "gfx/interface/masks/fade_horizontal_center.dds"
												align = nobaseline
											}
										}
										icon = {
											size = { 500 30 }
											using = dark_area
											
											modify_texture = {
												texture = "gfx/interface/masks/fade_horizontal_left.dds"
												blend_mode = alphamultiply
											}
											
											textbox = {
												autoresize = yes
												parentanchor = center
												raw_text = "gfx/interface/masks/fade_horizontal_left.dds"
												align = nobaseline
											}
										}
										icon = {
											size = { 500 30 }
											using = dark_area
											
											modify_texture = {
												texture = "gfx/interface/masks/fade_horizontal_right.dds"
												blend_mode = alphamultiply
											}
											
											textbox = {
												autoresize = yes
												parentanchor = center
												raw_text = "gfx/interface/masks/fade_horizontal_right.dds"
												align = nobaseline
											}
										}
									}
								}
								blockoverride "component_desc" {
									raw_text = "The dark area template can be used when you need a more subtle header. Can be combined with our masks to create fadings."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use alpha on the dark_area to control how dark the header is, and use alpha on the modify_texture (mask) to control how much it should fade."
								}
							}
						}
					}
					
					# FRAMES
					vbox = {
						name = "frames"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'frames' )]"
						layoutpolicy_horizontal = expanding

						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "popup_bg_frame"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								widget = {
									size = { 500 180 }
									
									popup_bg_frame = {}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Frame used for windows/popups (free-floaty windows outside of the main windows)."
							}
							blockoverride "component_implementation_note" {
								raw_text = "It is used together with popup_bg.dds which contain the dropshadow."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "popup_bg_frame_frontend"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								widget = {
									size = { 500 180 }
									popup_bg_frame_frontend = {}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Frame used for windows/popups in the application flow/frontend."
							}
							blockoverride "component_warning_note" {
								raw_text = "Has limitations to how swirly etc it can be due to the layouts of the different frontend popups."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "frame_small"
							}
							blockoverride "component_name_type" {
								raw_text = "(template)"
							}

							blockoverride "component_area" {
								icon = {
									size = { 300 100 }
									using = frame_small
								}
							}

							blockoverride "component_desc" {
								raw_text = "Small decorative frame. Used for example in the entry_bg_fancy template but can be used in other places as well."
							}
							blockoverride "component_implementation_note" {
								raw_text = "Always make sure to combine it with frame_small_mask (template) on whatever background you use inside this frame."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "simple_frame"
							}
							blockoverride "component_name_type" {
								raw_text = "(template)"
							}

							blockoverride "component_area" {
								icon = {
									size = { 200 70 }
									using = simple_frame
								}
							}

							blockoverride "component_desc" {
								raw_text = "Small clean frame."
							}
							blockoverride "component_implementation_note" {
								raw_text = "Always make sure to combine it with simple_frame_mask (template) on whatever background you use inside this frame."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "gfx/interface/backgrounds/side_frame.dds"
							}
							blockoverride "component_name_type" {
								raw_text = "(dds)"
							}

							blockoverride "component_area" {
								icon = {
									texture = "gfx/interface/backgrounds/side_frame.dds"
									texture_density = 2
								}
							}

							blockoverride "component_desc" {
								raw_text = "Side borders for our sidepanels."
							}
							blockoverride "component_implementation_note" {
								raw_text = "Make sure they match with the sidepanel_top_header."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "gfx/interface/backgrounds/round_frame_dec.dds"
							}
							blockoverride "component_name_type" {
								raw_text = "(dds)"
							}

							blockoverride "component_area" {
								icon = {
									texture = "gfx/interface/backgrounds/round_frame_dec.dds"
									size = { 120 120 }
								}
							}

							blockoverride "component_desc" {
								raw_text = "Round decorative background frame. Use whenever you need a circular frame and there is room for fancyness."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "gfx/interface/backgrounds/round_button_bg.dds"
							}
							blockoverride "component_name_type" {
								raw_text = "(dds)"
							}

							blockoverride "component_area" {
								icon = {
									texture = "gfx/interface/backgrounds/round_button_bg.dds"
									size = { 50 50 }
								}
							}

							blockoverride "component_desc" {
								raw_text = "Clean round background frame for smaller things."
							}
							blockoverride "component_warning_note" {
								raw_text = "OBS! This one has nothing to do with buttons, we might want to do a search+replace on the name of this."
							}
						}
					}
					
					# DIVIDERS
					vbox = {
						name = "dividers"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'dividers' )]"
						layoutpolicy_horizontal = expanding
						
						vbox = {
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "divider_clean"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 20 }
										divider_clean = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Our most common divider, works well for many items in a list."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "divider_decorative"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 20 }
										divider_decorative = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Divider with decoration, should be avoided in list items where they are tightly packed together."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vertical_divider"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										vertical_divider = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Vertical divider (with fading)."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vertical_divider_full"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										vertical_divider_full = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Full vertical divider (less fading, goes all the way up/down to create a more distinct division)."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vertical_divider_stronger_full"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										vertical_divider_stronger_full = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Full vertical divider (thicker to create an even more distinct division). Used for example in war/battle/diplo play screens where we divide the two sides."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vertical_divider_strongest_full"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										vertical_divider_strongest_full = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Full vertical divider (thicker to create an even more distinct division). Used for example in war/battle/diplo play screens where we divide the two sides."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "divider_gold"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									widget = {
										size = { 300 100 }
										divider_gold = {
											parentanchor = center
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Divider used in the tutorial popups."
								}
							}
						}
					}
					
					# PROGRESSBARS
					vbox = {
						name = "progressbars"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'progressbars' )]"
						layoutpolicy_horizontal = expanding

						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "default_progressbar_horizontal"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								default_progressbar_horizontal = {
									size = { 300 30 }
									blockoverride "values" {
										value = 60
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Default progressbar."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "bad_progressbar_horizontal"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								bad_progressbar_horizontal = {
									size = { 300 30 }
									blockoverride "values" {
										value = 60
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Bad/negative progressbar."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "green_progressbar_horizontal"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								green_progressbar_horizontal = {
									size = { 300 30 }
									blockoverride "values" {
										value = 60
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Green progressbar (Used for the date/time progress when game is unpaused)."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "gold_progressbar_horizontal"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								gold_progressbar_horizontal = {
									size = { 300 30 }
									blockoverride "values" {
										value = 60
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Gold progressbar (used for things involving money)."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "white_progressbar_horizontal"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								white_progressbar_horizontal = {
									size = { 300 30 }
									blockoverride "values" {
										value = 60
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "White progressbar, should always have a scripted color."
							}
						}

						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "white_progressbar_vertical"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								white_progressbar_vertical = {
									blockoverride "values" {
										value = 60
									}
									size = { 12 60 }
								}
							}

							blockoverride "component_desc" {
								raw_text = "Used for Morale and such, should always have a scripted color."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "double_direction_progressbar"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								double_direction_progressbar = {
									blockoverride "value_left" {
										value = -0.4
									}
									blockoverride "value_right" {
										value = 0
									}
									size = { 150 15 }
								}
							}

							blockoverride "component_desc" {
								raw_text = "Double direction bar, used for bars that can be drained into negative values, for example the values in topbar."
							}
							blockoverride "component_implementation_note" {
								raw_text = "Blockoverride value_left and value_right."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "double_direction_progressbar_gold"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								double_direction_progressbar_gold = {
									blockoverride "value_left" {
										value = 0
									}
									blockoverride "value_right" {
										value = 0.7
									}
									size = { 150 15 }
								}
							}

							blockoverride "component_desc" {
								raw_text = "Double direction bar, gold version used for things involving money."
							}
							blockoverride "component_implementation_note" {
								raw_text = "Blockoverride value_left and value_right."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "round_progress_default"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								round_progress_default = {
									size = { 60 60 }
									value = 0.7
								}
							}

							blockoverride "component_desc" {
								raw_text = "Default round progressbar."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "round_progress_bad"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								round_progress_bad = {
									size = { 60 60 }
									value = 0.7
								}
							}

							blockoverride "component_desc" {
								raw_text = "Round progressbar (bad/negative)."
							}
						}
					}

					# ICONS
					vbox = {
						name = "icons"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'icons' )]"
						layoutpolicy_horizontal = expanding
						
						ui_guide_component_top_info = {
							blockoverride "component_top_info" {
								raw_text = "Icons can be found in 'gfx/interface/icons/' and should have the same path in Art SVN."
							}
						}

						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "Simple/flat icons"
							}
							blockoverride "component_name_type" {
								raw_text = ".dds files"
							}

							blockoverride "component_area" {
								hbox = {
									spacing = 5
									
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/ai_attitude_icons/rebellious.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/ai_attitude_icons/genial.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/ideology_icons/reactionary.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/ig_icons/intelligensia.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/ig_trait_icons/work_to_rule.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/notification_icons/diplomatic_play.dds"
									}
									icon = {
										size = { 40 40 }
										texture = "gfx/interface/icons/institution_icons/social_security.dds"
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Some examples of different icons that have a more simplistic style."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "Rendered icons"
							}
							blockoverride "component_name_type" {
								raw_text = ".dds files"
							}

							blockoverride "component_area" {
								hbox = {
									spacing = 5
									
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/alert_icons/bureaucracy_shortage.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/event_icons/event_skull.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/event_icons/event_trade.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/invention_icons/bessemer_process.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/invention_icons/rifling.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/pops_icons/informal_workers.dds"
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/religion_icons/protestant.dds"
									}
								}
							}

							blockoverride "component_desc" {
								raw_text = "Some examples of different icons that are rendered with more details/volume/colors."
							}
						}
					}

					# TEXT
					vbox = {
						name = "text"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'text' )]"
						layoutpolicy_horizontal = expanding
						
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Formats"
							}
							blockoverride "info_text" {
								raw_text = "Defined in 'gui/textformatting.gui'"
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('formats')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('formats'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('formats')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('formats')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "default_text"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#default_text"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Our default text."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "variable / V"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#variable"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for variables, usually values."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "header / h1"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#header"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for headers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "title"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#title"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for titles."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "negative_value / N"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#negative_value"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for negative/bad text."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "positive_value / P"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#positive_value"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for positive/good text."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "zero_value / Z"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#zero_value"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for zero/neutral values."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltippable_concept"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#tooltippable_concept"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for our game concepts that you can tooltip to read more about."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "instruction / I"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#instruction"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for instructions."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "lore"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#lore"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for lore / flavour text."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltip_header / T"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#tooltip_header"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Tooltip headers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltip_sub_header / S"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#tooltip_sub_header"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Tooltip sub headers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltippable_name"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#tooltippable_name"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Names such as Characters, States, Countries etc (tooltippable)."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltippable"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#tooltippable"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Text that are not numbers or names but they are still tooltippable."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "maximum"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#maximum"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for the maximum cap of a number."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "todo"
								}
								blockoverride "component_name_type" {
									raw_text = "(format)"
								}

								blockoverride "component_area" {
									text_single = {
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										default_format = "#todo"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Text/values that are not yet implemented by code."
								}
							}
						}
						
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Fonts and sizes"
							}
							blockoverride "info_text" {
								raw_text = "Defined in 'gui/shared/defaults.gui'. Note: Font sizes can decrease in size whenever fontsize_min is being used."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('font_sizes')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('font_sizes'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('font_sizes')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('font_sizes')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "regular_font ( EBGaramond 17 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Our default font and size. If you don't use any font or fontsize template on a textbox this will be used automatically."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "tooltip_font ( OpenSans 15 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = tooltip_font
									}
								}

								blockoverride "component_desc" {
									raw_text = "Tooltip font and size."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_large ( 20 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_large
									}
								}

								blockoverride "component_desc" {
									raw_text = "Large size."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_xl ( 22 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_xl
									}
								}

								blockoverride "component_desc" {
									raw_text = "XL size."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_xxl ( 26 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_xxl
									}
								}

								blockoverride "component_desc" {
									raw_text = "XXL size."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_mega ( 30 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_mega
									}
								}

								blockoverride "component_desc" {
									raw_text = "Mega size."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_medium ( OpenSans 14 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_medium
									}
								}

								blockoverride "component_desc" {
									raw_text = "Medium size."
								}
								blockoverride "component_warning_note" {
									raw_text = "Not quite sure why we have this one."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_small ( OpenSans 12 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_small
									}
								}

								blockoverride "component_desc" {
									raw_text = "Small size."
								}
								blockoverride "component_warning_note" {
									raw_text = "Should be avoided as much as possible since this is harder to read, especially when UI is scaled down."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "fontsize_xsmall ( OpenSans 10 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = fontsize_xsmall
									}
								}

								blockoverride "component_desc" {
									raw_text = "Extra small size."
								}
								blockoverride "component_warning_note" {
									raw_text = "Should be avoided as much as possible since this is harder to read, especially when UI is scaled down."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "header_font ( PlayfairDisplay ) and header_font_size ( 26 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(templates)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = header_font
										using = header_font_size
									}
								}

								blockoverride "component_desc" {
									raw_text = "Header font and header font size. The font PlayfairDisplay is also used on the map."
								}
								blockoverride "component_implementation_note" {
									raw_text = "These 2 templates are in most cases combined."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "header_font_fancy ( Our own font made by outsourcing ) and header_font_fancy_size ( 46 )"
								}
								blockoverride "component_name_type" {
									raw_text = "(templates)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										align = nobaseline
										maximumsize = { 400 -1 }
										multiline = yes
										raw_text = "Flygande bäckasiner söka hwila på mjuka tuvor"
										using = header_font_fancy
										using = header_font_fancy_size
									}
								}

								blockoverride "component_desc" {
									raw_text = "Fancy header font and header fancy font size."
								}
								blockoverride "component_implementation_note" {
									raw_text = "These 2 templates are in most cases combined."
								}
							}
						}
					}

					# CHARACTERS
					vbox = {
						name = "characters"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'characters' )]"
						layoutpolicy_horizontal = expanding
						
						ui_guide_component_top_info = {
							blockoverride "component_top_info" {
								raw_text = "Avoid using the portrait base to add new sizes of portraits, always use one of these pre-defined sizes. The portrait sizes are always slightly larger than their widget to make room for high hats but the hats won't affect any layouts. The hats are cut off by default but whenever there is room and the hat won't interfere with any information above the portrait you can turn on the hats with blockoverride show_hat."
							}
						}
						
						# CHARACTERS WITH ROLES
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Characters"
							}
							blockoverride "info_text" {
								raw_text = "Characters with a role such as ruler, general, admiral, politician, heir. They always have a frame with the exception when we put them on a background/environment (Commanders in battle for example)."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('characters_roles')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('characters_roles'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('characters_roles')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('characters_roles')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "Larger portraits showing torso, use for places when there is only a few portraits and there is enough room. They are animated by default so avoid using these for long lists etc because of performance issues."
								}
							}

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_xl_torso"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_xl_torso = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "XL, Torso"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_large_torso"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_large_torso = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Large, Torso"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_medium_torso"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_medium_torso = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Medium, Torso"
								}
							}
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "Smaller portraits showing only the head, use for smaller areas in the UI and for long lists. They are not animated."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_medium"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_medium = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Medium, Head only"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_small2"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_small2 = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Small 2, Head only"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_small"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_small = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Small, Head only"
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "character_portrait_mini"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									character_portrait_mini = {
										datacontext = "[AccessPlayer.AccessRuler]"
									}
								}

								blockoverride "component_desc" {
									raw_text = "Mini, Head only"
								}
							}
						}
						
						# POPS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Pops"
							}
							blockoverride "info_text" {
								raw_text = "Pops are the faces of the population, these will never have a frame."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('characters_pops')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('characters_pops'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('characters_pops')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('characters_pops')]"
							layoutpolicy_horizontal = expanding
							
							#ui_guide_component_top_info = {
							#	blockoverride "component_top_info" {
							#		raw_text = "Larger portraits showing torso, use for places when there is only a few portraits and there is enough room. They are animated by default so avoid using these for long lists etc because of performance issues."
							#	}
							#}

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "pop_portrait_big"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									#pop_portrait_big = {
									#	datacontext = "need context for UI library"
									#}
								}

								blockoverride "component_desc" {
									raw_text = "Big pop portrait (Animated)"
								}
								blockoverride "component_warning_note" {
									raw_text = "Currently can't be viewed here, lacks datacontext."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "pop_portrait_medium"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									#pop_portrait_medium = {
									#	datacontext = "need context for UI library"
									#}
								}

								blockoverride "component_desc" {
									raw_text = "Medium pop portrait (Animated)"
								}
								blockoverride "component_warning_note" {
									raw_text = "Currently can't be viewed here, lacks datacontext."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "pop_portrait_simple"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}

								blockoverride "component_area" {
									#pop_portrait_simple = {
									#	datacontext = "need context for UI library"
									#}
								}

								blockoverride "component_desc" {
									raw_text = "Simple pop portrait (Non-animated and cached, for UI's with lots of pops, long lists etc.)"
								}
								blockoverride "component_warning_note" {
									raw_text = "Currently can't be viewed here, lacks datacontext."
								}
							}
						}
					}

					# FLAGS
					vbox = {
						name = "flags"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'flags' )]"
						layoutpolicy_horizontal = expanding
						
						ui_guide_component_top_info = {
							blockoverride "component_top_info" {
								raw_text = "Avoid creating new sizes of flags, instead use one of these pre-defined sizes."
							}
						}
						
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "fancy_flag"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								fancy_flag = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Fancier version with integrated rank-badge, used in the topbar. The hanging cloth behind the flag is colored by country color."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "rank_badge"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								rank_badge = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Rank-badge. Can be used to accompany the flags with tier-frames, SHOULD be used together with the wavy, animated flag (since that one does not show any tier otherwise)."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "large_flag"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								large_flag = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Large flag."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "flag"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								flag = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Normal flag."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "small_flag"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								small_flag = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Small flag."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "tiny_flag"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								tiny_flag = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Tiny flag."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "tiny_flag_no_interact"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								tiny_flag_no_interact = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Tiny flag no interact, can be used for tiny flags that should not be clickable or tooltippable."
							}
						}
						ui_guide_component_area = {
							blockoverride "component_name" {
								raw_text = "flag_icon"
							}
							blockoverride "component_name_type" {
								raw_text = "(type)"
							}

							blockoverride "component_area" {
								flag_icon = {
									datacontext = "[GetPlayer]"
								}
							}

							blockoverride "component_desc" {
								raw_text = "Used for non-existing nations."
							}
						}
						
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Country Tier Assets"
							}
							blockoverride "info_text" {
								raw_text = "Assets used for the tiers of countries. Found in 'gfx/interface/flag/'."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('country_tier_assets')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('country_tier_assets'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('country_tier_assets')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('country_tier_assets')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "Frames 1-4: Unrecognized Power, Minor Power, Major Power, Great Power. The frames of these are set with code."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "flag_power_large.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/flag_power_large.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Large frame."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "flag_power_normal.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/flag_power_normal.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Normal frame."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "flag_power_small.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/flag_power_small.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Small frame."
								}
							}

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "flag_power_tiny.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/flag_power_tiny.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Tiny frame."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "power_rank_01.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/power_rank_01.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Texture used in the rank_badge for Unrecognized Powers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "power_rank_02.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/power_rank_02.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Texture used in the rank_badge for Minor Powers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "power_rank_03.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/power_rank_03.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Texture used in the rank_badge for Major Powers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "power_rank_04.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/power_rank_04.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Texture used in the rank_badge for Great Powers."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "power_rank_05.dds"
								}
								blockoverride "component_name_type" {
									raw_text = "(dds)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/flag/power_rank_05.dds"
										texture_density = 2
									}
								}

								blockoverride "component_desc" {
									raw_text = "Texture used in the rank_badge for Great Powers."
								}
							}
						}
					}

					# ANIMATIONS
					vbox = {
						name = "animations"
						visible = "[GetVariableSystem.HasValue( 'ui_components_tabs', 'animations' )]"
						layoutpolicy_horizontal = expanding
						
						# ANIMATIONS INFO
						ui_guide_component_top_info = {
							blockoverride "component_top_info" {
								raw_text = "Most of our animations are triggered either via '_show' / '_hide' (must be accompanied with a visible state to work) or 'trigger_on_create = yes' (is triggered when the widget is created). You can also trigger animations via onclicks, onmousehierarchyenter, onmousehierarchyleave etc. You can read more about how animations work on confluence. "
							}
						}
						
						# CURVES
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Curves"
							}
							blockoverride "info_text" {
								raw_text = "The animation bezier curves templates available. You can create these at 'cubic-bezier.com'."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('curves')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('curves'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('curves')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('curves')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Animation_Curve_Default"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_Animation_Curve_Default')]"
									}
								}

								blockoverride "component_area" {
									widget = {
										size = { 500 40 }
										
										icon = {
											size = { 40 40 }
											texture = "gfx/interface/backgrounds/round_button_bg.dds"
											
											position = { 0 0 }
											
											state = {
												name = ui_guide_Animation_Curve_Default
												using = Animation_Curve_Default
												duration = 1.5
												
												position_x = 500
												next = reset
											}
											state = {
												name = reset
												duration = 0
												
												position_x = 0
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Our default curve, the most commonly used. Has ease in and ease out."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use this template within any animation state."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Animation_Curve_EaseOut"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_Animation_Curve_EaseOut')]"
									}
								}

								blockoverride "component_area" {
									widget = {
										size = { 500 40 }
										
										icon = {
											size = { 40 40 }
											texture = "gfx/interface/backgrounds/round_button_bg.dds"
											
											position = { 0 0 }
											
											state = {
												name = ui_guide_Animation_Curve_EaseOut
												using = Animation_Curve_EaseOut
												duration = 1.5
												
												position_x = 500
												next = reset
											}
											state = {
												name = reset
												duration = 0
												
												position_x = 0
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Ease out curve."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use this template within any animation state."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Animation_Curve_EaseIn"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_Animation_Curve_EaseIn')]"
									}
								}

								blockoverride "component_area" {
									widget = {
										size = { 500 40 }
										
										icon = {
											size = { 40 40 }
											texture = "gfx/interface/backgrounds/round_button_bg.dds"
											
											position = { 0 0 }
											
											state = {
												name = ui_guide_Animation_Curve_EaseIn
												using = Animation_Curve_EaseIn
												duration = 1.5
												
												position_x = 500
												next = reset
											}
											state = {
												name = reset
												duration = 0
												
												position_x = 0
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Ease in curve."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use this template within any animation state."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "Animation_Curve_FastSlow"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_Animation_Curve_FastSlow')]"
									}
								}

								blockoverride "component_area" {
									widget = {
										size = { 500 40 }
										
										icon = {
											size = { 40 40 }
											texture = "gfx/interface/backgrounds/round_button_bg.dds"
											
											position = { 0 0 }
											
											state = {
												name = ui_guide_Animation_Curve_FastSlow
												using = Animation_Curve_FastSlow
												duration = 1.5
												
												position_x = 500
												next = reset
											}
											state = {
												name = reset
												duration = 0
												
												position_x = 0
											}
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Fast slow curve."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Use this template within any animation state."
								}
							}
						}

						# MISC ANIMATIONS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Misc Animations"
							}
							blockoverride "info_text" {
								raw_text = "Various different animations."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('misc_animations')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('misc_animations'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('misc_animations')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('misc_animations')]"
							layoutpolicy_horizontal = expanding

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "checkmark_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(_show)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_checkmark')]"
									}
								}

								blockoverride "component_area" {
									checkmark_animation = {
										blockoverride "trigger" {
											name = ui_guide_checkmark
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Use if you need a checkmark with more visible feedback."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Blockoverride the 'visible' block."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "cogwheel_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									cogwheel_animation = {}
								}

								blockoverride "component_desc" {
									raw_text = "Used for things that are loading."
								}
								blockoverride "component_warning_note" {
									raw_text = "This is a container and can not have a scripted size, since the 2 cogwheels are specially adapted to fit/animate together."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "cogwheel_animation_small"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									cogwheel_animation_small = {}
									cogwheel_animation_small = {
										size = { 20 20 }
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for things that are loading. Smaller version."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Just 1 cogwheel, you can change the size of this one."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "look_at_me_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									icon = {
										size = { 70 70 }
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
										using = look_at_me_animation
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for icons/glows or other textures that you want the player to look at."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "look_at_me_text_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									textbox = {
										autoresize = yes
										raw_text = "Look at me!"
										using = look_at_me_text_animation
									}
								}

								blockoverride "component_desc" {
									raw_text = "Used for texts that you want the player to look at (Lowest alpha is still fairly high so that you can always read the text)."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "shimmer_fade_in"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_shimmer_fade_in')]"
									}
								}

								blockoverride "component_area" {
									icon = {
										size = { 70 70 }
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
										using = shimmer_fade_in
										blockoverride "trigger" {
											trigger_on_create = yes
											name = ui_guide_shimmer_fade_in
										}
									}
								}

								blockoverride "component_desc" {
									raw_text = "Use if you want something to show up in a bit more fancy way."
								}
								blockoverride "component_implementation_note" {
									raw_text = "Blockoverride 'trigger'."
								}
								blockoverride "component_warning_note" {
									raw_text = "Can only be used on textures."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "shimmer"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									button = {
										size = { 180 30 }
										raw_text = "I shine!"
										using = default_button
										using = shimmer
									}
									icon = {
										size = { 50 50 }
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
										using = shimmer
									}
								}

								blockoverride "component_desc" {
									raw_text = "Looping shimmer animation. Use if you want to highlight something/catch attention or just if you need a fancy shimmer."
								}
								blockoverride "component_warning_note" {
									raw_text = "Can only be used on textures."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "rotate_glow_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									icon = {
										using = rotate_glow_animation
										size = { 100 100 }
										alpha = 0.8
									}
								}

								blockoverride "component_desc" {
									raw_text = "Rotating glow golden."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "rotate_glow_animation_02"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									icon = {
										using = rotate_glow_animation_02
										size = { 100 100 }
										alpha = 0.8
									}
								}

								blockoverride "component_desc" {
									raw_text = "Rotating glow golden. Version 2."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "rotate_glow_blue"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									icon = {
										using = rotate_glow_blue
										size = { 100 100 }
										alpha = 0.8
									}
								}

								blockoverride "component_desc" {
									raw_text = "Rotating glow blue."
								}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "rotate_glow_overlay_blue"
								}
								blockoverride "component_name_type" {
									raw_text = "(template)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(trigger_on_create)"
								}

								blockoverride "component_area" {
									icon = {
										texture = "gfx/interface/backgrounds/round_frame_dec.dds"
										using = rotate_glow_overlay_blue
										size = { 150 150 }
									}
								}

								blockoverride "component_desc" {
									raw_text = "Overlayed rotating glow blue."
								}
								blockoverride "component_warning_note" {
									raw_text = "Can only be used on textures."
								}
							}
						}
						
						# SPECIAL ANIMATIONS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Special Animations"
							}
							blockoverride "info_text" {
								raw_text = "Some examples of more advanced animations."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('special_animations')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('special_animations'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('special_animations')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('special_animations')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "Remember that animations that are triggered in a sequence (the first state triggers the next one, and then that the next and so forth) must have time to finish before they can be played again."
								}
							}

							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "lensbar_mobilized_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(_show)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_lensbar_mobilized_animation')]"
									}
									button = {
										size = { 180 30 }
										raw_text = "Reset Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('ui_guide_lensbar_mobilized_animation_reset')]"
									}
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										
										lensbar_mobilized_animation = {
											resizeparent = yes
											blockoverride "trigger" {
												name = ui_guide_lensbar_mobilized_animation
											}
											blockoverride "trigger_hide" {
												name = ui_guide_lensbar_mobilized_animation_reset
											}
										}
										
										textbox = {
											autoresize = yes
											raw_text = "The animation used on the lens bar when you mobilize."
											parentanchor = center
											position = { 0 10 }
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "v3_logo_animation"
								}
								blockoverride "component_name_type" {
									raw_text = "(type)"
								}
								blockoverride "component_name_type_2" {
									raw_text = "(name = menu_logo_v_start)"
								}
								
								blockoverride "extra_stuff" {
									button = {
										size = { 180 30 }
										raw_text = "Test Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('menu_logo_v_start')]"
									}
									button = {
										size = { 180 30 }
										raw_text = "Reset Animation"
										using = default_button
										onclick = "[PdxGuiTriggerAllAnimations('menu_animation_reset')]"
									}
								}

								blockoverride "component_area" {
									v3_logo_animation = {}
								}
								blockoverride "description_area" {}
							}
						}
						
						# VFX
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "VFX"
							}
							blockoverride "info_text" {
								raw_text = "VFX animations can be put anywhere in the UI and they work as any other widget with position/size etc. You can use the regular animation state system to show/hide the VFX widgets."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('ui_guide_vfx')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('ui_guide_vfx'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('ui_guide_vfx')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('ui_guide_vfx')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "There is a type called 'vfx' that you can use, and then just blockoverride 'entity_instance' to put in the path to your VFX effect. The 'vfx' type has 100% size by default, but you might want to in many cases increase the size for VFX effects (the type has allow_outside since a VFX should never be interactable or part of any layout). Here is a few examples:"
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_entity_ui_sidebar_war"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_entity_ui_sidebar_war
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_entity_ui_to_arms_background"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_entity_ui_to_arms_background
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_ui_plane_war_panel_fire_plane_entity"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_entity_ui_mobilize"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_entity_ui_mobilize
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_entity_ui_situations"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_entity_ui_situations
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "vfx_entity_ui_alert_above_icon"
								}
								blockoverride "component_name_type" {
									raw_text = "(entity_instance)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 200 }
										
										vfx = {
											blockoverride "entity_instance" {
												entity_instance = vfx_entity_ui_alert_above_icon
											}
										}
									}
								}
								blockoverride "description_area" {}
							}
						}
						
						# VIDEOS
						ui_guide_title_and_info = {
							blockoverride "title_text" {
								raw_text = "Videos"
							}
							blockoverride "info_text" {
								raw_text = "You can create videos with any tool you like, but in the end they need to be a bink file (.bk2). These will work like any other widget with position/size etc."
							}
							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle('ui_guide_videos')]"
							}
							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists('ui_guide_videos'))]"
							}
							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists('ui_guide_videos')]"
							}
						}
						
						vbox = {
							visible = "[GetVariableSystem.Exists('ui_guide_videos')]"
							layoutpolicy_horizontal = expanding
							
							ui_guide_component_top_info = {
								blockoverride "component_top_info" {
									raw_text = "There is a type called 'video_icon' that you can use, and then just put in a path to your bink file with video = 'path'. You can put 'loop = no' or 'loop = yes' on them."
								}
							}
							
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "asia_managers_market.bk2"
								}
								blockoverride "component_name_type" {
									raw_text = "(bink video file)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 250 }
										
										video_icon = {
											size = { 100% 100% }
											video = "gfx/event_pictures/asia_managers_market.bk2"
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "unspecific_military_parade.bk2"
								}
								blockoverride "component_name_type" {
									raw_text = "(bink video file)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 250 }
										
										video_icon = {
											size = { 100% 100% }
											video = "gfx/event_pictures/unspecific_military_parade.bk2"
										}
									}
								}
								blockoverride "description_area" {}
							}
							ui_guide_component_area = {
								blockoverride "component_name" {
									raw_text = "europenorthamerica_london_center.bk2"
								}
								blockoverride "component_name_type" {
									raw_text = "(bink video file)"
								}

								blockoverride "component_area" {
									widget = {
										scissor = yes
										size = { 500 250 }
										
										video_icon = {
											size = { 100% 100% }
											video = "gfx/event_pictures/europenorthamerica_london_center.bk2"
										}
									}
								}
								blockoverride "description_area" {}
							}
						}
					}
				}
			}
        }
		
		### UI ART GUIDE
		vbox = {
			visible = "[GetVariableSystem.HasValue( 'top_tabs', 'ui_art_guide' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			### TABS UI ART GUIDE
			hbox = {
				layoutpolicy_horizontal = expanding

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Art Guide 1"

					onclick = "[GetVariableSystem.Set( 'ui_art_guide_tabs', 'artguide_1' )]"
					down = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_1' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Art Guide 2"

					onclick = "[GetVariableSystem.Set( 'ui_art_guide_tabs', 'artguide_2' )]"
					down = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_2' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "Art Guide 3"

					onclick = "[GetVariableSystem.Set( 'ui_art_guide_tabs', 'artguide_3' )]"
					down = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_3' )]"
				}
			}

			### CONTENT / SCROLLAREA
			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_content" {
					
					# 1
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_1' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "Måla fint!"
							using = fontsize_mega
						}
					}
					# 2
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_2' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "Måla inte fult!"
							using = fontsize_mega
						}
					}
					# 3
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ui_art_guide_tabs', 'artguide_3' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "Välj fina färger!"
							using = fontsize_mega
						}
					}
				}
			}
		}
		
		### UX GUIDE
		vbox = {
			visible = "[GetVariableSystem.HasValue( 'top_tabs', 'ux_guide' )]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			### TABS UX GUIDE
			hbox = {
				layoutpolicy_horizontal = expanding

				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "UX Guide 1"

					onclick = "[GetVariableSystem.Set( 'ux_guide_tabs', 'uxguide_1' )]"
					down = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_1' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "UX Guide 2"

					onclick = "[GetVariableSystem.Set( 'ux_guide_tabs', 'uxguide_2' )]"
					down = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_2' )]"
				}
				
				button_tab = {
					layoutpolicy_horizontal = expanding
					raw_text = "UX Guide 3"

					onclick = "[GetVariableSystem.Set( 'ux_guide_tabs', 'uxguide_3' )]"
					down = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_3' )]"
				}
			}

			### CONTENT / SCROLLAREA
			scrollbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				blockoverride "scrollbox_content" {
					
					# 1
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_1' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "UX hej 1"
							using = fontsize_mega
						}
					}
					# 2
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_2' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "UX hej 2"
							using = fontsize_mega
						}
					}
					# 3
					vbox = {
						visible = "[GetVariableSystem.HasValue( 'ux_guide_tabs', 'uxguide_3' )]"
						
						textbox = {
							autoresize = yes
							raw_text = "UX hej 3"
							using = fontsize_mega
						}
					}
				}
			}
		}
		
		expand = {}
    }
	
	# components info
	widget = {
		parentanchor = top|left
		position = { 5 40 }
		alwaystransparent = yes
		
		size = { 0 0 }
		alpha = 0
		
		state = {
			name = ui_components_information_show
			size = { 440 240 }
			alpha = 1
			duration = 0.2
			using = Animation_Curve_Default
		}
		state = {
			name = ui_components_information_hide
			size = { 0 0 }
			alpha = 0
			duration = 0.2
			using = Animation_Curve_Default
		}
		
		background = {
			using = default_bg
			modify_texture = {
				using = simple_frame_mask
			}
		}
		background = {
			using = simple_frame
		}
		
		textbox = {
			parentanchor = center
			autoresize = yes
			multiline = yes
			maximumsize = { 400 -1 }
			raw_text = "These components and their type/template names are for Victoria 3, we have however also copied types/templates from CK3 in order to be able to copy+paste script between the projects for the application flow/frontend. So if you work with the frontend menues you will see other names such as button_standard or Background_Area (Ck3 names), but they are only kept for the names and within those types/templates we are making them use our assets that are shown in here."
		}
	}
}


### TYPES FOR THE UI GUIDE
types ComponentLibrary
{
	type ui_guide_title_and_info = vbox {
        layoutpolicy_horizontal = expanding
		
		margin_top = 5
		
		section_header_button = {
			blockoverride "layout" {
				layoutpolicy_horizontal = expanding
				size = { 0 60 }
			}
			
			blockoverride "left_textbox" {
				text_multi = {
					default_format = "#variable"
					
					block "title_text" {
						raw_text = "title_text"
					}
					autoresize = yes
					min_width = 1880
					max_width = 1880
					using = fontsize_large
					margin = { 10 0 }
					margin_left = 45
				}
			}
			blockoverride "below_textbox" {
				text_multi = {
					alpha = 0.85

					block "info_text" {
						raw_text = "info_text"
					}
					autoresize = yes
					min_width = 1880
					max_width = 1880
					margin = { 10 0 }
					margin_left = 45
				}
				
				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				}
			}
		}
    }
	
    type ui_guide_component_area = vbox {
        layoutpolicy_horizontal = expanding
        margin = { 0 5 }
		
		hbox = {
			layoutpolicy_horizontal = expanding
			
			background = {
				using = dark_area
				alpha = 0.35
			}
			
			text_single = {
				block "component_name" {
					raw_text = "component_name"
				}
				
				autoresize = yes
				margin_left = 10
				align = nobaseline
			}
			text_single = {
				block "component_name_type" {}
				
				autoresize = yes
				margin_left = 10
				align = nobaseline
				
				alpha = 0.5
			}
			
			text_single = {
				block "component_name_2" {}
				
				autoresize = yes
				margin_left = 30
				align = nobaseline
			}
			text_single = {
				block "component_name_type_2" {}
				
				autoresize = yes
				margin_left = 10
				align = nobaseline
				
				alpha = 0.5
			}
			
			widget = { size = { 20 5 }}
			block "extra_stuff" {}
			
			expand = {}
		}

        hbox = {
            layoutpolicy_horizontal = expanding
			
			background = {
				using = dark_area
				alpha = 0.12
			}

            vbox = {
                min_width = 600
                margin = { 0 15 }
                spacing = 10

                block "component_area" {}
            }
			
			block "description_area" {
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					margin = { 15 15 }

					vbox = {
						layoutpolicy_vertical = expanding

						textbox = {
							multiline = yes
							autoresize = yes
							min_width = 1200
							max_width = 1200

							block "component_desc" {}
						}
						textbox = {
							multiline = yes
							autoresize = yes
							min_width = 1200
							max_width = 1200

							block "component_implementation_note" {}
							default_format = "#instruction"
						}
						textbox = {
							multiline = yes
							autoresize = yes
							min_width = 1200
							max_width = 1200

							block "component_warning_note" {}
							default_format = "#N"
						}

						expand = {}
					}

					expand = {}
				}
			}
        }
    }
	
	type ui_guide_component_top_info = hbox {
        layoutpolicy_horizontal = expanding

		background = {
			using = dark_area
			alpha = 0.5
		}
		
		textbox = {
			margin = { 0 5 }
			multiline = yes
			autoresize = yes
			min_width = 1850
			max_width = 1850
			align = nobaseline

			block "component_top_info" {}
		}
    }

    type debug_square = icon {
        size = { 100% 100% }
		parentanchor = center
		widgetanchor = center
        texture = "gfx/interface/debug_square.png"
        spriteType = Corneredtiled
        spriteborder = { 2 2 }
    }
}

template debug_square
{
	background = {
		texture = "gfx/interface/debug_square.png"
		spriteType = Corneredtiled
		spriteborder = { 1 1 }
		alpha = 0.5
	}
}
