# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types commander_panel_types
{
	type character_with_background = widget {
		
		# background
		widget = {
			size = { 100% 100% }
			position = { 0 1 }
			using = Animation_Character_Panel_Refresh
			
			# Ruler General
			widget = {
				size = { 100% 100% }
				visible = "[And( Character.IsRuler, Character.IsGeneral )]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_rulergeneral.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler_general_glow
					}				
				}
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler_smoke
					}				
				}
			}

			# Agitator
			widget = {
				size = { 100% 100% }
				visible = "[Character.IsAgitator]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_agitator.dds"
					fittype = centercrop
				}
			}

			# Politician
			widget = {
				size = { 100% 100% }
				visible = "[And(And(Character.IsPolitician, Not(Character.IsRuler)),Not(Character.IsAgitator))]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_politician.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_politician_godrays
					}					
				}

				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_politician_candles
					}					
				}
				
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler_smoke
					}					
				}
			}

			# Ruler
			widget = {
				size = { 100% 100% }
				visible = "[And(Character.IsRuler, Not(Character.IsGeneral))]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_ruler.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler
					}
				}

				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler_smoke
					}
				}
			}

			# Ruler Heir
			widget = {
				size = { 100% 100% }
				visible = "[And(Character.IsRuler, Character.IsHeir)]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_ruler.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler
					}
				}

				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_ruler_smoke
					}
				}
			}

			# General
			widget = {
				size = { 100% 100% }
				visible = "[And(And(Character.IsGeneral,And(Not(Character.IsRuler),Not(Character.IsHeir))),Not(Character.IsAgitator))]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_general.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_general_glow
					}
				}
			}

			# Admiral
			widget = {
				size = { 100% 100% }
				visible = "[And(Character.IsAdmiral,Not(Character.IsAgitator))]"
				
				background = {
					texture = "gfx/interface/character_panel/backgrounds/char_role_admiral.dds"
					fittype = centercrop
				}

				# VFX
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_admiral_glow
					}
				}
				vfx = {
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_admiral_waves
					}
				}

				# VFX birds
				vfx = {
					blockoverride "camera_position" {
						camera_position = { 0 0 15 }
					}
					blockoverride "entity_instance" {
						entity_instance = vfx_entity_ui_bg_char_admiral_seagulls
					}			
				}
			}	
		}

		widget = {
			size = { 100% 100% }
			
			background = {
				texture = "gfx/interface/character_panel/char_bg_frame.dds"
				margin_left = 18
				margin_right = 10
				margin_bottom = 10
				spriteType = Corneredtiled
				
				spriteborder_left = 200
				spriteborder_right = 60
				spriteborder_top = 170
				spriteborder_bottom = 180
				
				texture_density = 2
			}
		}

		# character
		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('agitator_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[Character.IsAgitator]"
		}

		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('politician_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[Character.IsPolitician]"
		}

		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('ruler_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[Character.IsRuler]"
		}

		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('admiral_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[Character.IsAdmiral]"
		}

		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('general_environment', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[And( Character.IsRuler, Character.IsGeneral )]"
		}

		character_portrait_base_no_mask = {
			ignore_in_debug_draw = yes
			parentanchor = left|bottom
			
			block "character_layout" {
				position = { 50 50 }
				size = { 250 400 }
			}

			blockoverride "portrait_size" {
				block "character_portrait_size" {
					size = { 620 620 }
				}
			}

			blockoverride "portrait_texture" {
				portrait_texture = "[Character.GetAnimatedPortrait('general_environment_02', 'camera_leader', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
			}

			blockoverride "portrait_icons" {}
			blockoverride "tooltip" {}
			blockoverride "show_hat" {}
			visible = "[And(Character.IsGeneral,And(Not(Character.IsRuler),Not(Character.IsHeir)))]"
		}
		
		icon = {
			using = dark_area
			parentanchor = bottom|hcenter
			size = { 100% 50% }
			alpha = 0.85
			position = { 0 2 }

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_top.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
			}
		}

		character_interactions_button = {
			name = "tutorial_highlight_character_panel_promote_button"
		}

		# Heir Portrait
		widget = {
			datacontext = "[Character.AccessInterestGroup.AccessCountry]"
			visible = "[And(Character.IsRuler, And(Not(Character.IsHeir), Country.AccessHeir.IsValid))]"
			parentanchor = left|bottom
			size = { 110 110 }
			position = { 10 -10 }
			
			character_portrait_large = {
				size = { 100% 100% }
				datacontext = "[Country.AccessHeir]"

				blockoverride "show_hat" {}
				blockoverride "highlight" {}
			}
		}
	}
	
	type commander_panel = default_block_window_two_lines {
		name = "commander_panel"

		datacontext = "[CommanderPanel.AccessCharacter]"

		blockoverride "animation_state_block" {
			datacontext = "[CommanderPanel.AccessCharacter]"

			state = {
				name = _show

				on_start = "[PdxGuiTriggerAllAnimations(Select_CString( CommanderPanel.AccessCharacter.IsAgitator, 'agitator', 'not_agitator' ))]"
			}

			state = {
				name = not_agitator

				start_sound = {
					soundeffect = "event:/SFX/DLC/1.3_ip1/UI/open_character_panel"
				}
			}

			state = {
				name = agitator

				on_start = "[PdxGuiTriggerAllAnimations(Select_CString( CommanderPanel.AccessCharacter.IsHistorical, 'historical_agitator', 'generic_agitator' ))]"
			}

			state = {
				name = historical_agitator

				start_sound = {
					soundeffect = "event:/SFX/DLC/1.3_ip1/UI/historical_agitator_stinger"
				}
			}

			state = {
				name = generic_agitator

				start_sound = {
					soundeffect = "event:/SFX/DLC/1.3_ip1/UI/generic_agitator_stinger"
				}
			}

			state = {
				name = _hide
				
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/budget_stop"
				}
			}
		}

		blockoverride "window_header_name" {
			text = "[Character.GetFullName]"
		}

		blockoverride "window_header_name_line_two" {
			text = "CHARACTER_PANEL_SUBTITLE"
		}

		blockoverride "goto_visibility" {
			visible = "[Not(Character.IsInExilePool)]"
		}
		blockoverride "goto_properties" {
			datacontext = "[Character.GetCountry]"
			tooltip = "ZOOM_TO_LOCATION"
			onclick = "[Character.ZoomToLocation]"
		}

		blockoverride "goto_button" {
			button_icon_goto = { # Character IS Exile
				size = { 30 30 }
				visible = "[And(Character.IsInExilePool, GetVariableSystem.Exists('politics_overview_exile_pool'))]"
				datacontext = "[Character.GetCountry]"
				tooltip = "GO_TO_BUTTON_EXILED_AGITATORS"
				onclick = "[InformationPanelBar.OpenPanelTab( 'politics', 'default' )]"
			}
			button_icon_goto = { # Character IS Exile
				size = { 30 30 }
				visible = "[And(Character.IsInExilePool, Not(GetVariableSystem.Exists('politics_overview_exile_pool')))]"
				datacontext = "[Character.GetCountry]"
				tooltip = "GO_TO_BUTTON_EXILED_AGITATORS"
				onclick = "[InformationPanelBar.OpenPanelTab( 'politics', 'default' )]"
				onclick = "[GetVariableSystem.Toggle('politics_overview_exile_pool')]"
			}
			button_icon_goto = { #character is General at front
				size = { 30 30 }
				visible = "[And( Character.IsGeneral, Character.IsAtFront )  ]"
				datacontext = "[Character.GetFront]"
				tooltip = "GO_TO_BUTTON_FRONT"
				onclick = "[InformationPanelBar.OpenFrontPanel(Character.GetFront)]"
			}
			button_icon_goto = { # character is Admiral with the order of raiding convoys
				size = { 30 30 }
				visible = "[And(Character.IsAdmiral, Character.GetOrderType.IsRaidConvoys) ]"
				# TODO: PRCAL-29523: fix this button
				#datacontext = "[Character.GetCommanderOrder.GetConvoyRaidingProvince.GetStateRegion]"
				tooltip = "GO_TO_BUTTON_SEA_REGION"
				# TODO: PRCAL-29523: fix this button
				#onclick = "[InformationPanelBar.OpenSeaRegionPanel(Character.GetCommanderOrder.GetConvoyRaidingProvince)]"
			}
			button_icon_goto = { #All other cases
				size = { 30 30 }
				visible = "[And( And( Not( Character.IsInExilePool ) , Not( And( Character.IsGeneral, Character.IsAtFront ))) ,  Not( And( Character.IsAdmiral, Character.GetOrderType.IsRaidConvoys ) ) )]"
				datacontext = "[Character.GetCountry]"
				tooltip = "GO_TO_BUTTON_COUNTRY"
				onclick = "[InformationPanelBar.OpenCountryPanel(Character.GetCountry)]"
			}
		}

		blockoverride "fixed_top"
		{
			tab_buttons = {
				# Army
				blockoverride "first_button" {
					text = "CHARACTER_PANEL_TAB_OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "CHARACTER_PANEL_TAB_OVERVIEW"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "CHARACTER_PANEL_TAB_OVERVIEW_SELECTED"
				}

				# Garrisons
				blockoverride "second_button" {
					text = "CHARACTER_PANEL_TAB_MODIFIERS"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "CHARACTER_PANEL_TAB_MODIFIERS"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('modifiers')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('modifiers')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('modifiers') )]"
				}
				blockoverride "second_button_selected" {
					text = "CHARACTER_PANEL_TAB_MODIFIERS_SELECTED"
				}
			}
		}

		blockoverride "scrollarea_content" {

			### CHARACTER PANEL
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				minimumsize = { @panel_width -1 }
				margin_top = 5


				widget = {
					size = { @panel_width_plus_14 520 }
					### TODO: fix the backgrounds to fit the set container size (currently 540 x 600)
					
					character_with_background = {
						size = { @panel_width_plus_14 520 }
					}

					widget = {
						size = { @panel_width 520 }

						flowcontainer = {
							parentanchor = right|vcenter
							position = { 0 -15 }
							margin_left = 5
							margin_bottom = 7
							margin_top = 7
							direction = vertical
							minimumsize = { 250 -1 }

							background =  {
								using = entry_bg_fancy_dark
								alpha = 1
							}

							### RANK
							character_stats_entry = {
								visible = "[Character.IsCommander]"
								datacontext = "[Character.GetCommanderRank]"

								tooltipwidget = {
									FancyTooltip_CommanderRank = {}
								}

								blockoverride "icon" {
									widget = {
										parentanchor = left|vcenter
										position = { 10 0 }
										size = { 35 35 }

										icon = {

											size = { 40	40 }
											texture = "gfx/interface/backgrounds/round_button_bg.dds"
											parentanchor = vcenter|left
											
											icon = {
												size = { 30	30 }
												parentanchor = center
												texture = "[Character.GetCommanderRank.GetTexture]"
											}
										}
									}
								}
								
								blockoverride "double_entry_label" {
									text = "[concept_rank]"
								}
								blockoverride "double_entry_value" {
									raw_text = "#v [Character.GetRankTitleFor(CommanderRank.Self)]#!"
								}
								blockoverride "single_text_entry" {}
							}

							character_stats_entry = {
								blockoverride "visibility" {
									visible = "[Character.IsCommander]"
								}
								blockoverride "icon" { }
								blockoverride "double_entry_label" {}
								blockoverride "double_entry_value" {}
								blockoverride "single_text_entry" {}

								blockoverride "additional_items" {
									widget = {
										name = "tutorial_highlight_character_panel_promote_button"
										parentanchor = center
										size = { 240 50 }

										promote_commander_button = {
											parentanchor = center
											visible = "[Not( Character.IsMaxRank )]"
											tooltip = "MILITARY_PANEL_PROMOTE_CHARACTER_TOOLTIP"
											blockoverride "size" {
												size = { 210 40 }
											}
										}
							
										promote_commander_button = {
											parentanchor = center
											visible = "[Character.IsMaxRank]"
											tooltip = "MILITARY_PANEL_PROMOTE_CHARACTER_TOOLTIP_MAX_RANK"

											blockoverride "size" {
												size = { 210 40 }
											}
										}
									}
								}
							}

							### ROLE
							character_stats_entry = {

								tooltip = "CHARACTER_PRIMARY_ROLE_TOOLTIP"

								blockoverride "icon" {
									widget = {
										parentanchor = left|vcenter
										position = { 10 0 }
										size = { 35 35 }
										icon = {
											visible = "[And(And(Character.IsPolitician,And(Not(Character.IsRuler),Not(Character.IsHeir))),Not(Character.IsAgitator))]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/politician.dds"
										}
										icon = {
											visible = "[Character.IsAgitator]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/agitator.dds"
										}
										icon = {
											visible = "[Character.IsRuler]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/ruler.dds"
										}
										icon = {
											visible = "[Character.IsHeir]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/heir.dds"
										}
										icon = {
											visible = "[And(And(Not(Or(Character.IsPolitician, Or(Character.IsRuler, Character.IsHeir))), Character.IsGeneral),Not(Character.IsAgitator))]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/general.dds"
										}
										icon = {
											visible = "[And(And(Not(Or(Character.IsPolitician, Or(Character.IsRuler, Character.IsHeir))), Character.IsAdmiral),Not(Character.IsAgitator))]"
											parentanchor = left|vcenter
											size = { 100% 100% }
											texture = "gfx/interface/icons/character_role_icons/admiral.dds"
										}
									}
								}
								blockoverride "double_entry_label" {
									text = "ROLE"
								}
								blockoverride "double_entry_value" {
									text = "CHARACTER_PRIMARY_ROLE"
								}
								blockoverride "single_text_entry" {}
							}

							### INTEREST GROUP
							character_interest_group_entry = {
								visible = "[Not( Character.IsInExilePool )]"
								datacontext = "[Character.AccessInterestGroup]"
							}

							character_interest_group_entry = {
								visible = "[Character.IsInExilePool]"
								datacontext = "[Character.AccessInterestGroup]"
							}

							### IDEOLOGY
							character_stats_entry = {
								datacontext = "[Character.GetIdeology]"

								tooltipwidget = {
									FancyTooltip_Ideology = {}
								}

								blockoverride "icon_texture" {
									texture = "[Ideology.GetTexture]"
								}
								blockoverride "double_entry_label" {
									text = "IDEOLOGY_CONCEPT"
								}
								blockoverride "double_entry_value" {
									text = "CHARACTER_IDEOLOGY"
								}
								blockoverride "single_text_entry" {}
							}

							### CULTURE
							character_stats_entry = {
								datacontext = "[Character.GetCulture]"

								tooltipwidget = {
									FancyTooltip_Culture = {}
								}

								blockoverride "icon_texture" {
									texture = "gfx/interface/backgrounds/round_button_bg.dds"
									icon = {
										parentanchor = center
										size = { 32 32 }
										texture = "gfx/interface/population/pop_culture.dds"
									}
								}
								blockoverride "double_entry_label" {
									text = "CHARACTER_PANEL_CULTURE_LABEL"
								}
								blockoverride "double_entry_value" {
									text = "CHARACTER_CULTURE"
								}
								blockoverride "single_text_entry" {}
							}

							#POPULARITY
							character_stats_entry = {

								tooltip = "POPULARITY_BREAKDOWN"

								blockoverride "animation" {
									name = commander_panel_show
									on_finish = "[PdxGuiTriggerAllAnimations('character_panel_stat')]"
								}

								blockoverride "icon_texture" {
									texture = "gfx/interface/icons/generic_icons/popularity.dds"
								}

								blockoverride "double_entry_label" {
									text = "POPULARITY"
								}
								blockoverride "double_entry_value" {
									text = "CHARACTER_POPULARITY"
								}
								blockoverride "single_text_entry" {}
							}	

							### AGE
							character_stats_entry = {
								### This is to not overcrowd the panel when the character is both a General and an Agitator
								visible = "[Not(And(Character.IsAgitator, Character.IsGeneral))]"
								tooltip = "CHARACTER_AGE_TOOLTIP"

								blockoverride "icon_texture" {
									texture = "gfx/interface/icons/generic_icons/age.dds"
								}
								blockoverride "double_entry_label" {
									text = "AGE"
								}
								blockoverride "double_entry_value" {
									text = "CHARACTER_AGE"
								}
								blockoverride "single_text_entry" {}

								blockoverride "divider" {
									divider_clean = {
										visible = "[Character.IsAgitator]"
										parentanchor = bottom|hcenter
										position = { 0 -2 }
									}
								}
							}

							### POLITICAL MOVEMENT PREDICTION - WHEN IN EXILE POOL
							character_stats_entry = {

								datacontext = "[Character.PredictLawToAgitate(GetPlayer.Self)]"
								datacontext = "[Law.GetPoliticalMovement]"

								tooltip = "AGITATOR_POLITICAL_MOVEMENT_PREDICTION_INVITE"

								blockoverride "visibility" {
									visible = "[Character.IsInExilePool]"
								}

								blockoverride "icon" {
									icon = {
										visible = "[Law.IsValid]"
										size = { 35 35 }
										texture = "[Law.GetTexture]"
										parentanchor = left|vcenter
										position = { 10 0 }
									}

									icon = {
										visible = "[Not(Law.IsValid)]"
										size = { 35 35 }
										texture = "gfx/interface/icons/generic_icons/red_cross.dds"
										parentanchor = left|vcenter
										position = { 10 0 }
									}
								}

								blockoverride "double_entry_label" {}
								blockoverride "double_entry_value" {}
								blockoverride "single_text_entry" {}

								blockoverride "divider" {}

								blockoverride "additional_items" {
									textbox = {
										size = { 170 40 }
										position = { 55 0 }
										parentanchor = vcenter
										elide = right
										fontsize_min = 14
										multiline = yes
										align = left|nobaseline
										text = "AGITATOR_START_JOIN_POLITICAL_MOVEMENT"
									}
								}
							}

							### POLITICAL MOVEMENT - WHEN IN A COUNTRY
							character_stats_entry = {

								datacontext = "[Character.PredictLawToAgitate(GetPlayer.Self)]"
								datacontext = "[Law.GetPoliticalMovement]"

								tooltip = "AGITATOR_POLITICAL_MOVEMENT"

								blockoverride "visibility" {
									visible = "[And(Not(Character.IsInExilePool), Character.IsAgitator)]"
								}

								blockoverride "icon" {
									icon = {
										visible = "[Law.IsValid]"
										size = { 35 35 }
										texture = "[Law.GetTexture]"
										parentanchor = left|vcenter
										position = { 10 0 }
									}

									icon = {
										visible = "[Not(Law.IsValid)]"
										size = { 35 35 }
										texture = "gfx/interface/icons/generic_icons/red_cross.dds"
										parentanchor = left|vcenter
										position = { 10 0 }
									}
								}

								blockoverride "double_entry_label" {}
								blockoverride "double_entry_value" {}
								blockoverride "single_text_entry" {}

								blockoverride "divider" {}

								blockoverride "additional_items" {
									textbox = {
										size = { 170 40 }
										position = { 55 0 }
										parentanchor = vcenter
										elide = right
										fontsize_min = 14
										multiline = yes
										align = left|nobaseline
										text = "AGITATOR_POLITICAL_MOVEMENT"
									}
								}
							}
						}
					}

					character_interactions_button = {
						name = "tutorial_highlight_character_panel_promote_button"
					}

					widget = {
						size = { @panel_width_plus_14 50 }
						parentanchor = hcenter|bottom
						
						### TIMED MODIFIERS
						flowcontainer = {
							parentanchor = right
							margin_top = 10
							margin_right = 14
							margin_left = 14
							margin_bottom = 10
							datamodel = "[Character.GetTimedModifiers]"
							spacing = 5
							visible = "[Not(IsDataModelEmpty(Character.GetTimedModifiers))]"
							maximumsize = { @panel_width_minus_10 45 }
							datamodel_wrap = 2

							item = {
								icon = {
									tooltip = "[TimedModifier.GetTooltip]"
									texture = "[TimedModifier.GetIcon]"
									size = { 30 30 }
								}
							}
						}
					}
				}

				### CHARACTER TRAITS
				default_header = {
					blockoverride "text" {
						datacontext = "[Character]"
						text = "CHARACTER_PANEL_TRAITS_HEADER"
					}
				}
				character_traits = {}

				### SHIPPING LANE
				default_header = {
					visible = "[Character.HasShippingLane]"
					using = default_fade_in_out

					blockoverride "text" {
						text = "SHIPPING_LANE_CHARACTER_HEADER"
					}
				}

				shipping_lane_item = {
					margin_left = 10
					margin_bottom = 10
					margin_top = 5
					visible = [Character.HasShippingLane]
					datacontext = [Character.GetShippingLane]
				}

				widget = { size = { 20 20 }}
			}

			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('modifiers')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				minimumsize = { @panel_width -1 }

				modifier_list = {
					blockoverride "timed_modifier_visibility" 
					{
						visible = no
					}
					blockoverride "margin1" {}
					blockoverride "margin2" {}
				}
				
			}
		}
		
		blockoverride "fixed_bottom" {
			divider_clean = {
				size = { @panel_width_plus_14 4 }
				visible = "[Character.IsCommander]"
			}
				
			flowcontainer = {
				minimumsize = { 400 100 }
				direction = vertical
				visible = "[Character.IsCommander]"
				using = default_fade_in_out

				empty_state = {
					blockoverride "visible" {
						visible = "[Not(Character.HasMilitaryFormation)]"
					}
					blockoverride "text" {
						text = "NOT_PART_OF_ANY_MILITARY_FORMATION"
					}
				}

				flowcontainer = {
					visible = "[Character.HasMilitaryFormation]"
					parentanchor = hcenter
					margin = { 10 20 }
					spacing = 20
					datacontext = "[Character.GetMilitaryFormation]"

					widget = {
						parentanchor = vcenter
						size = { 410 80 }

						military_formation_right_click_item = {
							blockoverride "tooltip" {
					        	tooltipwidget = {
					        		FancyTooltip_MilitaryFormation = {}
					        	}
					        }

							blockoverride "onclick" {
								onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( MilitaryFormation.AccessSelf, 'default' )]"
								onrightclick = "[RightClickMenuManager.ShowForMilitaryFormation(MilitaryFormation.AccessSelf)]"
							}
						}
					}

					dropdown_menu_round = {
						visible = "[Character.GetCountry.IsPlayer]"
			            parentanchor = vcenter

			            blockoverride "dropdown_properties" {
			                datamodel = "[Character.AccessOrders]"
			            }

			            blockoverride "dropdown_active_item_tooltip" {
			            	datacontext = "[Character.GetOrderType]"
			            	tooltip = "CHANGE_COMMANDER_ORDER_TOOLTIP"
			            	using = tooltip_above
			            }

			            blockoverride "dropdown_size" {
			                size = { 80 80 }
			            }

			            blockoverride "dropdown_active_size" {
			            	size = { 80 80 }
			            }

			            blockoverride "dropdown_list_size" {
			                size = { 200 60 }
			            }

			            blockoverride "dropdown_list_maxsize" {
			                size = { 200 600 }
			            }

			            blockoverride "dropdown_list_position" {
							position = { 80 32 }
						}

			        	blockoverride "dropdown_active_item_icon" {
							texture = "[Character.GetOrderType.GetTexture]"
			            }

			            blockoverride "dropdown_item_properties" {
			                button = {
			                    size = { 100% 100% }
				            	clicksound = "[CommanderOrderType.GetClickSound]"
				            	enabled = "[Character.CanSelectOrder( CommanderOrderType.Self )]"
				            	onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"
				            	using = default_button_action
				            	tooltip = "COMMANDER_PANEL_ORDER_TOOLTIP"
			                    
			                    widget = {
			                    	visible = "[ObjectsEqual(Character.GetOrderType.Self, CommanderOrderType.Self)]"
			                    	size = { 100% 100% }

			                    	background = {
				                    	using = paper_bg
				                    }
			                    }

			                    hbox = {
			                        layoutpolicy_horizontal = expanding
			                        margin_left = 5

			                        widget = {
			                        	size = { 5 5 }
			                        }

			                        icon = {
			                        	size = { 30 30 }
										texture = "[CommanderOrderType.GetTexture]"
			                        }

			                        text_single = {
			                            layoutpolicy_horizontal = expanding
			                            align = nobaseline
			                            margin_left = 10
			                            default_format = "#clickable"
			                           	text = "[CommanderOrderType.GetName]"
			                        }

			                        expand = {}
			                    }

			                    icon = {
			                    	visible = "[Character.HasOrder( CommanderOrderType.Self )]"
			                    	size = { 100% 100% }
			                    	using = highlighted_square_selection
			                    }
			                }
			            }
			        }
			    }
			}
		}
		
		blockoverride "pin_visibility" {
			visible = "[ObjectsEqual(CommanderPanel.AccessCharacter.GetCountry, GetPlayer.Self)]"
		}

		blockoverride "pin_properties" {
			visible = "[CommanderPanel.AccessCharacter.IsPinnedInOutliner]"
			onclick = "[CommanderPanel.AccessCharacter.TogglePinInOutliner]"
			datacontext = "[CommanderPanel.AccessCharacter]"
			tooltip = "UNPIN_CHARACTER"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(CommanderPanel.AccessCharacter.IsPinnedInOutliner)]"
			onclick = "[CommanderPanel.AccessCharacter.TogglePinInOutliner]"
			datacontext = "[CommanderPanel.AccessCharacter]"
			tooltip = "PIN_CHARACTER"
		}
	}
}

#CHARACTER STATS
types character_stats
{
	type character_stats_entry = widget {
		size = { 220 50 }
		block "parentanchor" {
			parentanchor = hcenter
		}
		block "entire_stat_tooltip" {}
		block "visibility" {}

		block "divider" {
			divider_clean = {
				parentanchor = bottom|hcenter
				position = { 0 -2 }
			}
		}
		
		block "icon" {
			icon = {
				block "icon_tooltip" {}
				block "icon_size" {
					size = { 35 35 }
				}
				block "icon_texture" {
					texture = "gfx/interface/backgrounds/round_button_bg.dds"
				}
				parentanchor = left|vcenter
				position = { 10 0 }
			}
		}

		block "double_text_entry" {
			textbox = {
				autoresize = yes
				position = { 55 6 }
				elide = left
				parentanchor = left
				align = left|nobaseline
				using = fontsize_small
				block "double_entry_label" {
					raw_text = "insert_label"
				}
			}
			textbox = {
				size = { 170 20 }
				position = { 55 -6 }
				elide = right
				fontsize_min = 14
				align = left|nobaseline
				parentanchor = left|bottom
				block "double_entry_value" {
					raw_text = "insert_text"
				}
			}
		}

		block "single_text_entry" {
			textbox = {
				block "single_text_tooltip" {}
				autoresize = yes
				position = { 55 0 }
				elide = left
				align = left|nobaseline
				parentanchor = left|vcenter
				block "single_entry_value" {
					raw_text = "insert_text"
				}
			}
		}

		block "additional_items" {}
	}

	type character_interest_group_entry = character_stats_entry {

		tooltipwidget = {
		 	FancyTooltip_IG = {}
		}

		blockoverride "icon" {
			icon = {
				visible = "[Not(InterestGroup.IsValid)]"
				size = { 35 35 }
				texture = "gfx/interface/icons/ig_icons/politically_unaligned.dds"
				parentanchor = left|vcenter
				position = { 10 0 }
			}

			button_icon_round = {
				visible = "[InterestGroup.IsValid]"
				parentanchor = left|vcenter
				position = { 10 0 }

				blockoverride "size" {
					size = { 35 35 }
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}

				block "onclick" {
					onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
				}


				blockoverride "icon" {
					texture = "[InterestGroup.GetTexture]"
				}			
			}
		}

		blockoverride "double_entry_label" {
			text = "INTEREST_GROUP"
		}
		blockoverride "double_entry_value" {
			raw_text = "#v [InterestGroup.GetNameNoFormatting]#!"
		}
		blockoverride "single_text_entry" {}
	}
}

types commander_panel_types
{
	type promote_commander_button = button {
		using = default_button_action
		text = "PROMOTE_COMMANDER"
		block "size" {
			size = { 240 50 }
		}
		enabled = "[IsValid(Character.GetPromoteCommand)]"
		onclick = "[PopupManager.AskConfirmationWithSound(Character.GetPromoteCommand, 'event:/SFX/UI/Military/commander_promote')]"
	}

	type character_traits = dynamicgridbox {
		maximumsize = { 500 -1 }
		datamodel = "[Character.AccessTraits]"
		datamodel_wrap = 3
		flipdirection = yes
		parentanchor = hcenter

		background = {
			margin = { 100 -5 }
			using = entry_bg_simple
		}

		item = {
			flowcontainer = {
				margin = { 20 20 }
				using = tooltip_above
				tooltipwidget = {
					FancyTooltip_CharacterTrait = {}
				}
				icon = {
					size = { 32 45 }
					parentanchor = vcenter
					texture = "[CharacterTrait.GetTexture]"
				}

				textbox = {
					text = "[CharacterTrait.GetNameNoFormatting]"
					margin_left = 5
					max_width = 130
					autoresize = yes
					parentanchor = vcenter
					align = left|nobaseline
					multiline = yes
					using = fontsize_small
				}
			}	
		}
	}
	
	type character_interactions_button = button_icon_round {

		block "enabled" {
			enabled = "[Not(IsDataModelEmpty(Character.GetInteractions))]"
		}

		block "parentanchor" {
			parentanchor = left|top
		}

		block "position" {
			position = { 20 20 }
		}

		block "onclick" {
			onclick = "[RightClickMenuManager.ShowForCharacter(Character.AccessSelf)]"
		}

		blockoverride "size" {
			size = { 50 50 }
		}

		blockoverride "icon_size" {
			size = { 100% 100% }
		}

		blockoverride "icon" {
			texture = "gfx/interface/buttons/button_icons/character_interaction.dds"
		}
		
		tooltip = "CHARACTER_INTERACTIONS_BUTTON_TOOLTIP"
	}

	type character_traits_no_label = dynamicgridbox {
		datamodel = "[Character.AccessTraits]"
		datamodel_wrap = 5
		flipdirection = yes
		parentanchor = hcenter

		item = {
			widget = {
				size = { 37 50 }
				
				using = tooltip_above
				tooltipwidget = {
					FancyTooltip_CharacterTrait = {}
				}
				
				icon = {
					size = { 32 45 }
					parentanchor = vcenter
					texture = "[CharacterTrait.GetTexture]"
				}
			}	
		}
	}
}
template Animation_Character_Panel_Refresh
{
	state = {
		name = character_panel_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.65
	}

	state = {
		using = Animation_Refresh_FadeIn
	}
}

template Animation_Character_Panel_Refresh_Short
{
	state = {
		name = character_panel_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.8
	}

	state = {
		using = Animation_Refresh_FadeIn
		duration = 0.25
	}
}
