# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 440
@panel_width_minus_20_half = 260	# used to be 220
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types goods_local_prices_panel_types
{
	type goods_local_prices_panel = default_block_window_two_lines {
		name = "goods_local_prices_panel"
		
		blockoverride "window_header_name"
		{
			raw_text = "#BOLD [GoodsLocalPricesPanel.GetGoods.GetName]#!"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "LOCAL_PRICES_PANEL_LINE_TWO"
		}
		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[GoodsLocalPricesPanel.AccessGoods.AccessMarket]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenMarketPanel(GoodsLocalPricesPanel.AccessGoods.AccessMarket)]"
				tooltip = "GO_TO_BUTTON_MARKET"
			}
		}
		
		blockoverride "fixed_top"
		{
			tab_buttons = {
				
				# OBS! these 4 tabs are copied to goods_panel.gui / goods_usage_panel.gui / goods_state_panel.gui / goods_local_prices_panel.gui
				# consider merging these panels into the same panel

				# market
				blockoverride "first_button" {
					text = "[GoodsLocalPricesPanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "[GoodsLocalPricesPanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsPanel(GoodsLocalPricesPanel.GetGoods.GetMarket, GoodsLocalPricesPanel.GetGoods.Self)]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[And(GoodsLocalPricesPanel.GetGoods.HasMarketContext,Not(GoodsLocalPricesPanel.GetGoods.IsLocal))]"
				}			
				
				# selected state
				blockoverride "second_button" {
					text = "[GoodsLocalPricesPanel.GetGoods.GetState.GetNameNoFormatting]"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "[GoodsLocalPricesPanel.GetGoods.GetState.GetNameNoFormatting]"
				} 
				blockoverride "second_button_visibility_checked" {
					visible = "[GoodsLocalPricesPanel.GetGoods.HasStateContext]"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsStatePanel( GoodsLocalPricesPanel.GetGoods.GetState, GoodsLocalPricesPanel.GetGoods )]"
				}				
				
				# states in market
				blockoverride "third_button_selected" {
					text = "LOCAL_PRICES"
				}
				blockoverride "third_button_selected_tooltip" {}
				blockoverride "third_button_visibility" {
					visible = yes
				}				
				blockoverride "third_button_click" {
				}	

				# usage / application
				blockoverride "fourth_button" {
					text = USAGE
				}
				blockoverride "fourth_button_tooltip" {
					tooltip = "USAGE"
				}
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsUsagePanel(GoodsLocalPricesPanel.GetGoods)]"
				}
				blockoverride "fourth_button_visibility_checked" {
					visible = yes
				}
			}
		}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter
				
				flowcontainer = {
					margin_top = 10
					minimumsize = { @panel_width -1 }
					using = default_list_position
					direction = vertical

					datacontext = "[GoodsLocalPricesPanel.AccessGoods]"

					textbox = {
						using = market_price_tooltip_with_graph
						raw_text = "[concept_market_price]: @money![Goods.GetMarketPrice|0v] [Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetMarketPrice )]"
						align = right|nobaseline
						autoresize = yes
						using = fontsize_xxl
						parentanchor = hcenter
						margin_bottom = 10
					}

					flowcontainer = {
						#using = default_list_position
						margin = { 0 5 }
						margin_top = 10

						sort_button = {
							align = hcenter|nobaseline
							text = "STATE"
							size = { 150 20 }

							onclick = "[GoodsLocalPricesPanel.Sort('state')]"
						}

						sort_button = {
							align = hcenter|nobaseline
							text = "concept_good_production"
							size = { 90 20 }
							margin_right = 7

							onclick = "[GoodsLocalPricesPanel.Sort('production')]"
						}

						sort_button = {
							align = hcenter|nobaseline
							text = "concept_good_consumption"
							size = { 90 20 }
							margin_right = 7

							onclick = "[GoodsLocalPricesPanel.Sort('consumption')]"
						}

						sort_button = {
							align = hcenter|nobaseline
							text = "BALANCE"
							size = { 100 20 }
							margin_right = 7

							onclick = "[GoodsLocalPricesPanel.Sort('balance')]"
						}
						
						sort_button = {
							align = hcenter|nobaseline
							text = "concept_local_price"
							size = { 110 20 }

							onclick = "[GoodsLocalPricesPanel.Sort('price')]"
						}
					}

					flowcontainer = {
						datamodel = "[GoodsLocalPricesPanel.AccessLocalPrices]"
						direction = vertical 
						using = default_list_position

						item = {
							button = {
								using = clean_button
								onclick = "[InformationPanelBar.OpenGoodsStatePanel(Goods.GetState.Self, Goods.Self)]"
								tooltip = "[Goods.GetStatePriceDesc]"

								flowcontainer = {
									resizeparent = yes
									minimumsize = { @panel_width -1 }

									textbox = {
										text = "[Goods.GetState.GetName]"
										autoresize = yes
										align = nobaseline
										parentanchor = vcenter
										margin_left = 10
										minimumsize = { 150 -1 }
										maximumsize = { 150 -1 }
										multiline = yes
									}						

									
									textbox = {
										align = right|nobaseline
										text = "[Goods.GetStateProductionWithTooltip|Dv]"
										size = { 90 40 }
										margin_right = 10
										parentanchor = vcenter
									}

									vertical_divider = {}
									
									textbox = {
										align = right|nobaseline
										text = "[Goods.GetStateConsumptionWithTooltip|Dv]"
										size = { 90 40 }
										margin_right = 10
										parentanchor = vcenter
									}

									vertical_divider = {}
									
									flowcontainer = {
										direction = vertical
										minimumsize = { 90 52 }
										margin_top = 10
										spacing = 5

										textbox = {
											visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
											align = right|nobaseline
											text = "GOODS_LOCAL_PRICE_PANEL_BALANCE_GOLD"
											autoresize = yes
											margin_right = 15
											parentanchor = right
										}

										textbox = {
											visible = "[EqualTo_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
											align = hcenter|nobaseline
											text = "GOODS_LOCAL_PRICE_PANEL_BALANCE"
											autoresize = yes
											parentanchor = hcenter
										}

										textbox = {
											visible = "[LessThan_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
											align = left|nobaseline
											text = "GOODS_LOCAL_PRICE_PANEL_BALANCE_BLUE"
											autoresize = yes
											margin_left = 15
											parentanchor = left
										}

										double_direction_progressbar_gold = {
											size = { 60 6 }
											parentanchor = hcenter
										
											blockoverride "negative_min_max_values" {
												min = "[Negate_float(FixedPointToFloat(Goods.GetMaxImbalance))]"
												max = 0
											}
										
											blockoverride "positive_min_max_values" {
												min = 0
												max = "[FixedPointToFloat(Goods.GetMaxImbalance)]"
											}
											
											blockoverride "value_left" {
												value = "[FixedPointToInt(Goods.GetStateProductionConsumptionDiff)]"
											}
											blockoverride "value_right" {
												value = "[FixedPointToInt(Goods.GetStateProductionConsumptionDiff)]"
											}
										}	
									}

									vertical_divider = {}

									textbox = {
										text = "GOODS_LOCAL_PRICE_INFO"
										align = right|nobaseline
										size = { 110 40 }
										margin_right = 5
										parentanchor = vcenter
									}

									vertical_divider = {}
								}
							}
						}
					}
				}
				
				not_yet_initialized = {
					visible = "[IsDataModelEmpty(GoodsLocalPricesPanel.AccessLocalPrices)]"
				}
			}
		}
	}
}
