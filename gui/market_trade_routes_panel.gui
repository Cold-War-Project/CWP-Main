# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types market_panel
{
	type market_panel_trade_routes_content = flowcontainer {
		using = default_list_position
		direction = vertical

		# Empty state, is a nested mess because the alternative of doing a [And(And(And(And)))] check is even less readable
		container = {
			using = default_list_position
			visible = "[IsDataModelEmpty(Market.AccessPlayerImportRoutes)]"
			
			container = {
				visible = "[IsDataModelEmpty(Market.AccessOtherExportRoutes)]"

				container = {
					visible = "[IsDataModelEmpty(Market.AccessPlayerExportRoutes)]"
					
					flowcontainer = {
						visible = "[IsDataModelEmpty(Market.AccessOtherImportRoutes)]"
						direction = vertical
						spacing = 40

						textbox = {
							margin_top = 40
							using = default_list_position
							text = "TRADE_ROUTE_EMPTY_STATE"
							autoresize = yes
							align = nobaseline
							using = fontsize_large
							using = empty_state_text_properties
						}

						divider_decorative = {}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists( 'trade_route_grouping' ))]"
			parentanchor = hcenter
			direction = vertical
			margin_top = 10

			widget = {
				size = { @panel_width 30 }

				hbox = {
					sort_button = {
						size = { 60 30 }
						text = "TRADE_ROUTES_SORT_GOODS"
						onclick = "[Market.SortTradeRoutes('goods')]" 
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_NAME_OF_GOODS"
					}
					sort_button = {
						size = { 60 30 }
						text = "TRADE_ROUTES_SORT_AMOUNT"
						onclick = "[Market.SortTradeRoutes('amount')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_NUMBER_OF_GOODS"
					}
					sort_button = {
						size = { 45 30 }
						text = "TRADE_ROUTES_SORT_DIRECTION"
						onclick = "[Market.SortTradeRoutes('direction')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_DIRECTION"
					}
					sort_button = {
						size = { 60 30 }
						text = "TRADE_ROUTES_SORT_COUNTRY"
						onclick = "[Market.SortTradeRoutes('country')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_COUNTRY"
					}
					sort_button = {
						size = { 70 30 }
						text = "TRADE_ROUTES_SORT_COST"
						onclick = "[Market.SortTradeRoutes('cost')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_CONVOY_COST"
					}
					sort_button = {
						size = { 70 30 }
						text = "TRADE_ROUTES_SORT_PRODUCTIVITY"
						onclick = "[Market.SortTradeRoutes('productivity')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_PRODUCTIVITY"
					}
					sort_button = {
						size = { 100 30 }
						text = "TRADE_ROUTES_SORT_REVENUE"
						onclick = "[Market.SortTradeRoutes('revenue')]"
						layoutpolicy_horizontal = expanding
						tooltip = "TRADE_ROUTE_REVENUE"
					}
					sort_button = {
						size = { 45 30 }
						text = "TRADE_ROUTES_SORT_OWNER"
						onclick = "[Market.SortTradeRoutes('owner')]"
						layoutpolicy_horizontal = expanding
					}
				}
			}

			fixedgridbox = {
				datamodel = "[Market.AccessAllTradeRoutes]"
				addrow = 50
				addcolumn = 540

				item = {
					trade_route_list_item = {}
				}
			}
		}

		flowcontainer = {
			visible = "[GetVariableSystem.HasValue( 'trade_route_grouping', 'country' )]"
			parentanchor = hcenter
			direction = vertical
			datamodel = "[Market.AccessAllCountriesWithTradeRoutes]"

			item = {
				trade_routes_grouped_by_country_summary = {}
			}
		}

		flowcontainer = {
			visible = "[GetVariableSystem.HasValue( 'trade_route_grouping', 'goods' )]"

			direction = vertical
			parentanchor = hcenter
			using = default_list_position
			datamodel = "[Market.AccessGoodsWithTradeRoutes]"

			item = {
				trade_routes_grouped_by_goods_summary = {}
			}
		}
		
		widget = { size = { 10 15 }}
	}

	type trade_routes_grouped_by_goods_summary = flowcontainer {
		datacontext = "[MarketGoods.GetGoods]"
		datacontext = "[MarketGoods.GetMarket]"
		direction = vertical
		parentanchor = hcenter
		margin_top = 10	

		flowcontainer = {
			maximumsize = { @panel_width 100 }
			parentanchor = hcenter
			
			### Goods icon
			button_icon_round_big = {
				size = { 80 80 }
				
				blockoverride "icon" {
					texture = "[Goods.GetTexture]"
				}

				onclick = "[InformationPanelBar.OpenGoodsPanel(AccessPlayer.AccessFirstMarket.Self, Goods.Self)]"
				onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"

				#TODO add IsBeingHighlighted code support for Goods icon when it is being hovered.
				#onmousehierarchyenter = "[AccessHighlightManager.HighlightGoods(Goods.Self)]"
				#onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

				tooltipwidget = {
					FancyTooltip_Goods = {}
				}
			}

			flowcontainer = {
				direction = vertical
				
				### DROPDOWN / EXPAND
				section_header_button = {
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle( Concatenate( 'market_goods_', MarketGoods.GetIDString ) )]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString ))]"
					}

					blockoverride "layout" {
						size = { 450 40 }
					}

					using = market_price_tooltip_with_graph

					blockoverride "left_text" {
						text = "GOODS_NAME_WITH_TRADE_ROUTES"
						fontsize_min = 12
						elide = right
					}

					blockoverride "right_text" {
						section_header_right_text = {
							raw_text = "[GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] [Goods.GetMarketPrice|0v] [Goods.GetCompareIconAgainstBasePrice( Goods.GetMarketPrice )] (#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice)|%0=-]#!)"
						}
					}
				}

				flowcontainer = {
					spacing = 5
					
					widget = {
						size = { 150 50 }
						tooltip = "TRADED_GOODS_IMPORTED_TOOLTIP"

						hbox = {
							alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MarketGoods.GetImportAmount, '(CFixedPoint)0'))]"
							layoutpolicy_horizontal = expanding
							margin_left = 10
							
							icon = {
								texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
								size = { 35 35 }
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								using = fontsize_large
								elide = right
								fontsize_min = 12
								text = "TRADED_GOODS_IMPORTED_AND_NUMBER_OF_IMPORT_ROUTES"
							}
						}
					}

					widget = {
						size = { 150 50 }
						tooltip = "TRADED_GOODS_EXPORTED_TOOLTIP"

						hbox = {
							alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MarketGoods.GetExportAmount, '(CFixedPoint)0'))]"
							layoutpolicy_horizontal = expanding
							margin_left = 10
							
							icon = {
								texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
								size = { 35 35 }
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								using = fontsize_large
								elide = right
								fontsize_min = 12
								text = "TRADED_GOODS_EXPORTED_AND_NUMBER_OF_EXPORT_ROUTES"
							}
						}
					}

					set_level_bar_market_tariffs = {
						parentanchor = vcenter
					}
				}
			}
		}

		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[Not(Market.GetOnlyShowPlayerTradeRoutes)]"
			
			flowcontainer = {
				direction = vertical
				parentanchor = hcenter
				margin_top = 5
				max_width = 540
				min_width = 540
				visible = "[And( Not(IsDataModelEmpty(MarketGoods.AccessPlayerTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"

				background = {
					using = dropdown_background

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_top.dds"
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				textbox = {
					text = "TRADE_ROUTE_PLAYER"
					autoresize = yes
					align = left|nobaseline
					margin_left = 15
					margin_bottom = 5
				}

				fixedgridbox  = {
					datamodel = "[MarketGoods.AccessPlayerTradeRoutes]"
					addrow = 50
					addcolumn = 540

					item = {
						trade_route_list_item = {}
					}
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = hcenter
				margin_top = 5
				max_width = 540
				min_width = 540
				visible = "[And( Not(IsDataModelEmpty(MarketGoods.AccessOthersTradeRoutes)), GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString )))]"

				background = {
					using = dropdown_background

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_top.dds"
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				textbox = {
					text = "OTHER_COUNTRIES_TRADE_ROUTES"
					autoresize = yes
					align = left|nobaseline
					margin_left = 15
					margin_bottom = 5
				}

				fixedgridbox = {
					datamodel = "[MarketGoods.AccessOthersTradeRoutes]"
					addrow = 50
					addcolumn = 540				

					item = {
						trade_route_list_item = {}
					}
				}
			}
		}
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[Market.GetOnlyShowPlayerTradeRoutes]"

			flowcontainer = {
				direction = vertical
				parentanchor = hcenter
				margin_top = 5
				max_width = 540
				min_width = 540
				visible = "[GetVariableSystem.Exists( Concatenate( 'market_goods_', MarketGoods.GetIDString ))]"

				background = {
					using = dropdown_background

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_top.dds"
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				fixedgridbox = {
					datamodel = "[MarketGoods.AccessPlayerTradeRoutes]"
					addrow = 50
					addcolumn = 540
					
					item = {
						trade_route_list_item = {}
					}
				}
			}

		}
		divider_decorative = {}
			
	}

	type trade_routes_grouped_by_country_summary = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		margin_top = 10

		flowcontainer = {
			maximumsize = { @panel_width 100 }
			parentanchor = hcenter
			
			### Goods icon
			widget = {
				size = { 80 80 }
				flag = {
					parentanchor = center
				}
			}

			flowcontainer = {
				direction = vertical
				
				### DROPDOWN / EXPAND
				section_header_button = {
					blockoverride "layout" {
						size = { 320 40 }
					}

					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle( Concatenate( 'trade_route_group_country_', Country.GetIDString ))]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists( Concatenate( 'trade_route_group_country_', Country.GetIDString )))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists( Concatenate( 'trade_route_group_country_', Country.GetIDString ))]"
					}

					blockoverride "left_text" {
						text = "COUNTRY_NAME_WITH_TRADE_ROUTES"
						fontsize_min = 12
						elide = right
					}
				}

				flowcontainer = {
					spacing = 5
					
					widget = {
						size = { 150 50 }
						tooltip = "COUNTRY_IMPORTED_TOOLTIP"

						hbox = {
							alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(Country.GetImportAmountOnMarket( Market.Self ), '(CFixedPoint)0'))]"
							layoutpolicy_horizontal = expanding
							margin_left = 10
							
							icon = {
								texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
								size = { 35 35 }
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								using = fontsize_large
								elide = right
								fontsize_min = 12
								text = "COUNTRY_IMPORTED_AND_NUMBER_OF_IMPORT_ROUTES"
							}
						}
					}

					widget = {
						size = { 150 50 }
						tooltip = "COUNTRY_EXPORTED_TOOLTIP"

						hbox = {
							alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(Country.GetExportAmountOnMarket( Market.Self ), '(CFixedPoint)0'))]"
							layoutpolicy_horizontal = expanding
							margin_left = 10
							
							icon = {
								texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
								size = { 35 35 }
							}
							textbox = {
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								using = fontsize_large
								elide = right
								fontsize_min = 12
								text = "COUNTRY_EXPORTED_AND_NUMBER_OF_EXPORT_ROUTES"
							}
						}
					}
				}
			}

			flowcontainer = {
				direction = vertical
				spacing = 5
				parentanchor = vcenter
				margin_left = 10
				minimumsize = { 130 85 }

				button = {
					using = default_button_action
					size = { 120 40 }
					text = "EMBARGO"
					datacontext = "[GetPlayer.GetDiplomaticAction( 'embargo', Country.Self )]"
					tooltip = "DIPLOMATIC_ACTION_TOOLTIP"
					onclick = "[DiplomaticAction.ExecuteWithConfirmation]"
					enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
					clicksound = "[DiplomaticAction.GetSoundWithConfirmation]"
					visible = "[Not(ObjectsEqual(GetPlayer.Self, Country.Self))]"

					icon = {
						visible = "[DiplomaticAction.IsActivePact]"
						using = highlighted_square_selection
					}
				}

				button = {
					using = default_button_action
					size = { 120 40 }
					text = "TRADE_AGREEMENT"
					datacontext = "[GetPlayer.GetDiplomaticAction( 'trade_agreement', Country.Self )]"
					tooltip = "DIPLOMATIC_ACTION_TOOLTIP"
					onclick = "[DiplomaticAction.ExecuteWithConfirmation]"
					enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
					clicksound = "[DiplomaticAction.GetSoundWithConfirmation]"
					visible = "[Not(ObjectsEqual(GetPlayer.Self, Country.Self))]"
					margin_right = 30
					margin_left = 15
					elide = right

					icon = {
						visible = "[DiplomaticAction.IsActivePact]"
						using = highlighted_square_selection
					}

					diplomatic_action_acceptance_icon = {
						blockoverride "icon_size" {
							size = { 20 20 }
						}
						position = { -8 0 }
					}
				}
			}
		}

		flowcontainer = {
			parentanchor = hcenter
			direction = vertical

			fixedgridbox = {
				parentanchor = hcenter
				max_width = 540
				min_width = 540
				addrow = 50
				addcolumn = 540
				visible = "[GetVariableSystem.Exists( Concatenate( 'trade_route_group_country_', Country.GetIDString ))]"

				background = {
					using = dropdown_background

					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_top.dds"
						blend_mode = alphamultiply
						alpha = 1
					}
				}

				datamodel = "[Country.AccessTradeRoutesOnMarket( Market.Self )]" 
				item = {
					trade_route_list_item = {}
				}
			}
		}
		divider_decorative = {}
			
	}

	type trade_route_list_item = button {
		size = { @panel_width 50 }
		parentanchor = hcenter
		onmousehierarchyenter = "[AccessHighlightManager.HighlightTradeRouteSupplyNetwork( TradeRoute.Self )]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		
		
		block "onclick" {
			onclick = "[InformationPanelBar.OpenMarketPanel( TradeRoute.GetOtherMarket(Market.Self) )]"
		}
		onrightclick = "[RightClickMenuManager.ShowForTradeRoute(TradeRoute.AccessSelf)]"

		divider_clean = {
			size = { 100% 1 }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			widget = {
				datacontext = "[TradeRoute.GetGoods]"
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 60 30 }
				using = goods_list_item
			}

			textbox = {
				text = "[TradeRoute.GetTradeQuantity|Dv][AddTextIf(GreaterThan_int32(TradeRoute.GetLevel, TradeRoute.CalcPredictedFinalLevel), '@arrow_down!')][AddTextIf(LessThan_int32(TradeRoute.GetLevel, TradeRoute.CalcPredictedFinalLevel), '@arrow_up!')]"
				visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 60 30 }
				margin_left = 5
				align = nobaseline
				tooltip = "TRADE_ROUTE_TOOLTIP"
				using = tooltip_above
				fontsize_min = 12
			}
			textbox = {
				text = "INACTIVE"
				visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 60 30 }
				align = nobaseline
				tooltip = "TRADE_ROUTE_TOOLTIP"
				using = tooltip_above
			}

			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 45 30 }

				icon = {
					size = { 36 36 }
					parentanchor = center
					visible = "[TradeRoute.IsConsideredImportForMarket( Market.Self )]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
					tooltip = "IMPORT_TRADE_ROUTE"
				}

				icon = {
					size = { 36 36 }
					parentanchor = center
					visible = "[Not(TradeRoute.IsConsideredImportForMarket( Market.Self ))]"
					texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
					tooltip = "EXPORT_TRADE_ROUTE"
				}
			}
			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 60 30 }

				tiny_flag = {
					datacontext = "[TradeRoute.GetOtherMarket(Market.Self).GetOwner]"
					parentanchor = center
				}
			}
			textbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 70 30 }
				raw_text = "@convoys! #v [TradeRoute.GetNumUsedConvoys]#!"
				tooltip = "TRADE_ROUTE_CONVOY_COST_TOOLTIP"
				elide = right
				fontsize_min = 12
				align = left|nobaseline
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0'))]"
			}
			textbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 70 30 }
				raw_text = "[GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] #v [TradeRoute.CalcProductivity|1+]#!"
				tooltip = "[TradeRoute.GetRevenueAfterTariffBreakdown]"
				align = left|nobaseline
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0'))]"
			}
			textbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 100 30 }
				raw_text = "[GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] #v [TradeRoute.CalcRevenueAfterTariff|D+]#!"
				tooltip = "[TradeRoute.GetRevenueAfterTariffBreakdown]"
				align = nobaseline
				alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0'))]"
			}
			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				size = { 45 30 }

				button_icon_cancel = {
					size = { 30 30 }
					parentanchor = center
					onclick = "[Execute( TradeRoute.Cancel )]"
					visible = "[IsValid( TradeRoute.Cancel )]"
					tooltip = "REMOVE_TRADE_ROUTE"
				}
			}
		}
	}	

	type trade_route_map_marker_list_item = button {
		using = default_button
		using = select_button_sound
		tooltip = "TRADE_ROUTE_TOOLTIP"
		onclick = "[InformationPanelBar.OpenMarketPanelTab( TradeRoute.GetOtherMarket(Market.Self), 'trade_routes' )]"
		parentanchor = hcenter

		flowcontainer = {
			resizeparent = yes
			margin_right = 5
			parentanchor = hcenter

			icon = {
				datacontext = "[TradeRoute.GetGoods]"
				parentanchor = vcenter
				texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
				size = { 40 40 }
				color = "[Goods.GetCategoryColor]"
				
				tooltipwidget = {
					FancyTooltip_Goods = {}
				}
				
				icon = {
					texture = "[Goods.GetTexture]"
					size = { 30 30 }
					parentanchor = center
				}
			}

			widget = { size = { 2 2 }}

			icon = {
				size = { 25 25 }
				parentanchor = left|vcenter
				visible = "[TradeRoute.IsConsideredImportForMarket( Market.Self )]"
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_import_lens_option.dds"
			}

			icon = {
				size = { 25 25 }
				parentanchor = left|vcenter
				visible = "[Not(TradeRoute.IsConsideredImportForMarket( Market.Self ))]"
				texture = "gfx/interface/icons/lens_toolbar_icons/trade_route_export_lens_option.dds"
			}

			widget = { size = { 2 2 }}
			
			# flags and arrow+number
			flowcontainer = {
				parentanchor = vcenter
				ignoreinvisible = yes

				textbox = {
					visible = "[NotEqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "[Negate_CFixedPoint(TradeRoute.GetTradeQuantitySignedFor(Market.Self))|=dv]"
					align = hcenter|nobaseline
					parentanchor = vcenter
					margin_left = 5
					margin_right = 10
				}

				textbox = {
					visible = "[EqualTo_CFixedPoint(TradeRoute.GetTradeQuantity, '(CFixedPoint)0')]"
					autoresize = yes
					text = "TRADE_ROUTE_ZERO_TRADES"
					align = nobaseline
					parentanchor = vcenter
				}
			}
		}
	}
}
