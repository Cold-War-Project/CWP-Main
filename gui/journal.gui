# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types journal
{
	type journal_panel = default_block_window {
		name = "journal_panel"
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/journal"
				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/journal_stop"
				}
			}
		}
		
		blockoverride "window_header_name"
		{
			text = "JOURNAL_WINDOW_HEADER"
		}

		blockoverride "fixed_top" {
			tab_buttons = {
				blockoverride "first_button" {
					text = "JOURNAL"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "JOURNAL"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "JOURNAL"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_journal"
				}

				blockoverride "second_button" {
					text = "DECISIONS"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "DECISIONS"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('decisions')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('decisions')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('decisions') )]"
				}
				blockoverride "second_button_selected" {
					text = "DECISIONS"
				}
			}
		}
		
		blockoverride "scrollarea_content" {
			
			flowcontainer = {
				direction = vertical
				using = default_list_position
				spacing = 15
				margin_top = 10
				
				### JOURNAL
				flowcontainer = {
					visible = "[InformationPanel.IsTabSelected('default')]"
					using = default_list_position
					direction = vertical
					using = default_content_fade
					
					### GAME OBJECTIVES
					default_header = {
						visible = "[GetPlayer.HasObjective]"
						blockoverride "text" {
							text = "[AccessPlayer.GetObjective.GetName]"
						}
					}

					empty_state = {
						blockoverride "visible" {
							 visible = "[And(IsDataModelEmpty(AccessPlayer.AccessActivePlayerObjectiveJournalEntries), GetPlayer.HasObjective)]"
						}
						blockoverride "text" {
							text = "[AccessPlayer.GetObjective.GetObjectiveType.GetIdleHeader]"
						}
						blockoverride "hint" {
							text = "[AccessPlayer.GetObjective.GetObjectiveType.GetIdleHint]"
						}
					}

					flowcontainer = {
						margin = { 0 10 }
						direction = vertical
						spacing = 2
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessActivePlayerObjectiveJournalEntries))]"
						datamodel = "[AccessPlayer.AccessActivePlayerObjectiveJournalEntries]"
						
						item = {
							journal_entry = {}
						}
					}

					### ACTIVE
					default_header = {
						blockoverride "text" {
							text = "ACTIVE_JOURNAL_ENTRIES"
						}
					}

					empty_state = {
						blockoverride "visible" {
							 visible = "[IsDataModelEmpty(AccessPlayer.AccessActiveNonPlayerObjectiveJournalEntries)]"
						}
						blockoverride "text" {
							text = "NO_JOURNAL_ENTRIES"
						}
					}

					flowcontainer = {
						margin = { 0 10 }
						direction = vertical
						parentanchor = hcenter
						datamodel = "[AccessPlayer.GetGroupsForActiveJournalEntries]"
						spacing = 10

						item = {
							flowcontainer = {
								direction = vertical
								textbox = {
									text = "[JournalEntryGroup.GetName]"
									autoresize = yes
									align = nobaseline
									default_format = "#title"
									margin_left = 3
								}							
								flowcontainer = {
									direction = vertical
									datamodel = "[JournalEntryGroup.GetActiveJournalEntryTypes(GetPlayer.Self)]"
									spacing = 2
									item = {
										journal_entry = {
											datacontext = "[AccessPlayer.GetJournalEntry(JournalEntryType.Self)]"
										}
									}
								}
							}
						}
					}

					### INACTIVE
					default_header = {
						visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessInactiveJournalEntries))]"
						blockoverride "text" {
							text = "INACTIVE_JOURNAL_ENTRIES"
						}
					}

					flowcontainer = {
						margin = { 0 10 }
						direction = vertical
						spacing = 10
						parentanchor = hcenter
						datamodel = "[AccessPlayer.GetGroupsForInActiveJournalEntries]"

						item = {
							flowcontainer = {
								direction = vertical
								textbox = {
									text = "[JournalEntryGroup.GetName]"
									autoresize = yes
									align = nobaseline
									default_format = "#title"
									margin_left = 3
								}							
								flowcontainer = {
									direction = vertical
									datamodel = "[JournalEntryGroup.GetInactiveJournalEntryTypes(GetPlayer.Self)]"
									spacing = 2
									item = {
										journal_entry = {
											datacontext = "[AccessPlayer.GetJournalEntry(JournalEntryType.Self)]"
											alpha = 0.75
											blockoverride "fontsize" {}
											blockoverride "iconsize" {
												size = { 35 35 }
											}
										}
									}
								}
							}
						}
					}
				}
				
				### DECISIONS
				flowcontainer = {
					visible = "[InformationPanel.IsTabSelected('decisions')]"
					using = default_list_position
					direction = vertical
					margin_bottom = 10
					using = default_content_fade

					
					textbox = {
						visible = "[IsDataModelEmpty(GetPlayer.GetDecisions)]"
						text = NO_DECISIONS
						autoresize = yes
						align = left|nobaseline
						using = fontsize_xxl
						parentanchor = top|hcenter
						margin_bottom = 25
						margin_top = 10
						alpha = 0.3
					}

					dynamicgridbox = {
						parentanchor = hcenter
						datamodel = "[GetPlayer.GetDecisions]"
						item = {
							flowcontainer = {
								margin = { 0 2 }
								direction = vertical
								
								decision = {
									minimumsize = { @panel_width -1 }
								}
							}
						}
					}
				}
			}
		}
	}

	### JOURNAL ENTRY
	type journal_entry = button {
		
		highlight_tutorial_ui = {
			visible = "[JournalEntry.IsBeingTutorialHighlighted]"
		}

		block "button_style" {
			using = default_button
		}
		onclick = "[InformationPanelBar.OpenJournalEntryPanel(JournalEntry.AccessSelf)]"
		enabled = "[JournalEntry.IsActive]"

		tooltipwidget = {
			FancyTooltip_JournalEntry = {}
		}

		onmousehierarchyenter = "[PdxGuiWidget.FindChild('journal_pin_button').InterruptThenTriggerAnimation('hide_journal_pin_button','show_journal_pin_button')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('journal_pin_button').InterruptThenTriggerAnimation('show_journal_pin_button','hide_journal_pin_button')]"
	
		block "background" {}
	
		flowcontainer = {
			resizeparent = yes
			block "minimumsize" {
				minimumsize = { @panel_width -1 }
			}
			block "flowcontainer_properties" {
				margin = { 10 8 }
				spacing = 10
			}

			flowcontainer = {
				direction = vertical
				
				# journal entry icon
				icon = {
					texture = "[JournalEntry.GetIcon]"
					block "iconsize" {
						size = { 40 40 }
					}
				}
				
				# completion in progress
				icon = {
					visible = "[JournalEntry.IsProgressing]"
					parentanchor = hcenter
					block "completing_iconsize" {
						size = { 20 20 }
					}
					texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
					tooltip = "JOURNAL_ENTRY_IN_PROGRESS"
					using = shimmer
					
					icon = {
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 300% 300% }
						alpha = 0.5
					}
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = vcenter

				# title
				textbox = {
					text = "[JournalEntry.GetName]"
					autoresize = yes
					align = left|nobaseline
					multiline = yes
					default_format = "#header"

					block "fontsize" {
						using = fontsize_large
					}
					
					block "textsize" {
						maximumsize = { 420 -1 }
						minimumsize = { 420 -1 }
					}
				}
				
				# status description
				textbox = {
					text = "[JournalEntry.GetStatusDesc]"
					visible = "[Not(StringIsEmpty(JournalEntry.GetStatusDesc))]"
					autoresize = yes					
					align = left|nobaseline
					multiline = yes
					block "textsize" {
						maximumsize = { 420 -1 }
						minimumsize = { 420 -1 }
					}
				}

				# number of possible actions
				textbox = {
					text = "JOURNAL_ENTRY_POSSIBLE_ACTIONS"
					visible = "[GreaterThan_int32(JournalEntry.GetNumPossibleScriptedButtons, '(int32)0')]"
					autoresize = yes					
					align = left|nobaseline
					multiline = yes
					block "textsize" {
						maximumsize = { 420 -1 }
						minimumsize = { 420 -1 }
					}
				}

				textbox = {
					
					autoresize = yes
				}
				
				# progress description
				textbox = {
					text = "[JournalEntry.GetProgressDesc]"
					tooltip = "[JournalEntry.GetGoalDesc]"
					autoresize = yes					
					align = left|nobaseline
					multiline = yes
					block "textsize" {
						maximumsize = { 420 -1 }
						minimumsize = { 420 -1 }
					}
				}

				# progress bar
				flowcontainer = {
					visible = "[And(JournalEntry.HasProgressBar, JournalEntry.IsActive)]"
					margin = { 0 5 }
					
					default_progressbar_horizontal = {
						block "progressbar_size" {
							size = { 420 6 }
						}
						blockoverride "values" {
							value = "[FixedPointToFloat(JournalEntry.GetGoalProgressPercent)]"
							min = 0
							max = 1
						}
					}
				}
				
				# time out info
				flowcontainer = {
					visible = "[And(JournalEntry.CanTimeOut, JournalEntry.IsActive)]"
					spacing = 5
					
					icon = {
						size = { 18 18 }
						texture = "gfx/interface/icons/generic_icons/clock.dds"
						parentanchor = vcenter
					}
					textbox = {
						text = "[JournalEntry.GetTimeoutTooltip]"
						autoresize = yes
						align = left|nobaseline
						parentanchor = vcenter
					}
				}
			}
		}

		# pin button
		widget = {
			size = { 23 23 }
			parentanchor = vcenter|right
			position = { -5 0 }
			visible = "[JournalEntry.IsActive]"

			button = {
				name = "journal_pin_button"
				texture = "gfx/interface/outliner/unpinned_icon.dds"
				using = check_button_sound
				size = { 100% 100% }
				visible = "[Not(JournalEntry.IsPinnedInOutliner)]"
				onclick = "[JournalEntry.TogglePinInOutliner]"
				tooltip = "PIN"
				parentanchor = center

				state = {
					name = hide_journal_pin_button
					trigger_on_create = yes
					alpha = 0
					duration = 0.2
					scale = 0.5
				}

				state = {
					name = show_journal_pin_button
					alpha = 1
					duration = 0.15
					scale = 1
				}
			}
			button = {
				using = check_button_sound
				texture = "gfx/interface/outliner/pinned_icon.dds"
				size = { 100% 100% }
				visible = "[JournalEntry.IsPinnedInOutliner]"
				onclick = "[JournalEntry.TogglePinInOutliner]"
				tooltip = "UNPIN"
				parentanchor = center
			}
		}
	}
	
	### DECISION
	type decision = container {
		maximumsize = { @panel_width_minus_10 -1 }
		minimumsize = { @panel_width_minus_10 -1 }
		
		flowcontainer = {
			margin = { 20 10 }
			direction = vertical 

			textbox = {
				text = "[Decision.GetName]"
				autoresize = yes
				align = left|nobaseline
				using = fontsize_large
				multiline = yes
				maximumsize = { 420 -1 }
				minimumsize = { 420 -1 }
				default_format = "#header"
			}

			textbox = {
				text = "[Decision.GetDesc]"
				autoresize = yes
				align = left|nobaseline
				multiline = yes
				maximumsize = { 420 -1 }
				minimumsize = { 420 -1 }
			}
		}
		
		button_icon_check = {
			parentanchor = right|vcenter
			size = { 50 50 }
			tooltip = "[Decision.GetTooltip( GetPlayer )]"
			enabled = "[IsValid( Decision.TakeDecision( GetPlayer ) )]"
			onclick = "[Execute( Decision.TakeDecision( GetPlayer ) )]"
		}
		
		divider_clean = {
			parentanchor = bottom
		}
	}
}