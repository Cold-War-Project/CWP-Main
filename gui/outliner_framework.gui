types outliner_framework {
	type outliner_type = widget {
		name = "outliner"
		visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
		using = default_fade_in_out

		### outliner
		outliner_content = {
			using = fullscreen_hide
		
			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.2
				position_x = 0
				alpha = 1
			}
			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.2
				position_x = 280
				alpha = 0
			}
		}
	}
	
	### outliner content
	type outliner_content = vbox {
		layoutpolicy_vertical = preferred
		layoutpolicy_horizontal = preferred
		margin_bottom = 10

		vbox = {
			using = clickthrough_blocker
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = preferred

			scrollarea = {
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = preferred
				preferscrollwidgetsize = yes

				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = vertical_scrollbar		
				}

				scrollwidget = {
					flowcontainer = {
						direction = vertical
						minimumsize = { 350 -1 }

						block "items" {}
					}
				}
			}
		}
		
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	# An Outliner Group, has a title and a list of items
	type outliner_group = flowcontainer {
		direction = vertical

		block "visibility" {
			visible = "[OutlinerEntry.IsShown]"
		}

		# The name of the group
		block "title" {
			expandable_outliner_entry = {
				blockoverride "texture" {
					using = expand_button_bg_left_fade
				}
				blockoverride "sound" {
					using = ui_pointer_over
				}
				blockoverride "text" {
					text = "[OutlinerEntry.GetTitle]"
				}
				blockoverride "tooltip" {
					tooltip = "OUTLINER_ENTRY_INSTRUCTION_OPEN"
				}
				blockoverride "onclick" {
					block "title_click" {
						onclick = "[OutlinerEntry.ToggleExpanded]"
					}
				}
				block "title_pin_buttons" {}
			}
		}
		
		# The list of the items within that group
		container = {
			block "list_visibility" {
				visible = "[OutlinerEntry.IsExpanded]"
			}
			dynamicgridbox = {
				block "list_position" {
					position = { 20 0 }
				}
				block "list_properties" {
					datamodel = "[OutlinerEntry.AccessSubEntries]"

					item = {
						block "item" {}
					}
				}
			}
		}
		
	}

	type pinnable_outliner_group = outliner_group {
		blockoverride "title_pin_buttons" {
			pin_buttons = {}
		}
	}

	# A generic Outliner Entry, can have pin/unpin buttons, a text, a place for additional info and expand/collapse buttons
	type outliner_entry = button {
		widget = {
			name = "expand_button"
			visible = "[OutlinerEntry.IsExpanded]"
		
			state = {
				name = _show

				start_sound = {
					 using = sfx_expand_button_sound
				}
			}
		}
		widget = {
			name = "expanded_button"
			visible = "[Not(OutlinerEntry.IsExpanded)]"
		
			state = {
				name = _show

				start_sound = {
					using = sfx_expanded_button_sound
				}
			}
		}
		widget = {
			name = "pinned_expand_button"
			visible = "[OutlinerEntry.IsPinnedExpanded]"
		
			state = {
				name = _show

				start_sound = {
					using = sfx_expand_button_sound
				}
			}
		}
		widget = {
			name = "pinned_expanded_button"
			visible = "[Not(OutlinerEntry.IsPinnedExpanded)]"
		
			state = {
				name = _show

				start_sound = {
					 using = sfx_expanded_button_sound
				}
			}
		}
		block "texture" {
			using = clean_button
		}

		block "onclick" {}
		block "onrightclick" {}
		block "tooltip" {}
		block "onhover" {}
		block "visibility" {
			visible = yes
		}

		onmousehierarchyenter = "[PdxGuiWidget.FindChild('pin_button').InterruptThenTriggerAnimation('hide_pin_button','show_pin_button')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('pin_button').InterruptThenTriggerAnimation('show_pin_button','hide_pin_button')]"
		
		flowcontainer = {
			resizeparent = yes

			widget = {
				block "entry_size" {
					size = { 280 30 }
				}

				block "pin_buttons" {}

				block "widget" {
					flowcontainer = {
						direction = horizontal
						block "position" {
							position = { 5 0 }
						}
						parentanchor = left|vcenter
						widgetanchor = left|vcenter

						block "icon" {}

						textbox = {
							block "expand_buttons_margin" {}
							align = left|nobaseline
							autoresize = yes
							elide = right
							parentanchor = vcenter
							fontsize_min = 14

							block "text_size" {
								minimumsize = { 240 -1 }
								maximumsize = { 240 -1 }
							}

							block "text" {
								raw_text = "#BOLD PLACEHOLDER_NAME#!"
							}
						}

						block "additional_info" {}
					}
				}

				block "expand_buttons" {}
			}	
		}
	}

	type pinnable_outliner_entry = outliner_entry {
		blockoverride "pin_buttons" {
			pin_buttons = {}
		}
	}

	type expandable_outliner_entry = outliner_entry {
		blockoverride "expand_buttons" {
			block "pinnable_expand_buttons" {
				expand_buttons = {}
			}
		}
		blockoverride "expand_buttons_margin" {
			margin_left = 25
		}
		container = {
			visible = "[Not(OutlinerEntry.IsExpanded)]"
			
			position = { -25 0 }
			parentanchor = right|vcenter
			
			textbox = {
				visible = "[GreaterThan_int32(GetDataModelSize(OutlinerEntry.AccessSubEntries), '(int32)0')]"
				text = "[GetDataModelSize(OutlinerEntry.AccessSubEntries)]"
				autoresize = yes
				align = nobaseline
			}
		}
	}

	type pinnable_expandable_outliner_entry = outliner_entry {
		blockoverride "pin_buttons" {
			pin_buttons = {}
		}
		blockoverride "expand_buttons" {
			block "pinnable_expand_buttons" {
				expand_buttons = {}
			}
		}
	}

	type pin_buttons = widget {
		size = { 23 23 }
		parentanchor = right|vcenter

		button = {

			blockoverride "sound" {
				using = check_button_sound
			}

			name = "pin_button"
			position = { 0 0 }
			parentanchor = center
			texture = "gfx/interface/outliner/unpinned_icon.dds"
			size = { 100% 100% }
			visible = "[Not(OutlinerEntry.IsPinned)]"
			onclick = "[OutlinerEntry.TogglePinned]"
			tooltip = "PIN"

			state = {
				name = hide_pin_button
				trigger_on_create = yes
				alpha = 0
				duration = 0.2
				scale = 0.5
			}

			state = {
				name = show_pin_button
				alpha = 1
				duration = 0.15
				scale = 1
			}
		}
		button = {

			blockoverride "sound" {
				using = check_button_sound
			}
			position = { 0 0 }
			texture = "gfx/interface/outliner/pinned_icon.dds"
			size = { 100% 100% }
			visible = "[OutlinerEntry.IsPinned]"
			onclick = "[OutlinerEntry.TogglePinned]"
			tooltip = "UNPIN"
		}
	}

	type expand_buttons = container {
		name = "expand_buttons"
		parentanchor = left|vcenter
		block "expand_buttons_visibility" {
			visible = "[Not(IsDataModelEmpty(OutlinerEntry.AccessSubEntries))]"
		}

		button = {
			blockoverride "sound" {
				using = ui_increment
			}
			using = expand_arrow
			position = { 7 0 }
			size = { 18 18 }
			tooltip = "EXPAND"
			
			block "expand_arrow_properties" {
				visible = "[Not(OutlinerEntry.IsExpanded)]"
				onclick = "[OutlinerEntry.ToggleExpanded]"
			}
		}
		
		button = {
			blockoverride "sound" {
				using = ui_decrement
			}
			using = expand_arrow_expanded
			position = { 7 0 }
			size = { 18 18 }
			tooltip = "COLLAPSE"
			
			block "collapse_arrow_properties" {
				visible = "[OutlinerEntry.IsExpanded]"
				onclick = "[OutlinerEntry.ToggleExpanded]"
			}
		}
	}

	type pinned_expand_buttons = expand_buttons {
		blockoverride "number_of_items" {}

		blockoverride "expand_arrow_properties" {
			visible = "[Not(OutlinerEntry.IsPinnedExpanded)]"
			onclick = "[OutlinerEntry.TogglePinnedExpanded]"
		}
		blockoverride "collapse_arrow_properties" {
			visible = "[OutlinerEntry.IsPinnedExpanded]"
			onclick = "[OutlinerEntry.TogglePinnedExpanded]"
		}
	}
}

# this template does not work (PSGE-2629)
template pinned_overrides
{
	blockoverride "visibility" {
		visible = "[OutlinerEntry.IsShownPinned]"
	}
	blockoverride "title_click" {
		onclick = "[OutlinerEntry.TogglePinnedExpanded]"
	}
	blockoverride "list_visibility" {
		visible = "[OutlinerEntry.IsPinnedExpanded]"
	}
	blockoverride "pinnable_expand_buttons" {
		pinned_expand_buttons = {}
	}
}
