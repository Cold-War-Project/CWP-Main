# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 440
@panel_width_minus_20_half = 260	# used to be 220
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types war_panel
{
	type war_panel = default_block_window {
		name = "war_panel"
		
		blockoverride "window_header_name"
		{
			raw_text = "#BOLD [WarPanel.GetWar.GetName]#!"
		}
		
		blockoverride "fixed_top" {
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('default')]"
					onclick = "[WarPanel.ToggleShowPeaceDeal]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "WAR_PANEL_OVERVIEW"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_war_overview_tab"
				}

				blockoverride "second_button"
				{
					text = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('peace')]"
					onclick = "[WarPanel.ToggleShowPeaceDeal]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('peace')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('peace') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "WAR_PANEL_PEACE"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_peace_tab"
				}
			}
		}
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				parentanchor = hcenter
				direction = vertical

				### THE 2 SIDES TOP INFO
				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_20 -1 }
					maximumsize = { @panel_width_plus_20 -1 }
					margin = { 10 0 }
					margin_top = 10

					background = {
						fittype = start
						texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					}
					
					background = {	
						using = light_bg
						margin_right = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_left.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					background = {	
						using = dark_area
						margin_left = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_right.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					# divider
					vertical_divider_stronger_full = { 
						parentanchor = hcenter
					}

					# top info
					container = {
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }

						# War icon + support
						widget = {
							size = { @panel_width 60 }
							parentanchor = hcenter
							datacontext = "[WarPanel.GetWar]"
							
							widget = {
								parentanchor = hcenter
								size = { 130 30 }
								position = { -65 17 }

								background = {
									margin = { 5 3 }
									using = fade_left_simple
								}

								textbox= {
									datacontext = "[WarPanel.AccessWar]"
									parentanchor = center
									align = center|nobaseline
									text = "WAR_SUPPORT_LEFT_SIDE"
									tooltip = "WAR_PANEL_LEFT_LEADER_TOOLTIP"
									autoresize = yes
									using = fontsize_large
								}
							}

							widget = {
								parentanchor = hcenter
								size = { 130 30 }
								position = { 65 17 }

								background = {
									margin = { 5 3 }
									using = fade_right_simple
								}

								textbox= {
									datacontext = "[WarPanel.AccessWar]"
									parentanchor = center
									align = center|nobaseline
									autoresize = yes
									text = "WAR_SUPPORT_RIGHT_SIDE"
									tooltip = "WAR_PANEL_RIGHT_LEADER_TOOLTIP"
									using = fontsize_large
								}
							}
							
							icon = {
								texture = "gfx/interface/outliner/war_button_icon.dds"
								size = { 70 60 }
								parentanchor = hcenter
							}
						}

						### Left Side
						war_participant_side = {
							position = { 0 5 }
							blockoverride "parentanchor" {
								parentanchor = left
							}

							blockoverride "side_datacontext"
							{
								datacontext = "[WarPanel.GetWar]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), WarPanel.GetRightLeader.IsLocalPlayer)]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), Not(WarPanel.GetRightLeader.IsLocalPlayer))]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_LEFT_ADJECTIVE_SIDE"
								}
							}

							# Battalions
							blockoverride "side_num_battalions" {

								blockoverride "parentanchor" {
									parentanchor = left|vcenter
								}

								textbox = {
									text = "WAR_LEFT_SIDE_NUM_BATTALIONS"

									tooltip = "WAR_LEFT_SIDE_NUM_BATTALIONS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							# Flotillas
							blockoverride "side_num_flotillas" {

								blockoverride "parentanchor" {
									parentanchor = left|vcenter
								}

								textbox = {
									text = "WAR_LEFT_SIDE_NUM_FLOTILLAS"

									tooltip = "WAR_LEFT_SIDE_NUM_FLOTILLAS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							blockoverride "wounded" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_wounded]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_LEFT_SIDE_WOUNDED_NUMBER"
											tooltip = "[WarPanel.GetLeftWoundedBreakdown]"
										}
									}
								}
							}

							blockoverride "dead" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_dead]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_LEFT_SIDE_DEAD_NUMBER"
											tooltip = "[WarPanel.GetLeftDeadBreakdown]"
										}
									}
								}
							}

							blockoverride "cost_of_war" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "COST_OF_WAR"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "COST_OF_WAR_LEFT_SIDE_NUMBER"
											tooltip = [WarPanel.GetLeftCostOfWarDesc]
										}
									}
								}
							}
						}

						### Right side
						war_participant_side = {
							position = { 0 5 }
							blockoverride "parentanchor" {
								parentanchor = right
							}

							blockoverride "side_datacontext" {
								datacontext = "[WarPanel.GetWar]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), WarPanel.GetLeftLeader.IsLocalPlayer)]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), Not(WarPanel.GetLeftLeader.IsLocalPlayer))]"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 160 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_RIGHT_ADJECTIVE_SIDE"
								}
							}

							# Battalions
							blockoverride "side_num_battalions" {

								blockoverride "parentanchor" {
									parentanchor = right|vcenter
								}

								textbox = {
									datacontext = "[WarPanel.GetWar]"
									text = "WAR_RIGHT_SIDE_NUM_BATTALIONS"

									tooltip = "WAR_RIGHT_SIDE_NUM_BATTALIONS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							# Flotillas
							blockoverride "side_num_flotillas" {

								blockoverride "parentanchor" {
									parentanchor = right|vcenter
								}

								textbox = {
									datacontext = "[WarPanel.GetWar]"
									text = "WAR_RIGHT_SIDE_NUM_FLOTILLAS"

									tooltip = "WAR_RIGHT_SIDE_NUM_FLOTILLAS_TOOLTIP"
									using = tooltip_ws

									align = center|nobaseline
									autoresize = yes
								}
							}

							blockoverride "wounded" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_wounded]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_RIGHT_SIDE_WOUNDED_NUMBER"
											tooltip = "[WarPanel.GetRightWoundedBreakdown]"
										}
									}
								}
							}

							blockoverride "dead" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											raw_text = "[concept_dead]:"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "WAR_RIGHT_SIDE_DEAD_NUMBER"
											tooltip = "[WarPanel.GetRightDeadBreakdown]"
										}
									}
								}
							}

							blockoverride "cost_of_war" {
								# Dead label + value
								widget = {
									size = { 250 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "COST_OF_WAR"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "COST_OF_WAR_RIGHT_SIDE_NUMBER"
											tooltip = [WarPanel.GetRightCostOfWarDesc]
										}
									}
								}
							}
						}
						
					}
					
					# Present countries
					container = {
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						# Left
						war_present_countries_side = {
							parentanchor = left
							
							blockoverride "parentanchor_flag_and_text" {
								parentanchor = left
							}

							blockoverride "datacontext" {
								datacontext = "[WarPanel.GetLeftLeader]"
							}

							blockoverride "right_info" {
								widget = {
									size = { 140 65 }

									background = {
										visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
										using = entry_bg
									}

									flowcontainer = {
										parentanchor = left|vcenter
										direction = vertical

										button = {
											tooltip = "MOBILIZED_REGULARS_WITH_GENERAL_TOOLTIP_LEFT"
											using = default_button
											parentanchor = left
											visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
											size = { 140 25 }
											onclick = "[InformationPanelBar.OpenMilitaryPanelTab('army')]"
											using = fontsize_large

											textbox = {
												margin_left = 10
												text = "WAR_LEADER_LEFT_NUM_BATTALIONS"
												align = center|nobaseline
												autoresize = yes
												parentanchor = left
											}
										}

										button = {
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP_LEFT"
											using = default_button
											parentanchor = left
											visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
											size = { 140 25 }
											onclick = "[InformationPanelBar.OpenMilitaryPanelTab('navy')]"
											using = fontsize_large

											textbox = {
												margin_left = 10
												text = "WAR_LEADER_LEFT_NUM_FLOTILLAS"
												align = center|nobaseline
												autoresize = yes
												parentanchor = left
											}
										}

										textbox = {
											visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
											tooltip = "MOBILIZED_REGULARS_WITH_GENERAL_TOOLTIP_LEFT"
											datacontext = "[WarPanel.GetWar]"
											margin_left = 10
											parentanchor = left
											text = "WAR_LEADER_LEFT_NUM_BATTALIONS"
											align = center|nobaseline
											autoresize = yes
										}

										textbox = {
											visible = "[Not(WarPanel.GetLeftLeader.IsLocalPlayer)]"
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP_LEFT"
											datacontext = "[WarPanel.GetWar]"
											margin_left = 10
											parentanchor = left
											text = "WAR_LEADER_LEFT_NUM_FLOTILLAS"
											align = center|nobaseline
											autoresize = yes
										}
									}
								}
							}

							blockoverride "header" {
								textbox = {
									visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
									text = "WAR_ALLIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), WarPanel.GetRightLeader.IsLocalPlayer)]"
									text = "WAR_ENEMIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetLeftLeader.IsLocalPlayer), Not(WarPanel.GetRightLeader.IsLocalPlayer))]"
									datacontext = "[WarPanel.GetLeftLeader]"
									text = "WAR_INITIATOR_ALLIES"
									align = left|nobaseline
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
							}

							blockoverride "parentanchor_allies" {
								parentanchor = left
							}

							blockoverride "datamodel" {
								datamodel = "[WarPanel.GetLeftWarParticipantsExcludingLeader]"
							}

							blockoverride "visibility_allies_empty_state" {
								visible = "[LessThan_int32(GetDataModelSize(WarPanel.GetLeftWarParticipantsExcludingLeader), '(int32)1')]"
							}
						}

						# Right
						war_present_countries_side = {
							parentanchor = right
							
							blockoverride "parentanchor" {
								parentanchor = right
							}

							blockoverride "parentanchor_flag_and_text" {
								parentanchor = right
							}

							blockoverride "datacontext" {
								datacontext = "[WarPanel.GetRightLeader]"
							}

							blockoverride "left_info" {
								widget = {
									size = { 140 65 }

									background = {
										using = entry_bg
									}

									flowcontainer = {
										parentanchor = right|vcenter
										direction = vertical

										textbox = {
											tooltip = "MOBILIZED_REGULARS_WITH_GENERAL_TOOLTIP_RIGHT"
											margin_right = 10
											parentanchor = right
											text = "WAR_LEADER_RIGHT_NUM_BATTALIONS"
											align = center|nobaseline
											autoresize = yes
										}

										textbox = {
											tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP_RIGHT"
											margin_right = 10
											parentanchor = right
											text = "WAR_LEADER_RIGHT_NUM_FLOTILLAS"
											align = center|nobaseline
											autoresize = yes
										}
									}
								}
							}

							blockoverride "header" {
								textbox = {
									visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
									text = "WAR_ALLIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), WarPanel.GetLeftLeader.IsLocalPlayer)]"
									text = "WAR_ENEMIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
								textbox = {
									visible = "[And(Not(WarPanel.GetRightLeader.IsLocalPlayer), Not(WarPanel.GetLeftLeader.IsLocalPlayer))]"
									datacontext = "[WarPanel.GetRightLeader]"
									text = "WAR_TARGET_ALLIES"
									align = left|nobaseline
									parentanchor = right
									autoresize = yes
									maximumsize = { 240 60 }
									elide = right
									multiline = yes
									fontsize_min = 12
									using = fontsize_large
								}
							}

							blockoverride "parentanchor_war_leader_header" {
								parentanchor = right
							}

							blockoverride "visibility_you_tag" {
								visible = "[WarPanel.GetRightLeader.IsLocalPlayer]"
							}

							blockoverride "datamodel" {
								datamodel = "[WarPanel.GetRightWarParticipantsExcludingLeader]"
							}

							blockoverride "parentanchor_allies" {
								layoutanchor = topright
								parentanchor = right
							}

							blockoverride "parentanchor_allies_empty_state" {
								parentanchor = right
							}

							blockoverride "visibility_allies_empty_state" {
								visible = "[LessThan_int32(GetDataModelSize(WarPanel.GetRightWarParticipantsExcludingLeader), '(int32)1')]"
							}
						}
					}
				}

				### BATTLES
				default_header = {
					blockoverride "text" {
						text = "ACTIVE_BATTLES"
					}
					parentanchor = hcenter
					visible = "[Not(IsDataModelEmpty(WarPanel.AccessWar.GetActiveBattles))]"
				}

				flowcontainer = {
					spacing = 10
					direction = vertical
					parentanchor = hcenter
					margin = { 0 10 }

					datamodel = "[WarPanel.AccessWar.GetActiveBattles]"

					item = {
						battle_item = {}
					}
				}

				### FRONTS
				default_header = {
					parentanchor = hcenter
					blockoverride "text" {
						text = "ACTIVE_FRONTS"
					}
				}

				widget = { size = { 10 10 }}

				flowcontainer = {
					spacing = 10
					direction = vertical
					parentanchor = hcenter

					datamodel = "[WarPanel.AccessFronts]"

					item = {
						front_list_item = {}
					}

					empty_state = {
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(WarPanel.AccessFronts)]"
						}
						blockoverride "text" {
							text = "NO_ACTIVE_FRONTS"
						}
					}
				}

				widget = { size = { 10 10 }}

				### ENDED BATTLES
				default_header = {
					blockoverride "text" {
						text = "ENDED_BATTLES"
					}
					parentanchor = hcenter
					visible = "[Not(IsDataModelEmpty(WarPanel.AccessWar.GetEndedBattles))]"
				}

				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					margin = { 0 10 }

					datamodel = "[WarPanel.AccessWar.GetEndedBattles]"

					item = {
						ended_battle_item = {}
					}
				}
			}
			
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('peace')]"
				using = default_content_fade
				using = default_list_position
				direction = vertical
				spacing = 10
				minimumsize = { @panel_width_plus_20 -1 }

				widget = { size = { 0 0 } }

				### CURRENT PEACE DEAL HEADER
				default_header = {
					parentanchor = hcenter
					blockoverride "text" {
						text = "WAR_PANEL_CURRENT_PEACE_DEAL"
					}
				}			

				textbox = {
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					autoresize = yes
					parentanchor = hcenter
					using = fontsize_xxl
					using = empty_state_text_properties
					text = "WAR_PANEL_NO_CURRENT_PEACE_DEAL"
				}	
				
				textbox = {
					visible = "[WarPanel.GetWar.HasActivePeaceDeal]"
					autoresize = yes
					parentanchor = hcenter
					using = fontsize_xl
					text = "WAR_PANEL_CURRENT_PEACE_DEAL_PROPOSER"
				}					

				widget = { 
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					size = { 10 10 } 
				}	

				### PROPOSE PEACE DEAL HEADER
				default_header = {
					visible = "[Not(WarPanel.GetWar.HasActivePeaceDeal)]"
					parentanchor = hcenter
					blockoverride "text" {
						text = "WAR_PANEL_PROPOSE_PEACE_DEAL"
					}
				}	

				textbox = {
					visible = "[Or(WarPanel.GetWar.HasActiveWhitePeaceDeal,WarPanel.GetWar.HasProposedWhitePeaceDeal(GetPlayer))]"
					autoresize = yes
					parentanchor = hcenter
					using = fontsize_xl
					text = "WAR_PANEL_WHITE_PEACE"
					default_format = "#b"
				}					
			
				container = {
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_20 -1 }
					
					### CENTER DIVIDER
					vertical_divider = {
						parentanchor = hcenter
					}
					
					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						spacing = 20
						
						### PRESSED WARGOALS
						container = {
							minimumsize = { @panel_width -1 }
						
							### ATTACKERS
							flowcontainer = {
								position = { 0 5 }
								parentanchor = left
								direction = vertical
								datacontext = "[WarPanel.AccessWar]"
								minimumsize = { @panel_width_half -1 }

								dynamicgridbox = {
									using = default_list_position
									name = "attacker_wargoal_list"
									datamodel = "[WarPanel.AccessAttackersWarGoals]"

									item = {
										wargoal_item = {
											visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]"
											datacontext = "[WarGoalPanelPair.AccessWarGoal]"
										}
									}
								}
							}

							### DEFENDERS
							flowcontainer = {
								position = { 0 5 }
								parentanchor = right
								direction = vertical
								datacontext = "[WarPanel.AccessWar]"
								minimumsize = { @panel_width_half -1 }

								dynamicgridbox = {
									using = default_list_position
									name = "defender_wargoal_list"
									datamodel = "[WarPanel.AccessDefendersWarGoals]"

									item = {
										wargoal_item = {
											visible = "[WarGoal.IsPressedInShownPeaceDeal(GetPlayer)]"
											datacontext = "[WarGoalPanelPair.AccessWarGoal]"
										}
									}
								}
							}
						}
					}
				}

				widget = { 
					size = { 10 10 }
				}

				### UNPRESSED WARGOALS
				textbox = {
					autoresize = yes
					parentanchor = hcenter
					text = "UNPRESSED_WAR_GOALS"
				}			
				
				container = {
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_20 -1 }
					
					### CENTER DIVIDER
					vertical_divider = {
						parentanchor = hcenter
					}
					
					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						spacing = 20

						container = {
							minimumsize = { @panel_width -1 }
						
							### ATTACKERS
							flowcontainer = {
								position = { 0 5 }
								parentanchor = left
								direction = vertical
								datacontext = "[WarPanel.AccessWar]"
								minimumsize = { @panel_width_half -1 }
								maximumsize = { @panel_width_half -1 }

								empty_state = {
									blockoverride "visible" {
										visible = no
										#does not work as we need to check for only unpressed war goals - PRCAL-21770
										#visible "[IsDataModelEmpty(WarPanel.AccessAttackersWarGoals)]"
									}
									blockoverride "text" {
										text = "NO_UNPRESSED_WAR_GOALS"
									}
									blockoverride "size" {
										minimumsize = { @panel_width_half -1 }
										maximumsize = { @panel_width_half -1 }
									}
									blockoverride "fontsize" {
										using = fontsize_xl
									}
								}
								
								dynamicgridbox = {
									using = default_list_position
									name = "attacker_wargoal_list"
									datamodel = "[WarPanel.AccessAttackersWarGoals]"

									item = {
										wargoal_item = {
											visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]"
											datacontext = "[WarGoalPanelPair.AccessWarGoal]"
										}
									}
								}
							}

							### DEFENDERS
							flowcontainer = {
								position = { 0 5 }
								parentanchor = right
								direction = vertical
								datacontext = "[WarPanel.AccessWar]"
								minimumsize = { @panel_width_half -1 }

								empty_state = {
									blockoverride "visible" {
										visible = no
										#does not work as we need to check for only unpressed war goals - PRCAL-21770
										#visible "[IsDataModelEmpty(WarPanel.AccessDefendersWarGoals)]"
									}
									blockoverride "text" {
										text = "NO_UNPRESSED_WAR_GOALS"
									}
									blockoverride "size" {
										minimumsize = { @panel_width_half -1 }
										maximumsize = { @panel_width_half -1 }
									}
									blockoverride "fontsize" {
										using = fontsize_xl
									}
								}
								
								dynamicgridbox = {
									using = default_list_position
									name = "defender_wargoal_list"
									datamodel = "[WarPanel.AccessDefendersWarGoals]"

									item = {
										wargoal_item = {
											datacontext = "[WarGoalPanelPair.AccessWarGoal]"
											visible = "[Not(WarGoal.IsPressedInShownPeaceDeal(GetPlayer))]"
										}
									}
								}
							}
						}
					}
				}
				
				widget = { size = { 5 5 }}	

				button = {
					parentanchor = hcenter
					onclick = "[Execute( WarPanel.GetWar.ToggleAcceptPeace( GetPlayer.Self ) )]"
					enabled = "[IsValid( WarPanel.GetWar.ToggleAcceptPeace( GetPlayer.Self ) )]"
					visible = "[And(WarPanel.GetWar.HasActivePeaceDeal,WarPanel.GetWar.MustRatifyPeaceDeal( GetPlayer.Self ))]"
					using = default_button
					using = confirm_button_sound
					size = { @panel_width 70 }
					datacontext = "[WarPanel.GetWar]"
					tooltip = "WAR_PANEL_PEACE_TOOLTIP"
					
					checkbutton = {
						size = { 50 50 }
						parentanchor = vcenter
						position = { 5 -1 }
						texture = "gfx/interface/buttons/button_icons/thumbsupdown.dds"
						framesize = { 116 116 }
						onclick = "[Execute( WarPanel.GetWar.ToggleAcceptPeace( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.ToggleAcceptPeace( GetPlayer.Self ) )]"
						checked = "[WarPanel.GetWar.WouldAcceptActivePeaceDeal( GetPlayer.Self ) ]"
					}

					flowcontainer = {
						parentanchor = center
						widgetanchor = center
						direction = vertical
						
						textbox = {
							text = WAR_PANEL_ACCEPT_PEACE
							autoresize = yes
							using = fontsize_xl
							align = left|nobaseline
							visible = "[Not(WarPanel.GetWar.WouldAcceptActivePeaceDeal( GetPlayer.Self ))]"
							parentanchor = hcenter
						}

						textbox = {
							text = WAR_PANEL_NOT_ACCEPT_PEACE
							autoresize = yes
							using = fontsize_xl
							align = left|nobaseline
							visible = "[WarPanel.GetWar.WouldAcceptActivePeaceDeal( GetPlayer.Self ) ]"
							parentanchor = hcenter
						}

						textbox = {
							text = "CLICK_TO_CHANGE_RESPONSE"
							autoresize = yes
							align = left|nobaseline
							parentanchor = hcenter
						}

					}
				}	
				
				### NEGOTIATORS
				container = {
					datacontext = "[WarPanel.AccessWar]"
					minimumsize = { @panel_width_plus_20 -1 }
					
					flowcontainer = {
						name = "attacker_list"
						position = { 10 0 }
						parentanchor = left
						datamodel = "[War.AccessAttackers]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[WarParticipant.IsPeaceNegotiator]"
							}
						}
					}
					flowcontainer = {
						name = "defender_list"
						position = { -10 0 }
						parentanchor = right
						datamodel = "[War.AccessDefenders]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[WarParticipant.IsPeaceNegotiator]"
							}
						}
					}
				}				

				section_header_button = {
					#visible = "[Or(Not(IsDataModelEmpty( War.AccessAttackers )), Not(IsDataModelEmpty( War.AccessDefenders )))]"
					
					blockoverride "left_text" {
						text = "NON_NEGOTIATORS"
					}
					
					blockoverride "onclick" {
						onclick = "[GetVariableSystem.Toggle('non-negotiators')]"
					}
					
					blockoverride "onclick_showmore" {
						visible = "[Not(GetVariableSystem.Exists('non-negotiators'))]"
					}

					blockoverride "onclick_showless" {
						visible = "[GetVariableSystem.Exists('non-negotiators')]"
					}
				}

				### NON-NEGOTIATORS
				container = {
					visible = "[GetVariableSystem.Exists('non-negotiators')]"
					datacontext = "[WarPanel.AccessWar]"
					minimumsize = { @panel_width_plus_20 -1 }
					
					flowcontainer = {
						name = "attacker_list"
						position = { 10 0 }
						parentanchor = left
						datamodel = "[War.AccessAttackers]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[Not(WarParticipant.IsPeaceNegotiator)]"
							}
						}
					}
					flowcontainer = {
						name = "defender_list"
						position = { -10 0 }
						parentanchor = right
						datamodel = "[War.AccessDefenders]"
						direction = vertical
						spacing = 5
						margin_bottom = 10

						item = {
							war_participant_item = {
								visible = "[Not(WarParticipant.IsPeaceNegotiator)]"
							}
						}
					}
				}				
			}
		}
		
		### FIXED BOTTOM AREA
		blockoverride "fixed_bottom"
		{
			fixed_bottom_spacer = {}
			
			### Mobilize button
			widget = {
				visible = "[WarPanel.GetWar.IsParticipant(GetPlayer.Self)]"
				size = { 500 50 }

				button = {
					### TODO: Replace with a MobilizeAllFormations function
					#enabled = "[IsValid( GetPlayer.MobilizeAllMilitaryFormations )]"
					enabled = no

					parentanchor = right|vcenter
					using = default_button
					using = diplomatic_play_mobilize_button_sound
					size = { 470 50 }
					using = fontsize_large

					### TODO: Replace with a MobilizeAllFormations function
					#onclick = "[PopupManager.ToggleMobilizeAllMilitaryFormations]"
					#tooltip = "[GetDesc( GetPlayer.MobilizeAllMilitaryFormations )]"
					tooltip = "MOBILIZE_ALL_MILITARY_FORMATIONS_TOOLTIP"

					textbox = {
						text = "MOBILIZE_ALL_MILITARY_FORMATIONS"
						align = center|nobaseline
						parentanchor = center
						margin_right = 30
						size = { 470 30 }
						fontsize_min = 12
						elide = right
						using = fontsize_large
					}
				}

				mobilization_icon_big = {
					parentanchor = left|vcenter
				}
			}
			
			flowcontainer = {
				direction = vertical
				visible = "[InformationPanel.IsTabSelected('peace')]"										
				
				### PROPOSE PEACE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsWarLeader( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_PROPOSE_PEACE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_PROPOSE_PEACE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[Execute( WarPanel.GetWar.ProposePeaceDeal( GetPlayer.Self ) )]"
						enabled = "[And(WarPanel.GetWar.WouldProposedPeaceDealBeAccepted(GetPlayer),IsValid( WarPanel.GetWar.ProposePeaceDeal( GetPlayer )))]"
					}
					checkbutton = {
						size = { 60 60 }
						alwaystransparent = yes
						parentanchor = vcenter
						texture = "gfx/interface/buttons/button_icons/thumbsupdown.dds"
						framesize = { 116 116 }
						checked = "[WarPanel.GetWar.WouldProposedPeaceDealBeAccepted( GetPlayer.Self ) ]"
					}					
				}	

				### WHITE PEACE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsWarLeader( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_SET_WHITE_PEACE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_SET_WHITE_PEACE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[Execute( WarPanel.GetWar.SetWhitePeace( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.SetWhitePeace( GetPlayer.Self ) )]"
					}
					checkbutton = {
						size = { 60 60 }
						alwaystransparent = yes
						parentanchor = vcenter
						texture = "gfx/interface/buttons/button_icons/thumbsupdown.dds"
						framesize = { 116 116 }
						checked = "[WarPanel.GetWar.WouldWhitePeaceDealBeAccepted]"
					}					
				}					
				
				### CAPITULATE
				widget = {
					size = { 535 60 }
					visible = "[WarPanel.GetWar.IsParticipant( GetPlayer.Self )]"
					tooltip = "WAR_PANEL_CAPITULATE_TOOLTIP"
					
					button = {
						using = default_button
						text = "WAR_PANEL_CAPITULATE"
						size = { 520 50 }
						parentanchor = center
						using = fontsize_large
						onclick = "[PopupManager.AskConfirmation( WarPanel.GetWar.Capitulate( GetPlayer.Self ) )]"
						enabled = "[IsValid( WarPanel.GetWar.Capitulate( GetPlayer.Self ) )]"
					}
					icon = {
						size = { 60 60 }
						texture = "gfx/interface/backgrounds/round_button_bg.dds"
						alwaystransparent = yes
						parentanchor = vcenter
						
						icon = {
							texture = "gfx/interface/icons/generic_icons/capitulate.dds"
							size = { 45 45 }
							alwaystransparent = yes
							parentanchor = center
						}
					}
				}
							
			}
		
			widget = { size = { 1 10 }}
		}
	}

	### WAR PARTICIPANT ITEM
	type war_participant_item = container {

		datacontext = "[WarParticipant.GetCountry]"
		minimumsize = { @panel_width_half 115 }
		
		background = {
			using = entry_bg_simple
		}

		flowcontainer = {
			direction = vertical
			parentanchor = vcenter
			margin_left = 5
			
			flowcontainer = {
				margin_left = 4
				small_flag = {
					mobilization_icon_flag = {}
				}
			}
			
			widget = { size = { 5 5 }}

			textbox = {
				margin_top = 5
				autoresize = yes
				raw_text = "#variable @battalions![Country.GetBattalions|0]#! "
				align = center|nobaseline
				alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
				tooltip = "PANEL_MILITARY_ARMY_CURRENT_BATTALIONS_TOOLTIP"
			}
			textbox = {
				autoresize = yes
				raw_text = "#variable @flotillas![Country.GetWarships|0]#!"
				align = center|nobaseline
				alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
				tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
			}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = vcenter|right
			margin_bottom = 5

			### peace acceptance - active peace deal
			flowcontainer = {
				visible = "[And(War.HasActivePeaceDeal,WarParticipant.MustRatifyPeaceDeal)]"
				tooltip = "[War.GetActivePeaceDealAcceptanceTooltip(WarParticipant.GetCountry)]"
				parentanchor = right
				margin_right = 10
				minimumsize = { -1 32 }

				icon = {
					visible = "[WarParticipant.WouldAcceptActivePeaceDeal]"									
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
					parentanchor = vcenter
				}

				icon = {
					visible = "[Not(WarParticipant.WouldAcceptActivePeaceDeal)]"
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
					parentanchor = vcenter
				}

				textbox = {
					raw_text = "#variable [War.GetActivePeaceDealAcceptanceScore(WarParticipant.GetCountry)|+=0]#!"
					visible = "[Not(Country.IsPlayer)]"
					autoresize = yes
					align = left|nobaseline
					parentanchor = vcenter
					margin_left = 7
					using = fontsize_large
				}
				
				### hooman players (can be swayed by chocolate)
				textbox = {
					text = FE_PLAYER
					visible = "[Country.IsPlayer]"
					align = left|nobaseline
					parentanchor = vcenter
					autoresize = yes
					default_format = "#title"
					margin_left = 7
				}
			}
			
			### peace acceptance - proposed peace deal
			flowcontainer = {
				visible = "[And(Not(WarParticipant.GetCountry.IsLocalPlayer),And(Not(War.HasActivePeaceDeal),WarParticipant.IsPeaceNegotiator))]"
				tooltip = "[War.GetProposedPeaceDealAcceptanceTooltip(WarParticipant.GetCountry,GetPlayer)]"
				parentanchor = right
				margin_right = 10
				minimumsize = { -1 32 }
			
				icon = {
					visible = "[WarParticipant.WouldAcceptProposedPeaceDeal(GetPlayer)]"									
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
					parentanchor = vcenter
				}

				icon = {
					visible = "[Not(WarParticipant.WouldAcceptProposedPeaceDeal(GetPlayer))]"
					size = { 25 25 }
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
					parentanchor = vcenter
				}

				textbox = {
					raw_text = "#variable [War.GetProposedPeaceDealAcceptanceScore(WarParticipant.GetCountry, GetPlayer)|+=0]#!"
					visible = "[Not(Country.IsPlayer)]"
					autoresize = yes
					align = left|nobaseline
					parentanchor = vcenter
					margin_left = 7
					using = fontsize_large
				}
				
				### hooman players (can be swayed by chocolate)
				textbox = {
					text = FE_PLAYER
					visible = "[Country.IsPlayer]"
					align = left|nobaseline
					parentanchor = vcenter
					autoresize = yes
					default_format = "#title"
					margin_left = 7
				}
			}

			widget = {
				size = { 32 32 }
				visible = "[Not(And(WarParticipant.IsPeaceNegotiator,War.AllowsNegotiatedPeace))]"
			}
				

			### war support
			textbox = {
				margin_top = 5
				raw_text = "[concept_war_support]: #variable [War.GetWarSupport(Country.Self)|+=0]#!"
				autoresize = yes
				align = right|nobaseline
				tooltip = "WAR_PANEL_PARTICIPANT_TOOLTIP"
				parentanchor = right
				margin_right = 10
			}

			### capitulation desire
			textbox = {
				visible = "[Not(Country.IsPlayer)]"
				margin_top = 5
				raw_text = "[concept_capitulation_desire]: #variable [War.GetCapitulationDesire(Country.Self)|+=0]#!"
				autoresize = yes
				align = right|nobaseline
				tooltip = "[War.GetCapitulationDesireDesc(Country.Self)]"
				parentanchor = right
				margin_right = 10
			}

			### capitulation desire - human
			textbox = {
				visible = "[Country.IsPlayer]"
				margin_top = 5
				raw_text = "[concept_capitulation_desire]: Player"
				autoresize = yes
				align = right|nobaseline
				parentanchor = right
				margin_right = 10
			}

			### Casualties
			textbox = {
				alpha = "[TransparentIfZero_int64(WarParticipant.GetNumDead)]"
				text = "WAR_PANEL_PARTICIPANT_DEAD"
				autoresize = yes
				align = right|nobaseline
				tooltip = "WAR_PANEL_PARTICIPANT_DEAD_TOOLTIP"
				parentanchor = right
				margin_right = 10
			}

			### Wounded
			textbox = {
				alpha = "[TransparentIfZero_int64(WarParticipant.GetNumWounded)]"
				text = "WAR_PANEL_PARTICIPANT_WOUNDED"
				autoresize = yes
				align = right|nobaseline
				tooltip = "WAR_PANEL_PARTICIPANT_WOUNDED_TOOLTIP"
				parentanchor = right
				margin_right = 10
			}
		}
	}

	type war_participant_side = flowcontainer {
		minimumsize = { @panel_width_half -1 }
		maximumsize = { @panel_width_half -1 }
		direction = vertical
		spacing = 2
		margin = { 10 10 }

		block "side_datacontext" {
		}

		block "parentanchor" {
		}

		# Identity of side
		block "side_name" {
		}

		# War Units
		widget = { size = { 1 10 }}
		flowcontainer = {
			spacing = 8
			block "parentanchor" {
			}

			block "side_num_battalions" {
			}
		}

		widget = { size = { 1 5 }}

		# Flotillas
		flowcontainer = {
			spacing = 8
			block "parentanchor" {
			}
			
			block "side_num_flotillas" {
			}
		}

		widget = { size = { 1 10 }}

		block "dead" {
		}

		widget = { size = { 1 5 }}

		block "wounded" {		
		}

		widget = { size = { 1 10 }}

		block "cost_of_war" {
		}
	}
	type war_present_countries_side = flowcontainer {
		minimumsize = { @panel_width_half -1 }
		maximumsize = { @panel_width_half -1 }
		margin_bottom = 20
		margin_left = 10
		direction = vertical
		spacing = 2
		
		divider_clean = {
			size = { 90% 2 }
			parentanchor = hcenter
		}

		flowcontainer = {
			direction = vertical
			spacing = 8	
			datacontext = "[WarPanel.GetWar]"
			margin_top = 8

			block "parentanchor"
			{
				parentanchor = left
			}
			flowcontainer = {
				margin = { 0 0 }
				block "parentanchor_war_leader_header" {
					parentanchor = left
				}
				spacing = 5
				
				textbox = {
					autoresize = yes
					block "header_text" {
						text = "WAR_LEADER"
					}
					align = nobaseline
					using = fontsize_large
					default_format = "#title"
				}

				textbox = {
					block "visibility_you_tag" {
						visible = "[WarPanel.GetLeftLeader.IsLocalPlayer]"
					}
					autoresize = yes
					using = fontsize_large
					text = "YOU"
					align = nobaseline
					parentanchor = vcenter
				}
			}

			flowcontainer = {
				spacing = 8

				block "parentanchor_flag_and_text" {}

				block "datacontext" {
					datacontext = "[WarPanel.GetLeftLeader]"
				}

				block "left_info" {}

				widget = {
					size = { 96 64 }
					icon = {
						parentanchor = center
						visible = "[Country.IsLocalPlayer]"
						using = rotate_glow_animation_02
						size = { 200 200 }
						position = { 0 0 }
					}
					large_flag = {

						block "parentanchor_large_flag" {}

						blockoverride "mobilized_visibility" {
							visible = "[Country.IsMobilized]"
						}
					}
				}

				block "right_info" {}
			}

			widget = { size = { 2 2 }}

			divider_clean = {
				size = { 100% 2 }
				parentanchor = hcenter
			}

			block "header" {
			}

			fixedgridbox = {
				block "datamodel" {}
				datamodel_wrap = 7
				addcolumn = 35
				addrow = 27
				flipdirection = yes
			
				block "parentanchor_allies" {
					layoutanchor = topleft
					parentanchor = left
				}
			
				item = {
					tiny_flag = {
						datacontext = "[WarParticipant.GetCountry]"
			
						visible = "[Not(WarParticipant.IsWarLeader)]"
			
						blockoverride "mobilized_visibility" {
							visible = "[Country.IsMobilized]"
						}
						icon = {
							parentanchor = center
							visible = "[Country.IsLocalPlayer]"
							using = rotate_glow_animation_02
							size = { 85 85 }
							position = { 0 0 }
						}
					}
				}
			}
			
			textbox = {
				block "visibility_allies_empty_state" {}
				text = "NO_ALLIES"
				block "parentanchor_allies_empty_state" {
					parentanchor = left
				}
				using = empty_state_text_properties
				autoresize = yes
				align = nobaseline
			}
		}
	}

	### FRONT LIST ITEM
	type front_list_item = container {
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }
		parentanchor = hcenter
		alwaystransparent = no

		block "datacontext" {}

		icon = {
			visible = "[Front.IsBeingHighlighted]"
			using = highlighted_square_selection
		}

		onmousehierarchyenter = "[AccessHighlightManager.HighlightFront(Front.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		using = entry_bg_fancy

		flowcontainer = {
			margin = { 10 0 }
			margin_bottom = 10
			direction = vertical
			spacing = 5
			parentanchor = hcenter

			# header
			widget = {
				size = { @panel_width 40 }
				parentanchor = hcenter
				
				background = {
					using = dark_area
					using = frame_small_mask_top
				}
				
				flowcontainer = {
					parentanchor = left|vcenter
					spacing = 5
					margin = { 10 0 }

					icon = {
						datacontext = "[Front]"
						parentanchor = vcenter
						tooltip = "FRONT_UNDEFENDED"
						using = tooltip_ne

						block "visibility_icon" {
							visible = "[Front.IsUndefendedBy(GetPlayer.Self)]"
						}
						size = { 25 25 }
						texture = "gfx/interface/icons/generic_icons/warning.dds"
					}

					textbox = {
						block "front_name" {
							text = "[Front.GetName]"
						}
						autoresize = yes
						align = left|nobaseline
						parentanchor = left|vcenter
					}

					button_icon_goto = {
						datacontext = "[Front]"
						size = { 25 25 }
						onclick = "[InformationPanelBar.OpenFrontPanel(Front.AccessSelf)]"
						tooltip = "GO_TO_BUTTON_FRONT"
					}
				}
			}
			
			# bottom info
			container = {
				minimumsize = { @panel_width_minus_20 -1 }
				maximumsize = { @panel_width_minus_20 -1 }
				block "datacontext" {}
				parentanchor = hcenter

				#Left
				flowcontainer = {
					direction = vertical
					parentanchor = left
					spacing = 5
					margin_left = 5

					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Front.GetLeftTopFiveArmies))]"
						spacing = 10
						parentanchor = left

						overlappingitembox = {
							visible = "[Not(IsDataModelEmpty(Front.GetLeftTopFiveArmies))]"
							parentanchor = vcenter
							autoresize = yes
							maximumsize = { 180 40 }

							datamodel = "[Front.GetLeftTopFiveArmies]"

							item ={
								button_icon_round = {
									datacontext = "[FrontParticipant.AccessArmy]"
									using = tooltip_above

									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {}
									}

									blockoverride "size" {
										size = { 40 40 }
									}
									blockoverride "icon_size" {
										size = { 75% 75% }
									}

									block "onclick" {
										onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( FrontParticipant.AccessArmy.AccessSelf, 'default' )]"
										onrightclick = "[RightClickMenuManager.ShowForMilitaryFormation(FrontParticipant.AccessArmy.AccessSelf)]"
									}

									blockoverride "icon" {
										### TODO - Add a GetTexture function for Military Formations
										#texture = "[FrontParticipant.GetArmy.GetTexture]"
										texture = "gfx/interface/icons/military_icons/military_formation_identity_icons/army_01.dds"
									}
								}
							}
						}

						textbox = {
							visible = "[GreaterThan_int32(Front.GetLeftNumArmiesBeyondTopFiveArmies, '(int32)0')]"
							align = left|nobaseline
							parentanchor = vcenter
							autoresize = yes

							raw_text = "#v [Front.GetLeftNumArmiesBeyondTopFiveArmies|=]#!"
							tooltip = "[Front.GetLeftNumArmiesBeyondTopFiveArmiesTooltip]"
						}
					}

					textbox = {
						visible = "[IsDataModelEmpty(Front.GetLeftTopFiveArmies)]"
						align = nobaseline
						autoresize = yes
						minimumsize = { -1 40 } #same height as war_character_portrait
						maximumsize = { -1 40 } #same height as war_character_portrait
						text = "FRONT_SIDE_NO_ARMIES"
					}

					flowcontainer = {
						spacing = 8

						# Morale
						morale_bar = {
							parentanchor = vcenter
							tooltip = "[Front.GetLeftCombatUnitsMoraleDesc]"

							blockoverride "morale_value" {
								value = "[FixedPointToFloat( Front.GetLeftCombatUnitsMoraleRaw )]"
							}
							blockoverride "morale_color" {
								color = "[GetMoraleColorVec( Front.GetLeftCombatUnitsMoraleRaw )]"
							}
						}

						textbox = {
							align = left|nobaseline
							autoresize = yes
							text = "FRONT_SIDE_LEFT_NUM_UNITS"
						}
					}
				}

				#Right
				flowcontainer = {
					parentanchor = right
					direction = vertical
					spacing = 5
					margin_left = 5

					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Front.GetRightTopFiveArmies))]"
						spacing = 10
						parentanchor = right

						textbox = {
							visible = "[GreaterThan_int32(Front.GetRightNumArmiesBeyondTopFiveArmies, '(int32)0')]"
							align = right|nobaseline
							parentanchor = vcenter
							autoresize = yes

							raw_text = "#v [Front.GetRightNumArmiesBeyondTopFiveArmies|=]#!"
							tooltip = "[Front.GetRightNumArmiesBeyondTopFiveArmiesTooltip]"
						}

						overlappingitembox = {
							visible = "[Not(IsDataModelEmpty(Front.GetRightTopFiveArmies))]"
							righttoleft = yes
							parentanchor = vcenter
							autoresize = yes
							maximumsize = { 180 40 }

							datamodel = "[Front.GetRightTopFiveArmies]"

							item ={
								button_icon_round = {
									datacontext = "[FrontParticipant.AccessArmy]"
									using = tooltip_above

									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {}
									}

									blockoverride "size" {
										size = { 40 40 }
									}
									blockoverride "icon_size" {
										size = { 75% 75% }
									}

									block "onclick" {
										onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( FrontParticipant.AccessArmy.AccessSelf, 'default' )]"
										onrightclick = "[RightClickMenuManager.ShowForMilitaryFormation(FrontParticipant.AccessArmy.AccessSelf)]"
									}

									blockoverride "icon" {
										### TODO - Add a GetTexture function for Military Formations
										#texture = "[MilitaryFormation.GetTexture]"
										texture = "gfx/interface/icons/military_icons/military_formation_identity_icons/army_01.dds"
									}
								}
							}
						}
					}

					textbox = {
						visible = "[IsDataModelEmpty(Front.GetRightTopFiveArmies)]"
						parentanchor = right
						align = nobaseline
						autoresize = yes
						minimumsize = { -1 40 }
						maximumsize = { -1 40 }
						text = "FRONT_SIDE_NO_ARMIES"
					}

					flowcontainer = {
						parentanchor = right
						spacing = 8

						textbox = {
							parentanchor = vcenter
							align = right|nobaseline
							autoresize = yes
							text = "FRONT_SIDE_RIGHT_NUM_UNITS"
						}

						# Morale
						morale_bar = {
							parentanchor = vcenter
							tooltip = "[Front.GetRightCombatUnitsMoraleDesc]"

							blockoverride "morale_value" {
								value = "[FixedPointToFloat( Front.GetRightCombatUnitsMoraleRaw )]"
							}
							blockoverride "morale_color" {
								color = "[GetMoraleColorVec( Front.GetRightCombatUnitsMoraleRaw )]"
							}
						}
					}
				}

				# Front map marker icon
				icon = {
					texture = "gfx/interface/map_markers/front_indicator.dds"
					size = { 60 60 }
					tooltip = "[Front.GetPlayerAdvantageDesc]"

					visible = "[And(Not( IsDataModelEmpty(Front.AccessLeftCountries)), Not(IsDataModelEmpty(Front.AccessRightCountries)))]"
					framesize = { 188 188 }
					frame = "[Front.GetAdvantageFrame]"
					using = tooltip_below
					parentanchor = center
					
					textbox = {
						visible = "[Not(StringIsEmpty( Front.GetPlayerAdvantageDesc ))]"
						using = tooltip_above
						raw_text = "#bold [Front.GetPlayerAdvantageRaw|+]#!"
						autoresize = yes
						align = nobaseline
						parentanchor = center
					}
				}
			}
		}
	}

	type war_character_portrait = widget {

		size = { 40 40 }

		datacontext = "[FrontParticipant.AccessCharacter]"

		character_portrait_small = {

			parentanchor = center

		}

		icon = {

			datacontext = "[Character.GetCountry]"

			tooltipwidget = {
				FancyTooltip_Country = {}
			}

			size = { 21 14 }
			texture = "[Country.GetFlag.GetSmallFlagTexture]"
			frame = "[Country.GetFlag.GetSmallFlagFrame]"
			framesize = "[GetSmallFlagFrameSize]"
			using = flag_overlay
		}
	}
}
