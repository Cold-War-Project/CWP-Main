# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 440
@panel_width_minus_20_half = 260	# used to be 220
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types front_panel_types
{
	type front_panel = default_block_window_two_lines {
		name = "front_panel"
		datacontext = "[FrontPanel.AccessFront]"
		
		blockoverride "window_header_name"
		{
			raw_text = "#BOLD [FrontPanel.GetFront.GetName]#!"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "FRONT_IN_WAR_OR_DP_SUBTITLE"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[Front.AccessDiplomaticPlay.AccessWar]"
				size = { 30 30 }
				onclick = "[WarManager.ToggleWarPanel( War.AccessSelf )]"
				tooltip = "GO_TO_BUTTON_WAR"
			}
		}

		blockoverride "fixed_top" {
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "OVERVIEW"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('default')]"
					onclick = "[FrontPanel.ToggleShowPastBattles]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "OVERVIEW"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_front_overview_tab"
				}				

				blockoverride "second_button"
				{
					text = "FRONT_PANEL_BATTLES"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "FRONT_PANEL_BATTLES"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('battles')]"
					onclick = "[FrontPanel.ToggleShowPastBattles]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('battles')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('battles') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "FRONT_PANEL_BATTLES"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_peace_tab"
				}
			}		
		}
		
		blockoverride "scrollarea_content"
		{

			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position

				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_20 -1 }
					maximumsize = { @panel_width_plus_20 -1 }

					background = {
						fittype = start
						texture = "gfx/interface/illustrations/top_illus/top_illu_fronts_2.dds"
					}
					
					background = {	
						using = light_bg
						margin_right = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_left.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					background = {	
						using = dark_area
						margin_left = -280
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_right.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					# divider
					vertical_divider_stronger_full = { 
						parentanchor = hcenter
					}

					# SIDES
					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						# CENTER ICONS
						container = {
							parentanchor = hcenter
							
							# Front map marker icon
							icon = {
								position = { 0 100 }
								texture = "gfx/interface/map_markers/front_indicator.dds"
								size = { 60 60 }
								tooltip = "[Front.GetPlayerAdvantageDesc]"

								visible = "[And(Not(StringIsEmpty( Front.GetPlayerAdvantageDesc )), And(Not( IsDataModelEmpty( Front.AccessLeftCountries ) ), Not( IsDataModelEmpty( Front.AccessRightCountries ) ) ) ) ]"
								framesize = { 188 188 }
								frame = "[Front.GetAdvantageFrame]"
								using = tooltip_below
								parentanchor = hcenter
								
								textbox = {
									visible = "[Not(StringIsEmpty( Front.GetPlayerAdvantageDesc ))]"
									using = tooltip_above
									raw_text = "#bold [Front.GetPlayerAdvantageRaw|+]#!"
									autoresize = yes
									align = center|nobaseline
									parentanchor = center
								}
							}
							
							icon = {
								position = { 0 165 }
								texture = "gfx/interface/map_markers/battle_icon.dds"
								size = { 70 70 }
								parentanchor = hcenter
							}
						}

						### Left Side
						country_participant_side = { 
							blockoverride "parentanchor" {
								parentanchor = left
							}
			
							blockoverride "parentanchor_large_flag" {
								parentanchor = left
							}

							blockoverride "side_datacontext"
							{
								datacontext = "[Front.AccessLeftTheater]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[Theater.GetOwner.IsPlayer]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Not(Theater.GetOwner.IsPlayer), Front.AccessRightTheater.GetOwner.IsPlayer)]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = left
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(Theater.GetOwner.IsPlayer), Not(Front.AccessRightTheater.GetOwner.IsPlayer))]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = left
									text = "[Theater.GetOwner.GetNameNoFlag]"
								}
							}

							# Combat units
							blockoverride "side_num_units" {
								# Morale
								morale_bar = {
									parentanchor = left|vcenter
									tooltip = "[Front.GetLeftCombatUnitsMoraleDesc]"
									
									blockoverride "morale_value" {
										value = "[FixedPointToFloat( Front.GetLeftCombatUnitsMoraleRaw )]"
									}
									blockoverride "morale_color" {
										color = "[GetMoraleColorVec( Front.GetLeftCombatUnitsMoraleRaw )]"
									}
								}

								textbox = {
									datacontext = "[FrontPanel.AccessFront]"
									text = "FRONT_SIDE_LEFT_NUM_UNITS"
									tooltip = "[Front.GetNumLeftCombatUnitsBreakdown]"

									align = center|nobaseline
									parentanchor = left|vcenter
									autoresize = yes
								}
							}

							blockoverride "offense_power" {
								# Offense icon/value
								widget = {
									size = { 200 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "OFFENSE"
										}

										icon = {
											size = { 20 20 }
											texture = "gfx/interface/icons/military_icons/offense.dds"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "OFFENSE_LEFT_VALUE"
										}
									}
								}
							}

							blockoverride "defense_power" {		
								# Defence icon/value
								widget = {
									size = { 200 20 }
									parentanchor = left

									background = {
										margin = { 5 3 }
										using = fade_right_simple
									}
									
									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "DEFENSE"
										}

										# TODO: Defence value
										icon = {
											size = { 20 20 }
											texture = "gfx/interface/icons/military_icons/defense.dds"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "DEFENSE_LEFT_VALUE"
										}
									}
								}
							}
						}

						### Right side
						country_participant_side = {
							blockoverride "parentanchor" {
								parentanchor = right
							}

							blockoverride "parentanchor_large_flag" {
								parentanchor = right
							}

							blockoverride "side_datacontext" {
								datacontext = "[Front.AccessRightTheater]"
							}

							blockoverride "side_name" {
								textbox = {
									visible = "[Theater.GetOwner.IsPlayer]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_YOUR_SIDE"
								}
								textbox = {
									visible = "[And(Front.AccessLeftTheater.GetOwner.IsPlayer, Not(Theater.GetOwner.IsPlayer))]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = right
									text = "FRONT_ENEMY_SIDE"
								}
								textbox = {
									visible = "[And(Not(Front.AccessLeftTheater.GetOwner.IsPlayer), Not(Theater.GetOwner.IsPlayer))]"
									align = left|nobaseline
									autoresize = yes
									using = fontsize_xl
									parentanchor = right
									text = "[Theater.GetOwner.GetNameNoFlag]"
								}
							}

							blockoverride "side_num_units" {
								textbox = {
									datacontext = "[FrontPanel.AccessFront]"
									text = "FRONT_SIDE_RIGHT_NUM_UNITS"
									tooltip = "[Front.GetNumRightCombatUnitsBreakdown]"

									align = center|nobaseline
									parentanchor = left|vcenter
									autoresize = yes
								}

								# Morale
								morale_bar = {
									parentanchor = left|vcenter
									tooltip = "[Front.GetRightCombatUnitsMoraleDesc]"

									blockoverride "morale_value" {
										value = "[FixedPointToFloat( Front.GetRightCombatUnitsMoraleRaw )]"
									}
									blockoverride "morale_color" {
										color = "[GetMoraleColorVec( Front.GetRightCombatUnitsMoraleRaw )]"
									}
								}		
							}

							blockoverride "offense_power" {
								# Offense icon/value
								widget = {
									size = { 200 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_left_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "OFFENSE_RIGHT_VALUE"
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										icon = {
											size = { 20 20 }
											texture = "gfx/interface/icons/military_icons/offense.dds"
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "OFFENSE"
										}
									}
								}
							}

							blockoverride "defense_power" {		
								# Defence icon/value
								widget = {
									size = { 200 20 }
									parentanchor = right

									background = {
										margin = { 5 3 }
										using = fade_left_simple
									}

									hbox = {
										spacing = 5

										textbox = {
											align = left|nobaseline
											autoresize = yes
											text = "DEFENSE_RIGHT_VALUE"
										}
										
										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
										}

										icon = {
											size = { 20 20 }
											texture = "gfx/interface/icons/military_icons/defense.dds"
										}

										textbox = {
											align = right|nobaseline
											autoresize = yes
											text = "DEFENSE"
										}
									}
								}
							}

						}
					}
					
					# PRESENT COUNTRIES
					flowcontainer = {
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						parentanchor = hcenter

						# Left
						present_countries_side = {}

						# Right
						present_countries_side = {
							blockoverride "parentanchor" {
								parentanchor = right
							}
							blockoverride "parentanchor_gridbox" {
								layoutanchor = topright
								parentanchor = right
							}

							blockoverride "datamodel" {
								datamodel = "[Front.AccessRightCountries]"
							}
						}
					}
				}
			
				### Active battles
				active_battles = {
					blockoverride "header_visible" {
						visible = "[Or(GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgressFormations, '(CFixedPoint)0'), GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgressFormations, '(CFixedPoint)0'))]"
					}

					blockoverride "main_list_visible" {
						visible = "[Or(GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgressFormations, '(CFixedPoint)0'), GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgressFormations, '(CFixedPoint)0'))]"
					}

					blockoverride "first_visible" {
						visible = "[GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgressFormations, '(CFixedPoint)0')]"
					}

					blockoverride "first_you_allies" {
						text = "YOU_AND_ALLIES_FIRST_FORMATIONS"
					}

					blockoverride "first_enemies" {
						text = "ENEMIES_FIRST_FORMATIONS"
					}

					blockoverride "first_tooltip" {
						tooltip = "ADVANCEMENT_PROGRESS_BAR_FIRST_FORMATIONS_TOOLTIP"
					}

					blockoverride "first_progressbar" {
						value = "[FixedPointToFloat( Front.GetFirstAdvanceProgressPercentFormations )]"
					}

					blockoverride "first_values" {
						raw_text = "#bold [Front.GetFirstAdvanceProgressFormations|1] / [Front.GetRequiredAdvanceProgressForBattle|0]#!"
					}

					blockoverride "second_visible" {
						visible = "[GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgressFormations, '(CFixedPoint)0')]"
					}

					blockoverride "second_you_allies" {
						text = "YOU_AND_ALLIES_SECOND_FORMATIONS"
					}

					blockoverride "second_enemies" {
						text = "ENEMIES_SECOND_FORMATIONS"
					}

					blockoverride "second_tooltip" {
						tooltip = "ADVANCEMENT_PROGRESS_BAR_SECOND_FORMATIONS_TOOLTIP"
					}

					blockoverride "second_progressbar" {
						value = "[FixedPointToFloat( Front.GetSecondAdvanceProgressPercentFormations )]"
					}

					blockoverride "second_values" {
						raw_text = "#bold [Front.GetSecondAdvanceProgressFormations|1] / [Front.GetRequiredAdvanceProgressForBattle|0]#!"
					}
				}

				### Participating generals
				flowcontainer = {
					direction = vertical
					parentanchor = hcenter
					margin_bottom = 5

					# Header if player left
					default_header_2texts = {
						using = default_list_position
						blockoverride "text1" {
							text = "FRONT_PRESENT_FORMATIONS_PLAYER"
						}

						blockoverride "text2" {
							text = "FRONT_PRESENT_FORMATIONS_ENEMY"
						}

						# If player present
						visible = "[And(Front.AccessLeftTheater.GetOwner.IsPlayer, Not(Front.AccessRightTheater.GetOwner.IsPlayer))]"
					}

					# Header if player right
					default_header_2texts = {
						using = default_list_position
						blockoverride "text1" {
							text = "FRONT_PRESENT_FORMATIONS_ENEMY"
						}

						blockoverride "text2" {
							text = "FRONT_PRESENT_FORMATIONS_PLAYER"
						}

						# If player present
						visible = "[And(Not(Front.AccessLeftTheater.GetOwner.IsPlayer), Front.AccessRightTheater.GetOwner.IsPlayer)]"
					}

					# Header if spectator
					default_header_2texts = {
						using = default_list_position
						blockoverride "text1" {
							text = "FRONT_PRESENT_FORMATIONS_INITIATOR"
						}

						blockoverride "text2" {
							text = "FRONT_PRESENT_FORMATIONS_TARGET"
						}

						# If spectating
						visible = "[And(Not(Front.AccessLeftTheater.GetOwner.IsPlayer), Not(Front.AccessRightTheater.GetOwner.IsPlayer))]"
					}

					# Content container
					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width_plus_14 -1 }
						maximumsize = { @panel_width_plus_14 -1 }

						# Center decoration
						widget = {
							size = { 2 100% }
							parentanchor = hcenter

							background = {	
								texture = "gfx/interface/dividers/divider_clean_vertical.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								texture_density = 2
								margin = { 0 1 }
								alpha = 0.5

								modify_texture = {
									texture = "gfx/interface/masks/fade_vertical_bottom.dds"
									spriteType = Corneredstretched
									spriteborder = { 0 0 }
									blend_mode = alphamultiply
								}
							}
						}

						### Left side
						flowcontainer = {
							minimumsize = { @panel_width_plus_14_half 130 }
							direction = vertical

							# Highlight left background
							widget = {
								size = { 100% 100% }
								parentanchor = right
								visible = "[Front.AccessLeftTheater.GetOwner.IsPlayer]"

								background = {	
									using = light_bg
									alpha = 0.08
									margin = { 1 1 }
									
									modify_texture = {
										texture = "gfx/interface/masks/fade_horizontal_less_left.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = alphamultiply
									}
									modify_texture = {
										texture = "gfx/interface/masks/fade_vertical_bottom.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = alphamultiply
									}
								}
							}



							front_participants_formations_list = {
								blockoverride "visible" {
									visible = "[Not(IsDataModelEmpty(Front.AccessLeftParticipants))]"
								}
								blockoverride "datamodel" {
									datamodel = "[Front.AccessLeftParticipants]"
								}
							}

							textbox = {
								visible = "[And( IsDataModelEmpty(Front.AccessLeftParticipants), IsDataModelEmpty(Front.AccessLeftPlayerArmies) )]"
								maximumsize = { 170 -1 }
								parentanchor = hcenter
								margin_top = 40
								autoresize = yes
								align = center|nobaseline
								multiline = yes
								text = "FRONT_PANEL_NO_PRESENT_FORMATIONS"
							}
						}

						### Right side
						flowcontainer = {
							parentanchor = right
							minimumsize = { @panel_width_plus_14_half 130 }
							direction = vertical
					
							# Highlight right background
							widget = {
								size = { 100% 100% }
								parentanchor = left
								visible = "[Front.AccessRightTheater.GetOwner.IsPlayer]"

								background = {	
									using = light_bg
									alpha = 0.08
									margin = { 1 1 }
									
									modify_texture = {
										texture = "gfx/interface/masks/fade_horizontal_less_right.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = alphamultiply
									}
									modify_texture = {
										texture = "gfx/interface/masks/fade_vertical_bottom.dds"
										spriteType = Corneredstretched
										spriteborder = { 0 0 }
										blend_mode = alphamultiply
									}
								}
							}


							front_participants_formations_list = {
								blockoverride "visible" {
									visible = "[Not(IsDataModelEmpty(Front.AccessRightParticipants))]"
								}
								blockoverride "datamodel" {
									datamodel = "[Front.AccessRightParticipants]"
								}
							}

							textbox = {
								visible = "[And( IsDataModelEmpty(Front.AccessRightParticipants), IsDataModelEmpty(Front.AccessRightPlayerArmies) )]"
								maximumsize = { 170 -1 }
								parentanchor = hcenter
								margin_top = 40
								autoresize = yes
								align = center|nobaseline
								multiline = yes
								text = "FRONT_PANEL_NO_PRESENT_FORMATIONS"
							}
						}
					}
				}

				### DEBUG INFO
				textbox = {
					parentanchor = hcenter
					text = "FRONT_PANEL_DEBUG_INFO"
					maximumsize = { @panel_width -1 }
					max_width = @panel_width_minus_10
					autoresize = yes
					multiline = yes
					align = left|nobaseline
					visible = "[InDebugMode]"
				}
			}

			### HISTORY LOG
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('battles')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position

				### Active battles
				active_battles = {}

				### ENDED LAND BATTLES 
				flowcontainer = {
					margin_bottom = 15
					spacing = 5
					parentanchor = hcenter
					direction = vertical
					
					default_header = {
						parentanchor = hcenter
						blockoverride "text" {
							text = "ENDED_LAND_BATTLES"
						}
					}

					dynamicgridbox = {
						visible = "[Not(IsDataModelEmpty(Front.AccessEndedBattles))]"
						parentanchor = hcenter
						datamodel = "[Front.AccessEndedBattles]"
						item = {
							ended_battle_item = {}
						}
					}

					empty_state = {
						blockoverride "visible" {
							visible = "[IsDataModelEmpty(Front.AccessEndedBattles)]"
						}
						blockoverride "text" {
							text = "FRONT_NO_ENDED_BATTLES"
						}
					}
				}
			}
		}

		blockoverride "goto_visibility" {
			visible = yes
		}

		blockoverride "goto_properties" {
			onclick = "[Front.ZoomToFront]"
			tooltip = "ZOOM_TO_FRONT"
			enabled = "[Not( Front.IsZoomingToFront )]"
		}
	}
	
	type country_participant_side = flowcontainer {
		minimumsize = { @panel_width_half -1 }
		maximumsize = { @panel_width_half -1 }
		direction = vertical
		spacing = 2
		margin = { 10 10 }

		block "side_datacontext" {
		}

		block "parentanchor" {
		}

		# Identity of side
		block "side_name" {
		}

		widget = { size = { 1 10 }}

		widget = {
			block "parentanchor_large_flag" {}
			datacontext = "[Theater.GetOwner]"
			size = { 96 64 }
			
			icon = {
				parentanchor = center
				visible = "[Country.IsPlayer]"
				using = rotate_glow_animation_02
				size = { 200 200 }
				position = { 0 0 }
			}
			
			large_flag = {

				blockoverride "mobilized_visibility" {
					visible = "[Country.IsMobilized]"
				}
			}
		}

		# Front units
		margin_widget = { size = { 1 10 }}
		flowcontainer = {
			spacing = 8
			block "parentanchor" {
			}

			block "side_num_units" {
			}
		}

		margin_widget = { size = { 1 5 }}

		# Garrisoned units
		flowcontainer = {
			spacing = 8
			block "parentanchor" {
			}
			
			block "garrisoned_units" {
			}
		}

		margin_widget = { size = { 1 5 }}

		block "offense_power" {
		}

		margin_widget = { size = { 1 5 }}

		block "defense_power" {		
		}
	}

	type active_battles = flowcontainer {
		### ACTIVE BATTLES
		direction = vertical
		parentanchor = hcenter
		spacing = 5

		flowcontainer = {
			spacing = 5
			parentanchor = hcenter
			direction = vertical
			margin_bottom = 10

			default_header = {
				parentanchor = hcenter
				blockoverride "text" {
					text = "ACTIVE_BATTLES"
				}
			}


			dynamicgridbox = {
				parentanchor = hcenter
				datamodel = "[Front.AccessActiveBattles]"
				visible = "[Not(IsDataModelEmpty(Front.AccessActiveBattles))]"

				item = {
					battle_item = {}
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(Front.AccessActiveBattles)]"
				}
				blockoverride "text" {
					text = "FRONT_NO_ACTIVE_BATTLES"
				}
			}

			default_header = {
				block "header_visible" {
					visible = "[Or(GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgress, '(CFixedPoint)0'), GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgress, '(CFixedPoint)0'))]"
				}

				parentanchor = hcenter
				blockoverride "text" {
					text = "[concept_advancement_progress]"
				}
			}

			flowcontainer = {
				spacing = 15
				parentanchor = hcenter

				block "main_list_visible" {
					visible = "[Or(GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgress, '(CFixedPoint)0'), GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgress, '(CFixedPoint)0'))]"
				}
				widget = {
					size = { 250 48 }

					flowcontainer = {
						direction = vertical
						minimumsize = { 250 -1 }
						spacing = 5
						block "first_visible" {
							visible = "[GreaterThan_CFixedPoint(Front.GetFirstAdvanceProgress, '(CFixedPoint)0')]"
						}

						textbox = {
							block "first_you_allies" {
								text = "YOU_AND_ALLIES_FIRST"
							}
							autoresize = yes
							align = left|nobaseline
							visible = "[Front.IsParticipantOrAllyInFirst( GetPlayer.Self )]"
						}

						textbox = {
							block "first_enemies" {
								text = "ENEMIES_FIRST"
							}
							autoresize = yes
							align = left|nobaseline
							visible = "[Front.IsParticipantOrAllyInSecond( GetPlayer.Self )]"
						}

						default_progressbar_horizontal = {
							parentanchor = hcenter
							block "first_tooltip" {
								tooltip = "ADVANCEMENT_PROGRESS_BAR_FIRST_TOOLTIP"
							}
							using = tooltip_below
							size = { 250 20 }
							
							blockoverride "values" {
								min = 0
								max = 1
								block "first_progressbar" {
									value = "[FixedPointToFloat( Front.GetFirstAdvanceProgressPercent )]"
								}
							}

							textbox = {
								parentanchor = center
								autoresize = yes
								block "first_values" {
									raw_text = "#bold [Front.GetFirstAdvanceProgress|1] / [Front.GetRequiredAdvanceProgressForBattle|0]#!"
								}
								align = left|nobaseline
							}
						}
					}
				}
				
				vertical_divider_full = {}

				widget = {
					size = { 250 48 }

					flowcontainer = {
						direction = vertical
						minimumsize = { 250 -1 }
						spacing = 5
						block "second_visible" {
							visible = "[GreaterThan_CFixedPoint(Front.GetSecondAdvanceProgress, '(CFixedPoint)0')]"
						}

						textbox = {
							block "second_you_allies" {
								text = "YOU_AND_ALLIES_SECOND"
							}
							autoresize = yes
							align = left|nobaseline
							visible = "[Front.IsParticipantOrAllyInSecond( GetPlayer.Self )]"
						}
						
						textbox = {
							block "second_enemies" {
								text = "ENEMIES_SECOND"
							}
							autoresize = yes
							align = left|nobaseline
							visible = "[Front.IsParticipantOrAllyInFirst( GetPlayer.Self )]"
						}

						default_progressbar_horizontal = {
							parentanchor = hcenter
							block "second_tooltip" {
								tooltip = "ADVANCEMENT_PROGRESS_BAR_SECOND_TOOLTIP"
							}
							using = tooltip_below
							size = { 250 20 }

							blockoverride "values" {
								min = 0
								max = 1
								block "second_progressbar" {
									value = "[FixedPointToFloat( Front.GetSecondAdvanceProgressPercent )]"
								}
							}

							textbox = {
								parentanchor = center
								autoresize = yes
								block "second_values" {
									raw_text = "#bold [Front.GetSecondAdvanceProgress|1] / [Front.GetRequiredAdvanceProgressForBattle|0]#!"
								}
								align = left|nobaseline
							}
						}
					}
				}
			}
		}
	}

	type present_countries_side = flowcontainer
	{
		minimumsize = { @panel_width_half -1 }
		maximumsize = { @panel_width_half -1 }
		parentanchor = hcenter
		margin_bottom = 20
		margin_left = 10
		direction = vertical
		spacing = 2
		
		divider_clean = {
			size = { 90% 2 }
			parentanchor = hcenter
		}

		flowcontainer = {
			direction = vertical
			spacing = 8		
			block "parentanchor"
			{
				parentanchor = left
			}		

			block "header" {
				textbox = {
					text = "FRONT_COUNTRIES_PRESENT"
					align = left|nobaseline
					autoresize = yes
				}
			}

			fixedgridbox = {
				datamodel_wrap = 7
				addcolumn = 35
				addrow = 27
				flipdirection = yes
				
				block "parentanchor_gridbox"
				{
					layoutanchor = topleft
					parentanchor = left
				}

				block "datamodel" {
					datamodel = "[Front.AccessLeftCountries]"
				}

				item = {
					widget = {
						size = { 35 27 }
						
						tiny_flag = {
							parentanchor = center
							blockoverride "mobilized_visibility" {
								visible = "[Country.IsMobilized]"
							}
						}
					}
				}
			}
		}
	}

	### FRONT PARTICIPANTS LIST ITEM
	type front_participants_list_item = widget {
		size = { 250 130 }

		datacontext = "[FrontParticipant.AccessArmy]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightMilitaryFormation( MilitaryFormation.Self )]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		background = {
			# Not players
			visible = "[Not(MilitaryFormation.GetCountry.IsPlayer)]"
			using = entry_bg_simple
		}
		background = {
			# If player owned
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			color = "[MilitaryFormation.GetCountry.GetMapColor]"
			
			using = entry_bg_unit
		}

		vbox = {
			hbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				minimumsize = { -1 35 }
				maximumsize = { -1 35 }
				margin_right = 5
				spacing = 5

				background = {
					using = fade_right_entry_header_colored
					color = "[MilitaryFormation.GetCountry.GetMapColor]"
				}
				
				### TODO PRCAL-28648
				#character_portrait_small = {
				#	datacontext = "[FrontParticipant.GetCharacter]"
				#	blockoverride "portrait_icons" {}
				#}

				#textbox = {
				#	layoutpolicy_vertical = expanding
				#	layoutpolicy_horizontal = expanding
				#	elide = right
				#	text = "[Character.GetCountry.GetFlagTextIcon] [Character.GetFullName]"
				#	align = left|nobaseline
				#}

				#button_icon_goto = {
				#	size = { 25 25 }
				#	onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
				#	tooltip = "GO_TO_BUTTON_CHARACTER"
				#}
			}

			hbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin = { 8 2 }
				minimumsize = { -1 30 }

				flowcontainer = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					visible = "[Not(MilitaryFormation.IsTraveling)]"
					margin = { 2 2 }
					spacing = 5

					textbox = {
						align = left|nobaseline
						parentanchor = vcenter
						autoresize = yes
						text = "FRONT_STATUS"
					}
				}

				flowcontainer = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					visible = "[MilitaryFormation.IsTraveling]"
					margin = { 2 2 }
					spacing = 5
				
					icon = {
						size = { 30 30 }
						parentanchor = vcenter
						texture = "gfx/interface/icons/generic_icons/expeditionary_force.dds"
					}

					textbox = {
						align = left|nobaseline
						parentanchor = vcenter
						autoresize = yes

						visible = "[And( MilitaryFormation.IsTraveling, GreaterThan_int32( MilitaryFormation.GetTravelDaysLeft, '(int32)0' ) )]"
						text = "FORMATION_TRAVELING_FRONT_PANEL"
					}
					textbox = {
						align = left|nobaseline
						parentanchor = vcenter
						autoresize = yes

						visible = "[And( MilitaryFormation.IsTraveling, EqualTo_int32( MilitaryFormation.GetTravelDaysLeft, '(int32)0' ) )]"
						text = "FORMATION_TRAVELING_FRONT_PANEL"
						tooltip = "FORMATION_TRAVELING_TOOLTIP_LESS_THAN_ONE_DAY"
					}
				}
			}

			hbox = {
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding
				margin = { 8 5 }
				
				button = {
					using = default_button
					size = { 130 42 }

					# If player owned
					visible = "[MilitaryFormation.GetCountry.IsPlayer]"

					# Does what?
					onclick = "[InformationPanelBar.OpenMilitaryPanelTab('army')]"
					#onrightclick = "[RightClickMenuManager.ShowForBuilding( CombatUnit.GetBuilding )]"
					
					# Morale
					morale_bar = {
						position = { 10 0 }
						parentanchor = left|vcenter
						tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"
						
						blockoverride "morale_value" {
							value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
						}
						blockoverride "morale_color" {
							color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
						}
					}
				
					textbox = {
						maximumsize = { -1 30 }
						position = { 22 0 }
						autoresize = yes
						parentanchor = left|vcenter
						align = center|nobaseline

						text = "[GetUnitStrengthHeader( MilitaryFormation.GetCurrentManpower, MilitaryFormation.GetMaxManpower, MilitaryFormation.GetCombatUnitsTypeIcon )]"
						tooltip = "MILITARY_PANEL_COMMAND_LIMIT_BREAKDOWN_TOOLTIP"
					}
				}

				widget = {
					size = { 130 35 }

					# If not player owned
					visible = "[Not(MilitaryFormation.GetCountry.IsPlayer)]"

					morale_bar = {
						position = { 10 0 }
						parentanchor = left|vcenter
						tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"
						
						blockoverride "morale_value" {
							value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
						}
						blockoverride "morale_color" {
							color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
						}
					}
				
					textbox = {
						maximumsize = { -1 30 }
						position = { 22 0 }
						autoresize = yes
						parentanchor = left|vcenter
						align = center|nobaseline

						text = "[GetUnitStrengthHeader( MilitaryFormation.GetCurrentManpower, MilitaryFormation.GetMaxManpower, MilitaryFormation.GetCombatUnitsTypeIcon )]"
						tooltip = "MILITARY_PANEL_COMMAND_LIMIT_BREAKDOWN_TOOLTIP"
					}
				}

				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				}
			}
		}
	}

	### FRONT PARTICIPANTS FORMATIONS LIST ITEM
	type front_participants_formations_list_item = widget {
		size = { 250 130 }
		datacontext = "[FrontParticipant.AccessArmy]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightMilitaryFormation(MilitaryFormation.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		background = {
			# Not players
			visible = "[Not(MilitaryFormation.GetCountry.IsPlayer)]"
			using = entry_bg_simple
		}

		background = {
			color = "[MilitaryFormation.GetCountry.GetMapColor]"
			using = entry_bg_unit
		}

		flowcontainer = {
			direction = vertical

			widget = {
				size = { 250 40 }

				background = {
					using = fade_right_entry_header_colored
					color = "[MilitaryFormation.GetCountry.GetMapColor]"
				}

				textbox = {
					parentanchor = vcenter
					position = { 10 0 }
					autoresize = yes
					align = nobaseline
					elide = right
					fontsize_min = 14
					max_width = 220
					text = "[MilitaryFormation.GetCountry.GetFlagTextIcon] [MilitaryFormation.GetName]"
				}

				button_icon_goto = {
					parentanchor = right|vcenter
					position = { -7 0 }
					size = { 25 25 }
					onclick = "[InformationPanelBar.OpenMilitaryFormationPanel(MilitaryFormation.AccessSelf)]"
					tooltip = "GO_TO_BUTTON_FORMATION"
				}
			}

			flowcontainer = {
				margin = { 15 5 }

				dynamicgridbox = {
					visible = "[Not(IsDataModelEmpty(MilitaryFormation.GetCommanders))]"
					datamodel = "[MilitaryFormation.GetCommanders]"
					maxhorizontalslots = 5
					flipdirection = yes

					item = {
						widget = {
							size = { 40 40 }

							character_portrait_small = {}
						}
					}
				}
			}

			flowcontainer = {
				minimumsize = { -1 40 }
				margin_left = 15
				spacing = 10

				# Manpower
				textbox = {
					maximumsize = { -1 30 }
					autoresize = yes
					parentanchor = vcenter
					align = center|nobaseline

					raw_text = "@manpower! #v [MilitaryFormation.GetCurrentManpower|D]#! / [MilitaryFormation.GetMaxManpower|D]"
					tooltip = "MILITARY_PANEL_COMMAND_LIMIT_BREAKDOWN_TOOLTIP"
				}

				# Morale
				morale_bar = {
					parentanchor = vcenter
					tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"
					
					blockoverride "morale_value" {
						value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
					}
					blockoverride "morale_color" {
						color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
					}
				}
			}

			flowcontainer = {
				visible = "[MilitaryFormation.IsTraveling]"
				minimumsize = { -1 40 }
				margin_left = 15
				spacing = 5
				
				icon = {
					size = { 30 30 }
					parentanchor = vcenter
					texture = "gfx/interface/icons/generic_icons/expeditionary_force.dds"
				}

				textbox = {
					visible = "[And( MilitaryFormation.IsTraveling, GreaterThan_int32( MilitaryFormation.GetTravelDaysLeft, '(int32)0' ) )]"
					align = left|nobaseline
					parentanchor = vcenter
					autoresize = yes
					text = "FORMATION_TRAVELING_FRONT_PANEL"
				}
				textbox = {
					visible = "[And( MilitaryFormation.IsTraveling, EqualTo_int32( MilitaryFormation.GetTravelDaysLeft, '(int32)0' ) )]"
					align = left|nobaseline
					parentanchor = vcenter
					autoresize = yes
					text = "FORMATION_TRAVELING"
					tooltip = "FORMATION_TRAVELING_TOOLTIP_LESS_THAN_ONE_DAY"
				}
			}

			widget = {
				size = { 10 10 }
			}
		}
	}

	type front_participants_formations_list = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		margin_top = 8
		spacing = 10
		block "visible" {
			visible = "[Not(IsDataModelEmpty(Front.AccessRightParticipants))]"
		}
		block "datamodel"
		{
			datamodel = "[Front.AccessRightParticipants]"
		}
	
		item = {
			front_participants_formations_list_item = {}
		}
	}

	### BATTLE ITEM
	type battle_item = button {
		using = default_button
		size = { @panel_width 55 }
		onClick = "[InformationPanelBar.OpenBattlePanelTab(Battle.AccessSelf, 'default')]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightBattle(Battle.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		tooltip = "[Battle.GetStatusString]"

		icon = {
			visible = "[Battle.IsBeingHighlighted]"
			using = highlighted_square_selection
		}
			
		small_flag = {
			datacontext = "[Battle.GetAttacker]"
			parentanchor = left|vcenter
			position = { 10 0 }
		}
		
		flowcontainer = {
			parentanchor = center
			spacing = 15
			
			textbox = {
				margin_left = 0
				raw_text = "[Battle.GetUnitIcon] [Battle.GetCurrentAttackerUnits|v]#!"
				size = { 100 50 }
				align = right|nobaseline
				parentanchor = vcenter
				using = fontsize_large
			}

			white_progressbar_vertical = {
				datacontext = "[Battle.AccessAttackerBattleParticipant]"
				size = { 6 24 }
				tooltip = "BATTLE_MORALE_TOOLTIP"
				parentanchor = vcenter
				
				blockoverride "values" {
					min = 0
					max = 1
					value = "[FixedPointToFloat( BattleParticipant.GetMorale )]"
				}
				blockoverride "color" {
					color = "[GetMoraleColorVec( BattleParticipant.GetMorale )]"
				}
			}
			
			button = {
				size = { 45 45 }
				texture = "[Battle.GetBattleIcon]"
				alwaystransparent = yes
				parentanchor = vcenter
			}

			white_progressbar_vertical = {
				datacontext = "[Battle.AccessDefenderBattleParticipant]"
				size = { 6 24 }
				tooltip = "BATTLE_MORALE_TOOLTIP"
				parentanchor = vcenter
				
				blockoverride "values" {
					min = 0
					max = 1
					value = "[FixedPointToFloat( BattleParticipant.GetMorale )]"
				}
				blockoverride "color" {
					color = "[GetMoraleColorVec( BattleParticipant.GetMorale )]"
				}
			}
			
			textbox = {
				margin_left = 0
				raw_text = "[Battle.GetUnitIcon] [Battle.GetCurrentDefenderUnits|v]#!"
				size = { 100 50 }
				align = left|nobaseline
				parentanchor = vcenter
				using = fontsize_large
			}
			
		}
			
		small_flag = {
			datacontext = "[Battle.GetDefender]"
			parentanchor = right|vcenter
			position = { -10 0 }
		}
	}
	
	### ENDED BATTLE ITEM
	type ended_battle_item = button {
		onClick = "[InformationPanelBar.OpenBattlePanelTab(Battle.AccessSelf, 'default')]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightBattle(Battle.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		
		icon = {
			visible = "[Battle.IsBeingHighlighted]"
			using = highlighted_square_selection
		}
		using = default_button

		container = {
			resizeparent = yes
			flowcontainer = {
				direction = vertical
				parentanchor = right
				visible = "[NotEqualTo_CFixedPoint(Battle.GetOccupationWonRaw, '(CFixedPoint)0')]"
				margin_top = 5
				textbox = {
					text = "[Battle.GetWinner.GetFlagTextIcon] #b +#![Battle.GetOccupationWon]"
					autoresize = yes
					align = nobaseline
					parentanchor = right
					margin_right = 10
					using = fontsize_large
				}		

				textbox = {
					text = "[Battle.GetState.GetName]"
					autoresize = yes
					align = nobaseline
					parentanchor = right
					margin_right = 10
				}
			}
			flowcontainer = {
				direction = vertical
				margin_bottom = 5
				margin_left = 5
				margin_right = 5

				background = {
					using = entry_bg_simple
				}

				# victory/defeat + captured provinces
				flowcontainer = {
					margin_left = 5
					margin_top = 5
					# if you are in the battle
					flowcontainer = {
						visible = "[Battle.IsLeadCountry(GetPlayer)]"
						direction = vertical
						spacing = 10
						
						textbox = {
							visible = "[Battle.IsWinner(GetPlayer)]"
							text = "BATTLE_VICTORY"
							using = small_battle_outcome_formatting
							default_format = "#p"
						}
						textbox = {
							visible = "[Battle.IsLoser(GetPlayer)]"
							text = "BATTLE_DEFEAT"
							using = small_battle_outcome_formatting
							default_format = "#n"
						}
					}
					
					# if you are observer
					flowcontainer = {
						visible = "[Not( Battle.IsLeadCountry(GetPlayer) )]"
						direction = vertical
						
						textbox = {
							visible = "[Battle.IsOnWinnerSide( GetPlayer.Self )]"
							text = "BATTLE_ALLY_VICTORY"
							using = small_battle_outcome_formatting
							default_format = "#p"
						}
						textbox = {
							visible = "[Battle.IsOnLoserSide( GetPlayer.Self )]"
							text = "BATTLE_ALLY_DEFEAT"
							using = small_battle_outcome_formatting
							default_format = "#n"
						}
						textbox = {
							visible = "[Not(Or( Battle.IsOnWinnerSide(GetPlayer.Self), Battle.IsOnLoserSide(GetPlayer.Self) ))]"
							text = "BATTLE_NONALLY_VICTORY"
							using = small_battle_outcome_formatting
						}
					}
				}

				textbox = {
					text = "BATTLE_END_ATTACKER_OUTCOME"
					autoresize = yes
					align = nobaseline
					margin_left = 5
					margin_bottom = 2
				}

				widget = {
					parentanchor = hcenter
					size = { @panel_width_minus_10 36 }

					background = {
						using = entry_bg_simple
					}

					icon = {
						size = { 30 30 }
						texture = "[Battle.GetBattleIcon]"
						alwaystransparent = yes
						parentanchor = center
					}

					### LEFT SIDE
					flowcontainer = {
						position = { 10 0 }
						parentanchor = vcenter
						spacing = 10

						
						tiny_flag_no_interact = {
							datacontext = "[Battle.GetAttacker]"
							parentanchor = vcenter
						}

						textbox = {
							raw_text = "@battalions![Battle.GetStartingAttackerUnits|v]   @manpower![Battle.GetStartingAttackerManpower|vD]"
							tooltip = "[Battle.GetNumAdvancingUnitsAtStartOfBattleDesc]"
							autoresize = yes
							align = left|nobaseline
							parentanchor = vcenter
							alpha = "[TransparentIfZero_int32(Battle.GetStartingAttackerUnits)]"
						}
					}

					### RIGHT SIDE
					flowcontainer = {
						position = { -10 0 }
						parentanchor = vcenter|right
						spacing = 10
						alpha = "[TransparentIfZero_int32(Battle.GetStartingDefenderUnits)]"

						textbox = {
							raw_text = "@battalions![Battle.GetStartingDefenderUnits|v]   @manpower![Battle.GetStartingDefenderManpower|vD]"
							tooltip = "[Battle.GetNumDefendingUnitsAtStartOfBattleDesc]"
							autoresize = yes
							align = right|nobaseline
							parentanchor = vcenter
						}

						tiny_flag_no_interact = {
							datacontext = "[Battle.GetDefender]"
							parentanchor = vcenter
						}
					}
				}
			}
		}
	}
}
