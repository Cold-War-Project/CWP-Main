template change_level_flag_animation
{
	modify_texture = {
		name = "glow"
		texture = "gfx/interface/animation/shimmer.dds"
		blend_mode = colordodge
		translate_uv = { -1 -1 }
	}
	
	state = {
		name = _show
		duration = 1.3
		alpha = 1
		using = Animation_Curve_Default
		
		modify_texture = {
			name = glow
			translate_uv = { 1 1 }
		}
	}
	
	state = {
		name = _hide
		alpha = 0
		duration = 1.3
		using = Animation_Curve_Default
		
		modify_texture = {
			name = glow
			translate_uv = { -1 -1 }
		}
	}
}

types flags
{	
	type flag_3d_animated = icon
	{
		gfxtype = flag3dwidgetgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		effectname = "PdxGuiPreMultipliedAlpha"
		gfx_environment_file = "gfx/map/environment/ui_flag_environment.txt"
		entity_instance = "ui_flag_01_anim_entity"
		entity_enable_sound = no
		camera_position = { 1.7 0.0 -41.0 }
		camera_look_at = { 1.7 0.0 0.0 }
		camera_fov_y_degrees = 10
		camera_near_far = { 0.1 300.0 }
		realtime = yes
		color = { 1.0 1.0 1.0 1.0 }
		
		texture = "[Country.GetFlag.GetLargeFlagTexture]"
		coat_of_arms_slot = "[Country.GetFlag.GetLargeFlagSlot]"
	}

	type observer_mode_overlay = widget
	{
		visible = "[GetMetaPlayer.IsObserver]"
		parentanchor = bottom

		block "observer_properties" {
			position = { -1 -10 }
		}

		divider_clean = {}

		background = {
			using = dark_area
			margin_right = 30
			alpha = 0.9
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_less_right.dds"
				blend_mode = alphamultiply
			}
		}

		flowcontainer = {
			resizeparent = yes
			direction = horizontal
			margin_left = 10

			icon = {
				texture = "gfx/interface/icons/generic_icons/observer_mode_icon.dds"
				parentanchor = left|vcenter
				block "icon_size" {
					size = { 45 45 }
				}	
			}

			textbox = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				text = "GLOBAL_OBSERVER"
				parentanchor = left|vcenter
				elide = right
				margin_left = 5
				margin_bottom = 5
				autoresize = yes
				block "fontsize" {
					using = fontsize_xxl
					maximumsize = { 200 -1 }
				}
				multiline = yes
			}

			textbox = {
				visible = "[Not(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)]"
				text = "NO_COUNTRY_SELECTED"
				parentanchor = left|vcenter
				elide = right
				margin_left = 5
				margin_bottom = 5
				autoresize = yes
				block "fontsize" {
					using = fontsize_medium
					maximumsize = { 400 -1 }
				}
				multiline = yes
			}
		}

		divider_clean = {
			parentanchor = bottom
		}
	}


	type flag_3d = icon
	{
		gfxtype = flag3dwidgetgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		effectname = "PdxGuiPreMultipliedAlpha"
		gfx_environment_file = "gfx/map/environment/ui_flag_environment.txt"
		entity_instance = "ui_flag_01_entity"
		entity_enable_sound = no
		camera_position = { 1.7 0.0 -41.0 }
		camera_look_at = { 1.7 0.0 0.0 }
		camera_fov_y_degrees = 10
		camera_near_far = { 0.1 300.0 }
		realtime = yes
		color = { 1.0 1.0 1.0 1.0 }
		
		texture = "[Country.GetFlag.GetLargeFlagTexture]"
		coat_of_arms_slot = "[Country.GetFlag.GetLargeFlagSlot]"
	}
	
	### RANK / POWER BADGE
	type rank_badge = widget {
		size = { 70 70 }
		tooltip = "[Country.GetRankTooltip]"
				
		icon = {
			visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)1')]"
			texture = "gfx/interface/flag/power_rank_01.dds"
			size = { 100% 100% }
			using = change_level_flag_animation
		}
		icon = {
			visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)2')]"
			texture = "gfx/interface/flag/power_rank_02.dds"
			size = { 100% 100% }
			using = change_level_flag_animation
		}
		icon = {
			visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)3')]"
			texture = "gfx/interface/flag/power_rank_03.dds"
			size = { 100% 100% }
			using = change_level_flag_animation
		}
		icon = {
			visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)4')]"
			texture = "gfx/interface/flag/power_rank_04.dds"
			size = { 100% 100% }
			using = change_level_flag_animation
		}
		icon = {
			visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)5')]"
			texture = "gfx/interface/flag/power_rank_05.dds"
			size = { 100% 100% }
			using = change_level_flag_animation
		}
		
		### NUMBER + PROGRESSBAR
		widget = {
			size = { 100% 100% }
			name = "tutorial_highlight_prestige"
			
			block "datacontext " {
				datacontext = "[GetPlayer]"
			}
			
			### LEVEL UP PROGRESS (for minor and major)
			widget = {
				size = { 100% 100% }
				visible = "[Not(Country.IsHighestRank)]"
				parentanchor = center
				
				progressbar = {
					visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)2')]"
					noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
					progresstexture = "gfx/interface/flag/minor_progress.dds"
					size = { 48% 48% }
					value = "[Country.GetRankProgress]"
					direction = vertical
					min = 0
					max = 1
					using = progressbar_changed_animation
					parentanchor = center
				}
				
				progressbar = {
					visible = "[EqualTo_int32(Country.GetRankIconIndex, '(int32)3')]"
					noprogresstexture = "gfx/interface/icons/generic_icons/transparent.dds"
					progresstexture = "gfx/interface/flag/major_progress.dds"
					size = { 48% 48% }
					value = "[Country.GetRankProgress]"
					direction = vertical
					min = 0
					max = 1
					using = progressbar_changed_animation
					parentanchor = center
				}
			}
			
			textbox = {
				parentanchor = center
				align = center|nobaseline
				autoresize = yes
				
				block "font_size" {}
				block "rank_text" {
					raw_text = "#BOLD [GetPlayer.GetCountryScorePositionDesc]"
					visible = "[GreaterThan_int32( GetPlayer.GetCountryScorePosition, '(int32)99' )]"
				}
			}

			textbox = {
				parentanchor = center
				align = center|nobaseline
				
				autoresize = yes
				
				using = fontsize_large
				
				block "rank_text_2" {
					raw_text = "#BOLD [GetPlayer.GetCountryScorePositionDesc]"
					visible = "[Not(GreaterThan_int32( GetPlayer.GetCountryScorePosition, '(int32)99' ))]"
				}
			}
		}
	}
	
	### FANCY FLAG
	type fancy_flag = widget {
		name = "tutorial_highlight_flag"
		size = { 190 190 }

		icon = {
			texture = "gfx/interface/flag/fancy_flag_decoration.dds"
			size = { 117 165 }
		}
		icon = {
			texture = "gfx/interface/flag/fancy_flag_cloth.dds"
			size = { 117 165 }
		}
		icon = {
			texture = "gfx/interface/flag/fancy_flag_cloth.dds"
			size = { 117 165 }
			block "country_color" {
				color = "[GetPlayer.GetMapColor]"
			}
			alpha = 0.6
		}

		block "clickable" {
			button = {
				visible = "[Not(InformationPanelBar.IsPanelOpen('country_panel'))]"
				clicksound = "event:/SFX/UI/SideBar/country"
				enabled = "[Not(And(GetMetaPlayer.IsObserver, Not(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)))]"

				using = flag_button_glow
				size = { 150 110 }
				position = { -12 -8 }
				using = tooltip_below
				alpha = 0.5

				tooltipwidget = {
					FancyTooltip_Country = {}
				}
				
				onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
				onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
				block "onhover" {
					onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				}
			}

			### Copy-paste of the flag button, used for special handling of sound
			button = {
				visible = "[InformationPanelBar.IsPanelOpen('country_panel')]"
				clicksound = "event:/SFX/UI/SideBar/country_stop"
				enabled = "[Not(And(GetMetaPlayer.IsObserver, Not(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)))]"

				using = flag_button_glow
				size = { 150 110 }
				position = { -12 -8 }
				using = tooltip_below
				alpha = 0.5

				tooltipwidget = {
					FancyTooltip_Country = {}
				}
				
				onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
				onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
				block "onhover" {
					onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				}
			}
		}
		
		# 3D flag, we want to render at a high resolution and downscale
		# This increases the quality of the rendered gui flag
		# Size can be modified but needs to be 16:9 due to how its rendered (converted 3d object)
		flag_3d_animated = {
			size = { 320 180 }	# Render resolution
			scale = 0.5			# Downscale
			position = { -1 -1 }
			alwaystransparent = yes
		}

		#### RANK
		block "rank_badge_block" {
			rank_badge = {
				size = { 57 57 }
				parentanchor = bottom
				position = { -4 -55 }
			}
		}
	}
	
	### LARGE FLAG
	type large_flag = button {
		block "glow" {}
		
		block "size" {
			size = { 96 64 }
		}

		
		tooltipwidget = {
			FancyTooltip_Country = {}
		}
		
		onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
		onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
		block "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
	
		texture = "[Country.GetFlag.GetMediumFlagTexture]"
		frame = "[Country.GetFlag.GetMediumFlagFrame]"
		framesize = "[GetMediumFlagFrameSize]"

		block "sound" {
			using = flag_button_sound
		}
		
		using = flag_overlay
		
		button = {
			name = frame
			texture = "gfx/interface/flag/flag_power_large.dds"
			size = { 114 82 }
			framesize = { 228 164 }
			frame = "[Country.GetRankIconIndex]"
			alwaystransparent = yes
			parentanchor = center
			block "visibility" {}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 30 30 }
			position = { 8 8 }
			tooltip = "COUNTRY_IS_MOBILIZED"
			blockoverride "frame" {
				frame = 12
			}
		}
	}
	
	### NORMAL FLAG
	type flag = button {
		size = { 66 44 }
		
		block "flag_tooltip" {		
			tooltipwidget = {
				FancyTooltip_Country = {}
			}
		}
		
		block "onclicks" {
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
		}

		block "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}
		
		block "texture" {
			texture = "[Country.GetFlag.GetMediumFlagTexture]"
		}
		
		block "frame" {
			frame = "[Country.GetFlag.GetMediumFlagFrame]"
		}
		
		framesize = "[GetMediumFlagFrameSize]"

		block "sound" {
			using = flag_button_sound
		}
		
		using = flag_overlay
		
		button = {
			name = frame
			texture = "gfx/interface/flag/flag_power_normal.dds"
			size = { 80 58 }
			framesize = { 160 116 }
			frame = "[Country.GetRankIconIndex]"
			alwaystransparent = yes
			parentanchor = center
			block "visibility" {}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 24 24 } #Todo: If used, modify size/pos
			position = { 7 7 }
			tooltip = "COUNTRY_IS_MOBILIZED"
			blockoverride "frame" {
				frame = 12
			}
		}
	}
	
	### SMALL FLAG
	type small_flag = button {
		size = { 48 32 }

		block "flag_tooltip" {
			tooltipwidget = {
				FancyTooltip_Country = {}
			}
		}
		
		block "flag_click" {
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
		}
		block "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}

		# Using medium size textures in small flag for better downscaling of flag details
		texture = "[Country.GetFlag.GetMediumFlagTexture]"
		frame = "[Country.GetFlag.GetMediumFlagFrame]"
		framesize = "[GetMediumFlagFrameSize]"

		block "sound" {
			using = flag_button_sound
		}
		
		using = flag_overlay

		block "frame_button" {
			button = {
				name = frame
				texture = "gfx/interface/flag/flag_power_small.dds"
				size = { 62 46 }
				framesize = { 124 92 }
				frame = "[Country.GetRankIconIndex]"
				alwaystransparent = yes
				parentanchor = center
				block "visibility" {}
			}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 20 20 } #Todo: If used, modify size/pos
			position = { 6 6 }
			tooltip = "COUNTRY_IS_MOBILIZED"
			blockoverride "frame" {
				frame = 12
			}
		}
	}

	### SMALL FLAG
	type small_flag_no_interact = button {
		size = { 48 32 }

		# Using medium size textures in small flag for better downscaling of flag details
		texture = "[Country.GetFlag.GetMediumFlagTexture]"
		frame = "[Country.GetFlag.GetMediumFlagFrame]"
		framesize = "[GetMediumFlagFrameSize]"
		
		using = flag_overlay

		block "frame_button" {
			button = {
				name = frame
				texture = "gfx/interface/flag/flag_power_small.dds"
				size = { 62 46 }
				framesize = { 124 92 }
				frame = "[Country.GetRankIconIndex]"
				alwaystransparent = yes
				parentanchor = center
				block "visibility" {}
			}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 20 20 } #Todo: If used, modify size/pos
			position = { 6 6 }
			tooltip = "COUNTRY_IS_MOBILIZED"
			blockoverride "frame" {
				frame = 12
			}
		}
	}
	
	### TINY FLAG
	type tiny_flag = button {
		size = { 27 18 }

		block "tooltip" {
			tooltipwidget = {
				FancyTooltip_Country = {}
			}
		}

		block "flag_click" {
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
		}
		block "onhover" {
			onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		}

		texture = "[Country.GetFlag.GetSmallFlagTexture]"

		block "flag_frame" {
			frame = "[Country.GetFlag.GetSmallFlagFrame]"
		}

		block "flag_frame_size" {
			framesize = "[GetSmallFlagFrameSize]"
		}

		block "sound" {
			using = flag_button_sound
		}
		
		using = flag_overlay
		
		button = {
			name = frame
			texture = "gfx/interface/flag/flag_power_tiny.dds"
			size = { 33 24 }
			framesize = { 66 48 }
			frame = "[Country.GetRankIconIndex]"
			alwaystransparent = yes
			parentanchor = center
			block "visibility" {}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 14 14 } 
			position = { 3 3 }
			tooltip = "COUNTRY_IS_MOBILIZED"
			blockoverride "frame" {
				frame = 12
			}
		}
	}
	
	### TINY FLAG NO INTERACT
	type tiny_flag_no_interact = icon {
		size = { 27 18 }
		texture = "[Country.GetFlag.GetSmallFlagTexture]"
		alwaystransparent = yes
		
		block "flag_frame" {
			frame = "[Country.GetFlag.GetSmallFlagFrame]"
		}

		block "flag_frame_size" {
			framesize = "[GetSmallFlagFrameSize]"
		}

		using = flag_overlay
		
		icon = {
			name = frame
			texture = "gfx/interface/flag/flag_power_tiny.dds"
			size = { 33 24 }
			framesize = { 66 48 }
			frame = "[Country.GetRankIconIndex]"
			alwaystransparent = yes
			parentanchor = center
			block "visibility" {}
		}

		mobilization_icon = {
			block "mobilized_visibility" {
				visible = no
			}
			parentanchor = right|bottom
			size = { 14 14 } 
			position = { 3 3 }
			blockoverride "frame" {
				frame = 12
			}
		}
	}
	
	### FLAG ICON (non-existing nations?)
	type flag_icon = icon {
		size = { 66 44 }
		
		block "flag_tooltip" {		
			tooltipwidget = {
				FancyTooltip_Country = {}
			}
		}
		
		texture = "[Country.GetFlag.GetMediumFlagTexture]"
		frame = "[Country.GetFlag.GetMediumFlagFrame]"
		framesize = "[GetMediumFlagFrameSize]"
		
		using = flag_overlay
	}
	
	type mobilization_icon_flag = mobilization_icon {
		position = { -5 5 }
		parentanchor = bottom
	}

	#type acceptance_icon = container {
	#	block "position" {
	#		parentanchor = bottom|right
	#		position = { 3 3 }
	#	}
	#	allow_outside = yes
	#	
	#	icon = {
	#		#visible = "[War.WouldAcceptPeace(Country.Self)]"
	#		#tooltip = "[War.GetPeaceAcceptanceTooltip(Country.Self)]"
	#		size = { 18 18 }
	#		texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
	#	}
	#
	#	icon = {
	#		visible = "[Not(War.WouldAcceptPeace(Country.Self))]"
	#		tooltip = "[War.GetPeaceAcceptanceTooltip(Country.Self)]"
	#		size = { 18 18 }
	#		texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
	#	}
	#}

	type save_game_item_coa = icon {
		size = { 48 32 }
		texture = "[SaveGameItem.GetCountryFlag.GetSmallFlagTexture]"
		frame = "[SaveGameItem.GetCountryFlag.GetSmallFlagFrame]"
		framesize = "[GetSmallFlagFrameSize]"
		
		using = flag_overlay
		
		icon = {
			size = { 106% 106% }
			parentanchor = center
			using = simple_frame
			alwaystransparent = yes
		} 
	}
}

template flag_overlay {
	modify_texture = {
		texture = "gfx/interface/flag/flag_overlay.dds"
		spriteType = Corneredstretched
		spriteborder = { 0 0 }
		blend_mode = multiply
	}
}