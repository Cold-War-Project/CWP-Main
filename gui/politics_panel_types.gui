# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

template law_header
{
	autoresize = yes
	position = { 10 0 }
	align = left|nobaseline
	parentanchor = left|vcenter
	widgetanchor = left|vcenter
	using = fontsize_large
}

template investment_bar_bg
{
	texture = "gfx/interface/politics_view/investment_bar_bg.dds"
	spriteType = Corneredtiled
	spriteborder = { 43 0 }
	shaderfile = "gfx/FX/pdxgui_default.shader"
}

template plot_line {
	gfxtype = linegfx
	effectname = "PdxGuiLineScreenSpace"
	line_type = line
	line_cap = yes
	alpha = 0.8

	texture = "gfx/interface/graph/white.dds"
	uv_scale = { 1.0 1.0 }
	mask = "gfx/interface/graph/fullmask.dds"
	mask_uv_scale = { 1 1 }
}

types information_panels_types
{
	### used for FLOWCONTAINER
	type law_enactment_controls = flowcontainer {
		visible = "[Not(Law.IsActive)]"
		tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"
		using = default_list_position

		button = {
			name = "tutorial_highlight_enact"
			parentanchor = vcenter
			using = default_button_action
			visible = "[Not(Law.IsBeingEnacted)]"
			size = { @panel_width_minus_10 40 }
			tooltip = "TOOLTIP_ENACT_LAW"

			textbox = {
				text = "ENACT_LAW"
				autoresize = yes
				align = nobaseline
				parentanchor = center
			}

			enabled = "[IsValid( Law.StartEnacting )]"
			onclick = "[Execute( Law.StartEnacting )]"
		}

		widget = {
			size = { 450 40 }
			visible = "[Law.IsBeingEnacted]"

			default_progressbar_horizontal = {
				position = { 5 2 }
				size = { 390 20 }
				blockoverride "values" {
					value = "[FixedPointToFloat(Law.GetCheckpointProgress)]"
					min = 0
					max = 1
				}
				parentanchor = vcenter

				textbox = {
					autoresize = yes
					text = "[FixedPointToFloat(Law.GetCheckpointProgress)|%v1]"
					align = center|nobaseline
					using = fontsize_xl
					parentanchor = center
				}
			}

			button_icon_cancel = {
				size = { 40 40 }
				parentanchor = right
				tooltip = "[Law.GetCancelTooltip]"
				enabled = "[IsValid( Law.StopEnacting )]"
				onclick = "[PopupManager.AskConfirmation( Law.StopEnacting )]"
			}
		}
	}

	### used for VBOX/HBOX
	type law_enactment_controls2 = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		visible = "[Not(Law.IsActive)]"
		tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"

		button = {
			layoutpolicy_horizontal = preferred
			layoutstretchfactor_horizontal = 1
			name = "tutorial_highlight_enact"
			using = default_button_action
			visible = "[Not(Law.IsBeingEnacted)]"
			size = { 0 40 }
			tooltip = "TOOLTIP_ENACT_LAW"

			textbox = {
				text = "ENACT_LAW"
				align = nobaseline
				autoresize = yes
				parentanchor = center
			}
			tooltip_horizontalbehavior = mirror

			enabled = "[IsValid( Law.StartEnacting )]"
			onclick = "[Execute( Law.StartEnacting )]"
			using = confirm_button_sound
		}

		textbox = {
			layoutpolicy_horizontal = preferred
			text = CURRENTLY_ACTIVE_LAW
			size = { 0 40 }
			visible = "[Law.IsActive]"
			align = hcenter|nobaseline
			using = fontsize_large
			elide = right

			background = {
				using = entry_bg
			}
		}
	}

	### PARTIES AND IG LIST DETAILS
	type parties_and_ig_list_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		name = "tutorial_highlight_interest_group"
		margin_top = 5
		spacing = 30

		### PARTIES
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel" {}
			spacing = 15
			
			item = {
				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					
					background = {
						using = simple_frame
					}
					
					block "move_to_government_button_party" {
						button_icon_move_left = {
							enabled = "[Party.CanJoinGoverment]"
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.StageParty(Party.AccessSelf)]"
							tooltip = "[Party.GetCanJoinGovermentDesc]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
					
						# party header
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							margin = { 10 0 }
							
							background = {
								texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
								color = "[Party.GetColor]"
								alpha = 0.5
								mirror = horizontal
								
								modify_texture = {
									using = texture_velvet
								}
							}
							
							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 40 }
								raw_text = "#v [Party.GetName]#!"
								align = right|nobaseline
								block "highlight_name" {}
								elide = right
								using = fontsize_large
							}
							icon = {
								texture = "[Party.GetIcon]"
								size = { 35 35 }
							}
						}
						
						# igs inside the party
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							datamodel = "[Party.GetMembers]"
							
							item = {
								ig_item_details = {
									blockoverride "move_to_government_button" {}
									blockoverride "move_to_opposition_button" {}
								}
							}
						}
					}
				
					block "move_to_opposition_button_party" {
						button_icon_move_right = {
							visible = "[GetVariableSystem.Exists('reform_government')]"
							layoutpolicy_vertical = expanding
							size = { 35 0 }
							onclick = "[ReformGovernment.UnstageParty(Party.AccessSelf)]"
							
							blockoverride "icon_size" {
								size = { 35 90 }
							}
						}
					}
				}
			}
		}
		
		### IGs without parties
		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			block "datamodel_independent_igs" {}
			
			item = {
				ig_item_details = {}
			}
		}
		
		block "marginal_igs" {
			### MARGINAL IGs
			section_header_button = {
				name = "tutorial_highlight_marginalized_title"
				visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessMarginalInterestGroups))]"
				
				blockoverride "layout" {
					size = { 0 38 }
					layoutpolicy_horizontal = expanding
				}
				blockoverride "left_text" {
					text = "MARGINAL_TITLE_ACCORDION"
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('marginalized_igs_expanded')]"
				}
				
				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('marginalized_igs_expanded'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				visible = "[GetVariableSystem.Exists('marginalized_igs_expanded')]"
				datamodel = "[AccessPlayer.AccessMarginalInterestGroups]"
				
				item = {
					ig_item_details = {}
				}
			}
		}
		
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	### IG ITEM DETAILS
	type ig_item_details = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred

		background = {
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = "[InterestGroup.GetColor]"
			alpha = 0.2

			modify_texture = {
				using = texture_velvet
			}
		}
		
		divider_clean = {
			size = { 0 2 }
			layoutpolicy_horizontal = expanding
		}
		
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			
			block "move_to_government_button" {
				button_icon_move_left = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.StageInterestGroup(InterestGroup.AccessSelf)]"
					enabled = "[Not(InterestGroup.IsRevolutionary)]"
					tooltip = "[AddLocalizationIf(InterestGroup.IsRevolutionary, 'REFORM_GOVERNMENT_MOVE_TO_GOVERNMENT_BUTTON_TOOLTIP')]"
					
					blockoverride "icon_size" {
						size = { 35 90 }
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				margin_bottom = 10

				widget = { size = { 15 15 }}

				### IG BUTTON
				ig_button = {
					block "ig_button_size" {
						size = { 60 60 }
					}
					using = tooltip_ws
					blockoverride "in_government_icon" {}
				}

				### CENTER INFO
				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 10 0 }

					### HEADER ( icons / name / clout )
					hbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						spacing = 5
						margin = { 0 5 }

						background = {
							using = dark_area

							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_center.dds"
								spriteType = Corneredstretched
								spriteborder = { 0 0 }
								blend_mode = alphamultiply
							}
						}
						
						### LEADING IG
						icon = {
							texture = "gfx/interface/icons/generic_icons/leading_interest_group_icon.dds"
							size = { 35 35 }
							visible = "[InterestGroup.IsLeadingGovernment]"
							tooltip = "LEADING_IG"
						}
						### REVOLUTION
						icon = {
							visible = "[InterestGroup.IsInsurrectionary]"
							size = { 35 35 }
							texture = "gfx/interface/icons/politics_icons/radicalized.dds"
							tooltip = "RADICAL_IG_TOOLTIP"
						}

						icon = {
							visible = "[InterestGroup.IsRevolutionary]"
							size = { 35 35 }
							texture = "gfx/interface/icons/politics_icons/revolution.dds"
							tooltip = "REVOLUTION_IG_TOOLTIP"
						}
						### SUPPRESSED / BOLSTERED
						icon = {
							tooltip = "TOOLTIP_SUPPRESSED"
							size = { 35 35 }
							visible = "[InterestGroup.IsSuppressed]"
							texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
						}
						icon = {
							tooltip = "TOOLTIP_PROMOTED"
							size = { 35 35 }
							visible = "[InterestGroup.IsBolstered]"
							texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
						}

						### NAME
						textbox = {
							#layoutpolicy_horizontal = expanding
							size = { 0 30 }
							raw_text = "#v [InterestGroup.GetNameNoFormatting]#!"
							align = left|nobaseline
							autoresize = yes
							using = fontsize_large
							block "highlight_name" {}
							elide = right
						}

						button_icon_goto = {
							size = { 25 25 }
 							onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
							tooltip = "GO_TO_BUTTON_INTEREST_GROUP"
							block "goto_visibility" {}
 						}

 						expand = {}
						
						### CLOUT
						vbox = {
							layoutpolicy_vertical = preferred
							spacing = 4
							using = clout_tooltip_with_graph
							
							textbox = {
								layoutpolicy_horizontal = preferred
								size = { 0 20 }
								align = right|nobaseline
								margin_right = 2
								text = "DETAILED_CLOUT"
								default_format = "#variable"
								using = fontsize_large
							}
							
							bar_horizontal = {
								size = { 150 10 }

								blockoverride "values" {
									min = 0
									max = "[AccessPlayer.GetMaxCloutOrPopulationPercentage]"
									value = "[FixedPointToFloat(InterestGroup.GetClout)]"
									invertprogress = yes
								}
								blockoverride "marker_widgetanchor" {
									widgetanchor = left
									mirror = horizontal
								}
								blockoverride "color" {
									color = "[InterestGroup.GetColor]"
								}
							}

							textbox = {
								layoutpolicy_horizontal = preferred
								text = "DETAILED_CORRUPTION"
								size = { 0 20 }
								align = right|nobaseline
								margin_right = 2
								tooltip = ig_corruption_tooltip
								default_format = "#variable"
								using = fontsize_large
							}

						}

						icon = {
							visible = "[InterestGroup.GetParty.IsValid]"
							texture = "[InterestGroup.GetParty.GetIcon]"
							size = { 30 30 }
							tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
						}

						icon = {
							visible = "[Not(InterestGroup.GetParty.IsValid)]"
							texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
							size = { 30 30 }
							tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
						}
					}

					### BOTTOM PART
					hbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						margin_top = 10

						fixedgridbox = {
							name = "traits_box"
							flipdirection = yes
							datamodel = "[InterestGroup.AccessTraits]"
							addcolumn = 38
							addrow = 40

							item = {
								widget = {
									size = { 36 40 }
									icon = {
										parentanchor = center
										texture = "[InterestGroupTrait.GetTexture]"
										enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
										tooltipwidget = {
											FancyTooltip_InterestGroupTrait = {}
										}
										using = tooltip_above
										size = { 33 44 }
										alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"
									}
								}
							}
						}
						textbox = {
							layoutpolicy_horizontal = expanding
							align = left|nobaseline
							margin_left = 10
							size = { 0 25 }
							elide = right
							raw_text = "[InterestGroup.GetApprovalRating] #bold ([InterestGroup.GetApprovalValue|=+])#!"
							tooltip = "IG_APPROVAL_BREAKDOWN"
						}

						### IDEOLOGIES
						dynamicgridbox = {
							flipdirection = yes
							name = "ideologies_box"
							datamodel = "[InterestGroup.AccessIntrinsicIdeologies]"
							item = {
								widget = {
									size = { 37 35 }

									icon = {
										texture = "[Ideology.GetTexture]"
										tooltipwidget = {
											FancyTooltip_Ideology = {}
										}
										size = { 35 35 }
										using = tooltip_above
									}
								}
							}
						}
					}

					hbox = {
						margin_top = 10
						layoutpolicy_horizontal = expanding

						textbox = {
							visible = "[Not(StringIsEmpty(InterestGroup.GetWillJoinPartyDesc))]"
	                        layoutpolicy_horizontal = expanding
	                        size = { 0 30 }
	                        text = "WILL_JOIN_PARTY"
	                        tooltip = "[InterestGroup.GetWillJoinPartyTooltip]"
	                        fontsize_min = 14
	                        elide = right
	                    }

	                    hbox = {
	                    	visible = "[Not(IsDataModelEmpty(InterestGroup.GetAgitators))]"
	                    	layoutpolicy_horizontal = expanding

	                    	expand = {}

	                    	dynamicgridbox = {
	                    		flipdirection = yes
	                    		datamodel = "[InterestGroup.GetAgitators]"

	                    		item = {
	                    			character_portrait_small = {}
	                    		}
	                    	}
	                    }
	                }
				}

				### LEADER
				widget = {
					size = { 90 90 }

					character_portrait_medium = {
						datacontext = "[InterestGroup.AccessLeader]"
						using = tooltip_above
						blockoverride "show_hat" {}
						parentanchor = vcenter
						blockoverride "highlight" {}
					}

					icon = {
						datacontext = "[InterestGroup.AccessLeader.GetIdeology]"
						texture = "[Ideology.GetTexture]"
						tooltipwidget = {
							FancyTooltip_Ideology = {}
						}
						size = { 35 35 }
						parentanchor = bottom|right
					}
				}
				
				widget = { size = { 15 15 }}
			}
			
			block "move_to_opposition_button" {
				button_icon_move_right = {
					visible = "[GetVariableSystem.Exists('reform_government')]"
					layoutpolicy_vertical = expanding
					size = { 35 0 }
					onclick = "[ReformGovernment.UnstageInterestGroup(InterestGroup.AccessSelf)]"
					
					blockoverride "icon_size" {
						size = { 35 90 }
					}
				}
			}
		}
	}

	type chart = container {
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('chart_button').InterruptThenTriggerAnimation('hide_chart_button','show_chart_button')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('chart_button').InterruptThenTriggerAnimation('show_chart_button','hide_chart_button')]"
		alwaystransparent = no

		flowcontainer = {
			block = "chart_visible" {}
			direction = vertical
			spacing = 5
			margin = { 8 5 }

			block "minimumsize" {

			}

			block "background" {
				background = {
					using = entry_bg
				}
			}

			block "title" {
				textbox = {
					using = default_list_position
					size = { 120 20 }
					align = hcenter|nobaseline
					default_format = "#title"

					block "heading" {
						raw_text = "#todo heading#!"
					}
				}
			}
			v3_piechart = {
				visible = "[GetVariableSystem.Exists('piecharts')]"

				block "tree_chart_size" {}
			}
			v3_treemapchart  = {
				visible = "[Not(GetVariableSystem.Exists('piecharts'))]"

				block "tree_chart_size" {}
			}

			block "labels" {
				fixedgridbox = {
					parentanchor = hcenter
					addrow = 23
					minimumsize = { -1 69 }

					block "maxverticalslots" {
						maxverticalslots = 3
					}

					block "columnsize" {
						addcolumn = 250
					}

					block "datamodel"
					{
						datamodel = "[AccessPlayer.AccessActiveInterestGroups]"
					}

					item = {
						widget = {
							block "textlabelsize" {
								size = { 250 23 }
							}
							block "tooltip" {
								tooltip = "CLOUT_PIECHART"
							}

							block "pie_item_goto_button" {}

							hbox = {
								margin = { 6 0 }

								icon = {
									texture = "/gfx/interface/piechart/piechart_legend.dds"
									size = { 18 18 }
									block "color" {}
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 18 }
									align = nobaseline
									block "leftside_info" {
										raw_text = "#todo leftside_info#!"
									}
									margin_left = 3
									fontsize_min = 14
									elide = right
								}
								textbox = {
									layoutpolicy_horizontal = preferred
									autoresize = yes
									align = left|nobaseline
									block "rightside1_info" {
										raw_text = "#todo rightside1_info#!"
									}
									margin_right = 5
								}
								textbox = {
									layoutpolicy_horizontal = preferred
									autoresize = yes
									align = right|nobaseline
									block "rightside2_info" {
										raw_text = "#todo rightside2_info#!"
									}
									margin_right = 3
								}
							}
						}
					}
				}
			}
		}

		widget = {
			name = "chart_button"
			block = "chart_visible" {}
			parentanchor = right|top
			size = { 30 30 }

			block "chart_button_position" {
				position = { -5 5 }
			}

			state = {
				name = hide_chart_button
				trigger_on_create = yes
				alpha = 0
				duration = 0.2
			}

			state = {
				name = show_chart_button
				alpha = 1
				duration = 0.15
			}

			# grid/list toggle
			button_icon_round_toggle = {
				size = { 29 29 }
				parentanchor = right|vcenter
				block "chart_button_button_position" {
					position = { -10 0 }
				}	

				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('piecharts')]"
				}
				blockoverride "view_1" {
					visible = "[Not(GetVariableSystem.Exists('piecharts'))]"
				}
				blockoverride "view_2" {
					visible = "[GetVariableSystem.Exists('piecharts')]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/piecharts.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/areacharts.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "TOOLTIP_PIE_CHART"
				}
				blockoverride "tooltip_2" {
					tooltip = "TOOLTIP_AREA_CHART"
				}
			}
		}
	}

	type v3_piechart = container {
		using = default_list_position
		piechart = {
			parentanchor = center

			block "piechartsize" {
				size = { 140 140 }
			}

			block "datamodel" {}

			item = {
				pieslice = {
					block "tooltip" {
						datacontext = "[GetPlayer]"
						tooltip = "CLOUT_PIECHART"
					}

					block "pieslice" {
						value = "[InterestGroup.GetCloutAsFloat]"
					}

					block "color" {
						color = "[InterestGroup.GetColor]"
					}
				}
			}
		}
		icon = {
			texture = "gfx/interface/piechart/piechart_frame.dds"
			parentanchor = center
			size = { 130% 110% }
		}
	}

	type v3_treemapchart = container {
		using = default_list_position
		treemapchart = {
			parentanchor = center

			block "piechartsize" {
				size = { 140 140 }
			}

			block "datamodel" {}

			item = {
				treemapslice = {
					texture = "gfx/interface/treemapchart/treemapchart.dds"
					block "tooltip" {
						datacontext = "[GetPlayer]"
						tooltip = "CLOUT_PIECHART"
					}

					block "pieslice" {
						value = "[InterestGroup.GetCloutAsFloat]"
					}

					block "color" {
						color = "[InterestGroup.GetColor]"
					}
				}
			}
		}
		icon = {
			texture = "gfx/interface/treemapchart/treemapchart_frame.dds"
			parentanchor = center
			size = { 124% 110% }
		}
	}

	type v3_plotline_clout = v3_plotline {
		blockoverride "header" {
			text = "CLOUT_GRAPH_TITLE"
		}
		block "datamodel" {
			blockoverride "datamodel" {
				datamodel = "[AccessPlayer.AccessActiveInterestGroups]"
			}
		}
		blockoverride "line_color" {
			color = "[InterestGroup.GetColor]"
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(InterestGroup.GetCloutTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized( InterestGroup.GetCloutTrend, '(CFixedPoint)0', PoliticsPanel.GetCloutGraphMax )]"
		}
		blockoverride "maxvalue" {
			text = "[PoliticsPanel.GetCloutGraphMax|%0]"
		}
		blockoverride "minvalue" {
			raw_text = "0%"
		}
		blockoverride "startdate" {
			text = "[PoliticsPanel.GetCloutGraphDateStart]"
		}
		blockoverride "enddate" {
			text = "[PoliticsPanel.GetCloutGraphDateEnd]"
		}
		blockoverride "singleitem" {}

		blockoverride "tooltip" {
			tooltipwidget = {
				FancyTooltip_IG = {}
			}
		}
		blockoverride "empty_state_visibility" {
			visible = "[EqualTo_string(PoliticsPanel.GetCloutGraphDateStart, PoliticsPanel.GetCloutGraphDateEnd)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}

		blockoverride "everything_that_is_not_empty_state_visibility" {
			visible = "[Not(EqualTo_string(PoliticsPanel.GetCloutGraphDateStart, PoliticsPanel.GetCloutGraphDateEnd))]"
		}
	}

	type v3_plotline_gdp = v3_plotline {
		using = default_list_position
		blockoverride "header" {
			text = "GDP"
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetGDPTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetGDPTrend, '(CFixedPoint)0', GetMax(Country.GetGDPTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetGDPTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetGDPTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetGDPTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[EqualTo_string(GetOldestDate(Country.GetGDPTrend), GetLatestDate(Country.GetGDPTrend))]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_population = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "POPULATION"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetPopulationTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetPopulationTrend, '(CFixedPoint)0', GetMax(Country.GetPopulationTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetPopulationTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetPopulationTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetPopulationTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetPopulationTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_prestige = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "PRESTIGE"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetPrestigeTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetPrestigeTrend, '(CFixedPoint)0', GetMax(Country.GetPrestigeTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetPrestigeTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetPrestigeTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetPrestigeTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetPrestigeTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_incorporated_literacy = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "[concept_literacy]"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetIncorporatedLiteracyTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetIncorporatedLiteracyTrend, '(CFixedPoint)0', GetMax(Country.GetIncorporatedLiteracyTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetIncorporatedLiteracyTrend)|1%]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetIncorporatedLiteracyTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetIncorporatedLiteracyTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetIncorporatedLiteracyTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_population_lower = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "POPULATION_COUNTRY_LOWER"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetLowerStrataPopulationTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetLowerStrataPopulationTrend, '(CFixedPoint)0', GetMax(Country.GetLowerStrataPopulationTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetLowerStrataPopulationTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetLowerStrataPopulationTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetLowerStrataPopulationTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetLowerStrataPopulationTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_population_middle = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "POPULATION_COUNTRY_MIDDLE"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetMiddleStrataPopulationTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetMiddleStrataPopulationTrend, '(CFixedPoint)0', GetMax(Country.GetMiddleStrataPopulationTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetMiddleStrataPopulationTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetMiddleStrataPopulationTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetMiddleStrataPopulationTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetMiddleStrataPopulationTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_population_upper = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "POPULATION_COUNTRY_UPPER"
		}

		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetUpperStrataPopulationTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetUpperStrataPopulationTrend, '(CFixedPoint)0', GetMax(Country.GetUpperStrataPopulationTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetUpperStrataPopulationTrend)|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetUpperStrataPopulationTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetUpperStrataPopulationTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetUpperStrataPopulationTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_sol = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "AVG_STANDARD_OF_LIVING"
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetAverageSoLByPopulationTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetAverageSoLByPopulationTrend, '(CFixedPoint)0', GetMax(Country.GetAverageSoLByPopulationTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetAverageSoLByPopulationTrend)|1]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetAverageSoLByPopulationTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetAverageSoLByPopulationTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetAverageSoLByPopulationTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_sol_lower = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "AVG_STANDARD_OF_LIVING_COUNTRY_LOWER"
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetAverageSoLLowerTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetAverageSoLLowerTrend, '(CFixedPoint)0', GetMax(Country.GetAverageSoLLowerTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetAverageSoLLowerTrend)|1]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetAverageSoLLowerTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetAverageSoLLowerTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetAverageSoLLowerTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_sol_middle = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "AVG_STANDARD_OF_LIVING_COUNTRY_MIDDLE"
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetAverageSoLMiddleTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetAverageSoLMiddleTrend, '(CFixedPoint)0', GetMax(Country.GetAverageSoLMiddleTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetAverageSoLMiddleTrend)|1]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetAverageSoLMiddleTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetAverageSoLMiddleTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetAverageSoLMiddleTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_sol_upper = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "AVG_STANDARD_OF_LIVING_COUNTRY_UPPER"
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(Country.GetAverageSoLUpperTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(Country.GetAverageSoLUpperTrend, '(CFixedPoint)0', GetMax(Country.GetAverageSoLUpperTrend) )]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(Country.GetAverageSoLUpperTrend)|1]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(Country.GetAverageSoLUpperTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(Country.GetAverageSoLUpperTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(Country.GetAverageSoLUpperTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_money = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "MONEY"
		}
		blockoverride "line_color" {
			color = { .9 .9 .9 1.0 }
		}
		blockoverride "size" {
			size = { 280 100 }
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(GetPlayer.GetGoldReservesTrend))]"
			plotpoints = "[GetTrendPlotPointsNormalized(GetPlayer.GetGoldReservesTrend, Negate_CFixedPoint(GetPlayer.GetMaxCredit), GetMax(GetPlayer.GetGoldReservesTrend))]"
		}
		blockoverride "maxvalue" {
			text = "[GetMax(GetPlayer.GetGoldReservesTrend)|K]"
		}
		blockoverride "minvalue" {
			text = "[Negate_CFixedPoint(GetPlayer.GetMaxCredit)|K]"
		}
		blockoverride "startdate" {
			text = "[GetOldestDate(GetPlayer.GetGoldReservesTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(GetPlayer.GetGoldReservesTrend)]"
		}
		blockoverride "multiitem" {}

		blockoverride "extra_plotlines" {
			plotline = {
				visible = "[GreaterThan_CFixedPoint(GetMax(GetPlayer.GetGoldReservesTrend), '(CFixedPoint)0')]"
				size = { 100% 100% }
				using = plot_line
				width = 3.5
				color = { 0 0 0 0.5 }
				plotpoints = "[GetPlayer.GetZeroMoneyPlotPoints]"
			}
		}
		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(GetPlayer.GetGoldReservesTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
	}

	type v3_plotline_radicals_loyalists = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "LOYALISTS_AND_RADICALS_IN_COUNTRY"
		}

		blockoverride "datamodel" {
			datamodel = "[GetLoyaltyTypes]"
		}

		blockoverride "line_color" {
			color = "[LoyaltyType.GetColor]"
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(LoyaltyType.GetCountryTrend(GetPlayer.Self)))]"
			plotpoints = "[GetTrendPlotPointsNormalized(LoyaltyType.GetCountryTrend(GetPlayer.Self), '(CFixedPoint)0', Max_CFixedPoint(GetMax(GetPlayer.GetRadicalsTrend), GetMax(GetPlayer.GetLoyalistsTrend)))]"
		}
		blockoverride "tooltip" {
			tooltip = "[LoyaltyType.GetCountryTooltip(GetPlayer.Self)]"
		}
		blockoverride "singleitem" {}

		blockoverride "maxvalue" {
			text = "[Max_CFixedPoint(GetMax(GetPlayer.GetRadicalsTrend), GetMax(GetPlayer.GetLoyalistsTrend))|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}

		# we can use either the radicals or loyalists trend for general values
		blockoverride "startdate" {
			text = "[GetOldestDate(GetPlayer.GetRadicalsTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(GetPlayer.GetRadicalsTrend)]"
		}
		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(GetPlayer.GetRadicalsTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
		blockoverride "everything_that_is_not_empty_state_visibility" {
			visible = "[Not(IsEmpty(GetPlayer.GetRadicalsTrend))]"
		}
	}

	type v3_plotline_ig_radicals_loyalists = v3_plotline {
		using = default_list_position

		blockoverride "header" {
			text = "LOYALISTS_AND_RADICALS_IN_INTEREST_GROUP"
		}

		blockoverride "datamodel" {
			datamodel = "[GetLoyaltyTypes]"
		}

		blockoverride "line_color" {
			color = "[LoyaltyType.GetColor]"
		}
		blockoverride "line_plotpoints" {
			visible = "[Not(IsEmpty(LoyaltyType.GetInterestGroupTrend(InterestGroup.Self)))]"
			plotpoints = "[GetTrendPlotPointsNormalized(LoyaltyType.GetInterestGroupTrend(InterestGroup.Self), '(CFixedPoint)0', Max_CFixedPoint(GetMax(InterestGroup.GetRadicalsTrend), GetMax(InterestGroup.GetLoyalistsTrend)))]"
		}
		blockoverride "tooltip" {
			tooltip = "[LoyaltyType.GetInterestGroupTooltip(InterestGroup.Self)]"
		}
		blockoverride "singleitem" {}

		blockoverride "maxvalue" {
			text = "[Max_CFixedPoint(GetMax(InterestGroup.GetRadicalsTrend), GetMax(InterestGroup.GetLoyalistsTrend))|K]"
		}
		blockoverride "minvalue" {
			raw_text = "0"
		}

		# we can use either the radicals or loyalists trend for general values
		blockoverride "startdate" {
			text = "[GetOldestDate(InterestGroup.GetRadicalsTrend)]"
		}
		blockoverride "enddate" {
			text = "[GetLatestDate(InterestGroup.GetRadicalsTrend)]"
		}
		blockoverride "empty_state_visibility" {
			visible = "[IsEmpty(InterestGroup.GetRadicalsTrend)]"
		}
		blockoverride "empty_state_text" {
			text = "GRAPH_NOT_INITIALIZED"
		}
		blockoverride "everything_that_is_not_empty_state_visibility" {
			visible = "[Not(IsEmpty(InterestGroup.GetRadicalsTrend))]"
		}
	}

	type v3_plotline = flowcontainer {
		margin_top = 10

		flowcontainer = {
			direction = vertical
			margin_bottom = 40
			margin_left = 60
			margin_right = 30

			background = {
				using = paper_bg
			}

			# header
			textbox = {
				using = default_list_position

				block "header" {
					raw_text = "#title header name#!"
				}
				autoresize = yes
				align = hcenter|nobaseline
				margin_top = 10
				margin_bottom = 10
				default_format = "#title"
				multiline = yes
				maximumsize = { 300 -1 }
			}

			# graph
			widget = {
				block "size" {
					size = { 360 200 }
				}

				block "empty_state" {
					textbox = {
						block "empty_state_visibility" {
							visible = no
						}
						block "empty_state_text" {
							raw_text = "#todo nothing to see here#!"
						}
						parentanchor = center
						align = hcenter|nobaseline
					}
				}

				background = {
					texture = "gfx/interface/graph/graph_frame.dds"
					spriteType = Corneredtiled
					spriteborder = { 2 2 }
					texture_density = 2
					margin = { 4 4 }
					alpha = 0.85

					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
						alpha = 0.7
					}
				}

				widget = {
					size = { 100% 100% }

					block "datamodel" {}

					block "everything_that_is_not_empty_state_visibility" {}

					block "multiitem" {
						item = {
							plotline = {
								size = { 100% 100% }
								using = plot_line
								width = 3.5

								block "line_color" {
									color = { 0.24 0.32 0.18 0.7 }
								}

								block "line_plotpoints" {}
								block "tooltip" {}
							}
						}
					}

					block "singleitem" {
						plotline = {
							size = { 100% 100% }
							using = plot_line
							width = 3.5

							block "line_color" {
								color = { 0.24 0.32 0.18 0.7 }
							}

							block "tooltip" {}

							block "line_plotpoints" {}
						}
					}

					block "extra_plotlines" {}
				}

				axis = {
					size = { 100% 100% }
					direction = vertical

					axis_label = {
						textbox = {
							autoresize = yes
							widgetanchor = vcenter|right
							parentanchor = left
							margin_right = 8
							margin_bottom = 10
							align = left|nobaseline
							using = fontsize_small
							#default_format = "#title"

							block "minvalue" {
								raw_text = "0"
							}
						}
					}

					axis_label = {
						textbox = {
							autoresize = yes
							widgetanchor = vcenter|right
							parentanchor = left
							margin_right = 8
							margin_top = 10
							align = left|nobaseline
							using = fontsize_small
							#default_format = "#title"

							block "maxvalue" {
								raw_text = "100%"
							}
						}
					}
				}

				axis = {
					size = { 100% 100% }
					direction = horizontal

					axis_label = {
						textbox = {
							autoresize = yes
							parentanchor = bottom
							widgetanchor = left|top
							align = left
							margin_top = 8
							using = fontsize_small
							#default_format = "#title"

							block "startdate" {
								text = "[PoliticsPanel.GetCloutGraphDateStart]"
							}
						}
					}

					axis_label = {
						textbox = {
							autoresize = yes
							parentanchor = bottom
							widgetanchor = right|top
							align = right
							margin_top = 8
							using = fontsize_small
							#default_format = "#title"

							block "enddate" {
								text = "[PoliticsPanel.GetCloutGraphDateEnd]"
							}
						}
					}
				}
			}
		}
	}
	
	# use for fullscreens if you need layoutpolicies
	type v3_plotline_hbox = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin_top = 10
		margin_bottom = 40
		margin_left = 60
		margin_right = 30
		spacing = 8

		background = {
			using = paper_bg
		}

		# header
		textbox = {
			block "header" {
				raw_text = "#title header name#!"
			}
			layoutpolicy_horizontal = expanding
			size = { 0 20 }
			align = center|nobaseline
			margin_top = 10
			margin_bottom = 10
			default_format = "#title"
			elide = right
			fontsize_min = 12
		}

		# graph
		widget = {
			block "size" {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
			}

			block "empty_state" {
				textbox = {
					block "empty_state_visibility" {
						visible = no
					}
					block "empty_state_text" {
						raw_text = "#todo nothing to see here#!"
					}
					parentanchor = center
					align = hcenter|nobaseline
				}
			}

			background = {
				texture = "gfx/interface/graph/graph_frame.dds"
				spriteType = Corneredtiled
				spriteborder = { 2 2 }
				texture_density = 2
				margin = { 4 4 }
				alpha = 0.85

				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0.7
				}
			}

			widget = {
				size = { 100% 100% }

				block "datamodel" {}

				block "everything_that_is_not_empty_state_visibility" {}

				block "multiitem" {
					item = {
						plotline = {
							size = { 100% 100% }
							using = plot_line
							width = 3.5

							block "line_color" {
								color = { 0.24 0.32 0.18 0.7 }
							}

							block "line_plotpoints" {}
							block "tooltip" {}
						}
					}
				}

				block "singleitem" {
					plotline = {
						size = { 100% 100% }
						using = plot_line
						width = 3.5

						block "line_color" {
							color = { 0.24 0.32 0.18 0.7 }
						}

						block "tooltip" {}

						block "line_plotpoints" {}
					}
				}

				block "extra_plotlines" {}
			}

			axis = {
				size = { 100% 100% }
				direction = vertical

				axis_label = {
					textbox = {
						autoresize = yes
						widgetanchor = vcenter|right
						parentanchor = left
						margin_right = 8
						margin_bottom = 10
						align = left|nobaseline
						using = fontsize_small
						#default_format = "#title"

						block "minvalue" {
							raw_text = "0"
						}
					}
				}

				axis_label = {
					textbox = {
						autoresize = yes
						widgetanchor = vcenter|right
						parentanchor = left
						margin_right = 8
						margin_top = 10
						align = left|nobaseline
						using = fontsize_small
						#default_format = "#title"

						block "maxvalue" {
							raw_text = "100%"
						}
					}
				}
			}

			axis = {
				size = { 100% 100% }
				direction = horizontal

				axis_label = {
					textbox = {
						autoresize = yes
						parentanchor = bottom
						widgetanchor = left|top
						align = left
						margin_top = 8
						using = fontsize_small
						#default_format = "#title"

						block "startdate" {
							text = "[PoliticsPanel.GetCloutGraphDateStart]"
						}
					}
				}

				axis_label = {
					textbox = {
						autoresize = yes
						parentanchor = bottom
						widgetanchor = right|top
						align = right
						margin_top = 8
						using = fontsize_small
						#default_format = "#title"

						block "enddate" {
							text = "[PoliticsPanel.GetCloutGraphDateEnd]"
						}
					}
				}
			}
		}
	}

	type in_government_header = flowcontainer {
		direction = horizontal
		tooltip = IN_GOVERNMENT_DESC
		margin_left = 10
		spacing = 5

		icon = {
			texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
			size = { 40 40 }
		}


		textbox = {
			parentanchor = left|vcenter
			widgetanchor = left|vcenter
			autoresize = yes
			text = IN_GOVERNMENT_TITLE
			align = left|nobaseline
		}
	}

	type in_opposition_header = flowcontainer {
		direction = horizontal
		tooltip = IN_OPPOSITION_DESC
		margin_left = 10
		spacing = 5

		icon = {
			texture = "gfx/interface/icons/generic_icons/in_opposition_icon.dds"
			size = { 40 40 }
		}

		textbox = {
			parentanchor = left|vcenter
			widgetanchor = left|vcenter
			autoresize = yes
			text = IN_OPPOSITION_TITLE
			align = left|nobaseline
		}
	}

	type marginal_header = flowcontainer {
		direction = horizontal
		tooltip = MARGINAL_DESC
		margin_left = 5

		textbox = {
			parentanchor = left|vcenter
			widgetanchor = left|vcenter
			autoresize = yes
			text = MARGINAL_TITLE
			align = left|nobaseline
		}
	}

	type active_law = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"
		using = tooltip_ws
		tooltip = "DATA_LAW_NAME_TOOLTIP_CONDENSED"

		tooltipwidget = {
			FancyTooltip_Law = {}
		}

		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = fixed
			size = { 0 97 }

			onmousehierarchyenter = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('show')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('approval_info').TriggerAnimation('hide')]"

			button = {
				using = default_button
				size = { 100% 100% }
				onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
			}

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
				margin = { 5 0 }
				margin_right = 20

				law_icon = {}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin = { 5 5 }

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}

					textbox = {
						layoutpolicy_horizontal = preferred
						text = "LAW_GROUP"
						align = left|nobaseline
						size = { 0 20 }
						elide = right
					}

					textbox = {
						layoutpolicy_horizontal = preferred
						text = "LAW"
						default_format = "#variable"
						align = left|nobaseline
						size = { 0 30 }
						using = fontsize_xl
						elide = right
						margin_bottom = 5
					}

					approval_info_small2 = {
						layoutpolicy_horizontal = preferred

						name = "approval_info"
						alpha = 0

						state = {
							name = show
							using = default_show_properties_fast
						}
						state = {
							name = hide
							using = default_hide_properties_fast
						}
					}

					widget = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
					}
				}

				widget = {
					size = { 40 60 }
					datacontext = "[Law.GetGroup]"
					datacontext = "[Law]"
					tooltip = "TOOLTIP_CHANGE_FROM_LAW"

					icon = {
						texture = "gfx/interface/icons/generic_icons/toggle.dds"
						alpha = "[TransparentIfFalse(Or(GreaterThan_int32(LawGroup.GetNumEnactable, '(int32)0'), GreaterThan_int32(LawGroup.GetNumPotentialEnactable, '(int32)0')))]"

						size = { 30 30 }
						parentanchor = bottom|hcenter
					}

					textbox = {
						visible = "[Not(GetPlayer.IsEnactingLaw)]"
						background = {
							using = blurry_dark_background
						}
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumEnactable)]"
						raw_text = "#variable [LawGroup.GetNumEnactable]#!"
						parentanchor = hcenter
					}

					textbox = {
						visible = "[GetPlayer.IsEnactingLaw]"
						background = {
							using = blurry_dark_background
						}
						raw_text = "#variable [LawGroup.GetNumPotentialEnactable]#!"
						tooltip = "TOOLTIP_CHANGE_FROM_LAW_CURRENTLY_ENACTING"
						alpha = "[TransparentIfZero_int32(LawGroup.GetNumPotentialEnactable)]"
						size = { 40 30 }
						using = fontsize_xl
						align = hcenter|nobaseline
						parentanchor = hcenter
					}
				}
			}
		}
	}

	type political_movement_item = button {
		onclick = "[InformationPanelBar.OpenChangeLaw(PoliticalMovement.GetLaw)]"
		using = default_button

		flowcontainer = {
			resizeparent = yes
			minimumsize = { 340 -1 }
			maximumsize = { 340 -1 }
			margin = { 15 10 }
			direction = vertical
			spacing = 5

			textbox = {
				text = "[PoliticalMovement.GetName]"
				align = left|nobaseline
				autoresize = yes
				elide = right
				using = fontsize_large
			}

			flowcontainer = {
				spacing = 10
				law_icon = {
					datacontext = "[PoliticalMovement.GetLaw]"
					parentanchor = vcenter
					size = { 70 70 }
				}

				flowcontainer = {
					direction = vertical

					textbox = {
						text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
						tooltip = "POLITICAL_MOVEMENT_SUPPORT_TOOLTIP"
						align = left|nobaseline
						autoresize = yes
						elide = right
					}

					textbox = {
						visible = "[Not(PoliticalMovement.IsPlacated)]"
						text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
						tooltip = "POLITICAL_MOVEMENT_RADICALISM_TOOLTIP"
						align = left|nobaseline
						autoresize = yes
						elide = right
					}

					textbox = {
						visible = "[PoliticalMovement.IsPlacated]"
						text = "[concept_political_movement_placated]"
						align = left|nobaseline
						autoresize = yes
						elide = right
					}

					flowcontainer = {
						direction = horizontal
						margin_top = 5

						flowcontainer = {
							minimumsize = { 90 30 }
							maximumsize = { 90 30 }
							spacing = 2
							tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"
							parentanchor = vcenter

							icon = {
								texture = "gfx/interface/icons/generic_icons/population.dds"
								size = { 30 30 }
								parentanchor = vcenter
							}
							textbox = {
								parentanchor = vcenter
								text = "[PoliticalMovement.GetNumSupportingPops|Dv]"
								autoresize = yes
								align = left|nobaseline
							}
						}

						dynamicgridbox = {
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
							datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
							flipdirection = yes
							item = {
								ig_button = {
									size = { 35 35 }
									tooltip = "CLOUT_PIECHART"
								}
							}
						}
					}
				}
			}
		}
	}

	### this is used for FLOWCONTAINER (right now only in IG panel)
	type enactable_generic_law = flowcontainer {
		direction = vertical
		visible = "[Law.IsVisible]"
		margin_bottom = 5

		background = {
			visible = "[Law.IsActive]"
			using = highlighted_square_selection
			margin = { 5 0 }
		}

		background = {
			visible = "[Not(Law.IsActive)]"
			using = entry_bg
		}

		widget = {
			size = { @panel_width 90 }

			tooltipwidget = {
				FancyTooltip_Law = {}
			}

			flowcontainer = {
				position = { 10 0 }
				parentanchor = vcenter
				spacing = 5

				law_icon = {
					size = { 70 70 }
				}

				flowcontainer = {
					parentanchor = vcenter
					direction = vertical

					block "lawgroup"
					{
						textbox = {
							text = "[Law.GetGroup.GetNameNoFormatting]"
							align = left|nobaseline
							size = { 250 20 }
							elide = right
						}
					}

					textbox = {
						text = "LAW"
						align = left|nobaseline
						size = { 250 30 }
						using = fontsize_xl
						elide = right
					}
				}
			}
			approval_info_small = {
				parentanchor = right|vcenter
				position = { -10 0 }

				blockoverride "progressbar_size" {
					size = { 100 9 }
				}
			}
		}

		law_enactment_controls = {}

		textbox = {
			text = CURRENTLY_ACTIVE_LAW
			size = { @panel_width 44 }
			visible = "[Law.IsActive]"
			align = hcenter|nobaseline
			using = fontsize_large
		}
	}

	### this is used for VBOX/HBOX
	type enactable_generic_law2 = hbox {
		alpha = "[TransparentIfFalse(Or(Or(IsPotential(Law.StartEnacting), Law.IsBeingEnacted), Law.IsActive))]"
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		visible = "[Law.IsVisible]"

		widget = {
			size = { 18 87 }

			icon = {
				visible = "[Law.IsActive]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/generic_icons/arrow_left.dds"
			}
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			margin = { 5 5 }

			background = {
				visible = "[And(Not(Law.IsActive),Not(Law.IsBeingEnacted))]"
				using = entry_bg_simple
			}

			background = {
				using = light_bg
				alpha = 0.8
				using = frame_small_mask
				visible = "[Law.IsActive]"
			}
			background = {
				using = frame_small
				visible = "[Law.IsActive]"
			}

			background = {
				visible = "[Law.IsBeingEnacted]"
				using = dark_area
				alpha = 0.35
			}
			background = {
				visible = "[Law.IsBeingEnacted]"
				using = highlighted_square_selection
			}

			widget = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = fixed
				size = { 0 90 }

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					margin_right = 10

					button = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding

						block "button" {}

						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding

							resizeparent = yes

							margin = { 5 0 }

							tooltipwidget = {
								FancyTooltip_Law = {}
							}

							law_icon = {
								size = { 55 55 }
							}

							vbox = {
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = expanding
								margin_right = 5

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
								}

								block "lawgroup"
								{
									textbox = {
										layoutpolicy_horizontal = preferred
										raw_text = "#title [Law.GetGroup.GetNameNoFormatting]#!"
										align = left|nobaseline
										size = { 0 20 }
										elide = right
										margin_left = 5
										fontsize_min = 14
									}
								}

								textbox = {
									layoutpolicy_horizontal = preferred
									text = "LAW"
									align = left|nobaseline
									size = { 0 30 }
									using = fontsize_xxl
									elide = right
									margin_bottom = 5
									margin_left = 5
									fontsize_min = 14
								}

								widget = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
								}
							}

							block "currently_active_law" {

								vbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = expanding
									margin_right = 5

									widget = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
									}

									textbox = {
										layoutpolicy_horizontal = preferred
										text = "CURRENTLY_ACTIVE_LAW_IN_LAWGROUP"
										align = left|nobaseline
										size = { 0 20 }
										elide = right
										margin_left = 5
										fontsize_min = 14
									}

									textbox = {
										layoutpolicy_horizontal = preferred
										text = "LAW_GROUP_ACTIVE_LAW"
										align = left|nobaseline
										size = { 0 30 }
										using = fontsize_large
										elide = right
										margin_bottom = 5
										margin_left = 5
										fontsize_min = 14
									}

									widget = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
									}
								}
							}
						}
					}

					approval_info_small = {
						name = "tutorial_highlight_approval_info"
					}
				}
			}

			law_enactment_controls2 = {}

			textbox = {
				layoutpolicy_horizontal = preferred
				text = "CURRENTLY_ACTIVE_LAW"
				size = { 0 40 }
				visible = "[Law.IsActive]"
				align = hcenter|nobaseline
				using = fontsize_large
				elide = right

				background = {
					using = light_bg
					alpha = 0.4
				}
			}
			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = expanding
				margin = { 5 0 }

				background = {
					using = dark_area
				}

				textbox = {
					layoutpolicy_horizontal = preferred
					text = "BEING_ENACTED_LAW"
					size = { 0 40 }
					visible = "[Law.IsBeingEnacted]"
					align = hcenter|nobaseline
					elide = right
				}

				button_icon_cancel = {
					visible = "[Law.IsBeingEnacted]"
					size = { 35 35 }
					tooltip = "[Law.GetCancelTooltip]"
					enabled = "[IsValid( Law.StopEnacting )]"
					onclick = "[PopupManager.AskConfirmation( Law.StopEnacting )]"
					using = close_button_sound
				}
			}
		}

		widget = {
			size = { 18 87 }

			icon = {
				visible = "[Law.IsBeingEnacted]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/generic_icons/arrow_right.dds"
			}
		}
	}

	### law with button (for hbox/vbox)
	type enactable_generic_law3 = enactable_generic_law2 {

		blockoverride "background" {
			background = {
				using = dark_area
				margin = { -5 -5 }
				alpha = 0.12
			}
		}

		blockoverride "button" {
			using = default_button
			onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		}
	}

	type enacting_law = hbox {
		layoutpolicy_horizontal = preferred
		minimumsize = { 0 80 }
		margin = { 5 5 }

		background = {
			using = dark_area
			margin = { -2 10 }
		}

		vbox = {
			layoutpolicy_horizontal = preferred

			hbox = {
				layoutpolicy_horizontal = preferred

				vbox = {
					margin_left = 20
					margin_bottom = 10
				
					icon = {
						size = { 80 80 }
						texture = "gfx/interface/backgrounds/round_button_bg.dds"

						tooltipwidget = {
							FancyTooltip_Law = {}
						}
						
						round_progress_default = {
							size = { 72 72 }
							value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
							parentanchor = center
						}
						
						law_icon = {
							size = { 64 64 }
							parentanchor = center
						}
					}

					button = {
						visible = "[Law.IsBeingEnacted]"
						size = { 100 40 }
						using = default_button_action
						text = "CANCEL"
						tooltip = "[Law.GetCancelTooltip]"
						enabled = "[IsValid( Law.StopEnacting )]"
						onclick = "[PopupManager.AskConfirmation( Law.StopEnacting )]"
					}
				}

				### INFO
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					spacing = 5
					margin = { 20 10 }
					
					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						text = "NEXT_CHECKPOINT_SHORT_WITH_LABEL"
						align = left|nobaseline
						elide = right
						fontsize_min = 14
					}
					
					hbox = {
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							text = "OUTCOME_SUCCESS"
							align = left|nobaseline
							elide = right
							alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
						}
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							text = "OUTCOME_ADVANCE"
							align = left|nobaseline
							elide = right
							alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
						}
					}

					hbox = {
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							text = "OUTCOME_DEBATE"
							align = left|nobaseline
							elide = right
							alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
						}
						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 25 }
							text = "OUTCOME_STALL"
							align = left|nobaseline
							elide = right
							alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
						}
					}
				}
			}

			law_enactment_events_vbox = {}
		}
	}

	### LAWS LIST
	type laws_list = vbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		layoutstretchfactor_horizontal = 1

		using = entry_bg_fancy

		widget = {
			layoutpolicy_horizontal = preferred
			tooltip = "ACTIVE_LAWS_DESC"
			size = { 0 38 }

			background = {
				using = default_header_bg
				using = frame_small_mask_top
			}

			textbox = {
				block "header" {
					raw_text = "INSERT_HEADER"
				}
				size = { 100% 100% }
				align = center|nobaseline
				using = fontsize_large
				default_format = "#title"
				elide = right
			}
		}

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			margin_top = 5
			block "law_datamodel" {
			}

			item = {
				vbox = {
					margin = { 10 3 }
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					widgetid = "[Law.GetGroup.GetKey]"

					background = {
						visible = "[Law.IsBeingEnacted]"
						using = highlighted_square_selection
						margin = { -7 0 }
						margin_top = 102
					}

					active_law = {
						visible = "[Not(Law.IsBeingEnacted)]"
					}

					enacting_law = {
						visible = "[Law.IsBeingEnacted]"
					}
				}
			}
		}
		widget = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
		}
	}

	type influential_icon = icon {
		block "powerful_visibility" {
			visible = "[InterestGroup.IsPowerful]"
		}
		size = { 100% 100% }
		parentanchor = center
		texture = "gfx/interface/icons/ig_icons/influential_ig_frame.dds"
		alwaystransparent = yes
	}

	type party_icon = widget {
		size = { 45 45 }

		block "tooltip" {
			tooltipwidget = {
				FancyTooltip_Party = {}
			}
		}

		block "icon" {
			icon = {
				size = { 100% 100% }
				texture = "[Party.GetIcon]"
				parentanchor = center
			}
		}

		block "in_government_icon" {
			icon = {
				texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
				size = { 40% 40% }
				visible = "[Party.IsInGovernment]"
				tooltip = IN_GOVERNMENT_DESC
				position = { -2 2 }
				parentanchor = bottom
			}
		}
	}

	type ig_icon = widget {
		block "button_size" {
			size = { 45 45 }
		}

		block "tooltip" {
			tooltipwidget = {
				FancyTooltip_IG = {}
			}
		}

		block "influential" {
			influential_icon = {}
		}

		block "icon" {
			icon = {
				size = { 100% 100% }
				texture = "[InterestGroup.GetTexture]"
				parentanchor = center
			}
		}

		block "in_government_icon" {
			icon = {
				texture = "gfx/interface/icons/generic_icons/in_government_icon.dds"
				size = { 40% 40% }
				visible = "[InterestGroup.IsInGovernment]"
				tooltip = IN_GOVERNMENT_DESC
				position = { -2 2 }
				parentanchor = bottom
			}
		}
	}

	type ig_button = ig_icon {
		blockoverride "icon" {
			button_icon_round = {
				visible = "[InterestGroup.IsValid]"
				block "onclick" {
					onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
				}

				blockoverride "icon" {
					texture = "[InterestGroup.GetTexture]"
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}
			}
			icon = {
				visible = "[Not(InterestGroup.IsValid)]"
				size = { 100% 100% }
				texture = "gfx/interface/icons/ig_icons/politically_unaligned.dds"
				parentanchor = center
				tooltipwidget = {
					FancyTooltip_PoliticallyUnaligned = {}
				}
			}
		}
	}

	type investment_button_inactive = button {
		texture = "gfx/interface/politics_view/investment_button_1.dds"
		framesize = { 37 41 }
		gfxtype = buttongfx
		effectname = "NoHighlight"
		using = default_button_animation

		textbox = {
			block "text" {
				raw_text = "#todo todo#!"
			}
			position = { 0 -1 }
			using = fontsize_large
			parentanchor = center
			align = hcenter|nobaseline
			autoresize = yes
		}
	}
	type investment_button_active = button {
		texture = "gfx/interface/politics_view/investment_button_2.dds"
		framesize = { 37 41 }
		gfxtype = buttongfx
		effectname = "NoHighlight"
		using = default_button_animation

		textbox = {
			block "text" {
				raw_text = "#todo todo#!"
			}
			position = { 0 -2 }
			using = fontsize_xxl
			parentanchor = center
			align = hcenter|nobaseline
			autoresize = yes
		}
	}

	### used for FLOWCONTAINER
	type approval_info = flowcontainer {
		parentanchor = hcenter
		margin_top = 5
		margin_bottom = 10
		spacing = 5
		direction = vertical
		visible = "[Or( Not(IsDataModelEmpty(Law.AccessApprovingIGs)), Not(IsDataModelEmpty(Law.AccessDisapprovingIGs))) ]"

		flowcontainer = {
			tooltip = "TOOLTIP_LAW_APPROVAL"
			alpha = "[TransparentIfFalse(NotEqualTo_CFixedPoint( Law.GetPercentPolStrApprove, '(CFixedPoint)0' ))]"
			spacing = 15
			minimumsize = { 450 -1 }
			margin = { 10 10 }

			background = {
				using = entry_bg
			}

			icon = {
				size = { 35 35 }
				texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
				parentanchor = vcenter
			}

			flowcontainer = {
				direction = vertical
				spacing = 5

				textbox = {
					align = left|nobaseline
					text = "LAW_APPROVAL"
					autoresize = yes
					using = fontsize_large
				}
				default_progressbar_horizontal = {
					size = { 50 6 }
					blockoverride "values" {
						value = "[FixedPointToFloat(Law.GetPercentPolStrApprove)]"
						min = 0
						max = 1
					}
				}
			}

			overlappingitembox = {
				datamodel = "[Law.AccessApprovingIGs]"
				maximumsize = { 300	-1 }
				autoresize = yes

				item = {
					ig_button = {}
				}
			}
		}

		flowcontainer = {
			tooltip = "TOOLTIP_LAW_DISAPPROVAL"
			alpha = "[TransparentIfFalse(NotEqualTo_CFixedPoint( Law.GetPercentPolStrDisapprove, '(CFixedPoint)0' ))]"
			spacing = 15
			minimumsize = { 450 -1 }
			margin = { 10 10 }

			background = {
				using = entry_bg
			}

			icon = {
				size = { 35 35 }
				texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
				parentanchor = vcenter
			}

			flowcontainer = {
				direction = vertical
				spacing = 5

				textbox = {
					align = left|nobaseline
					text = "LAW_DISAPPROVAL"
					autoresize = yes
					using = fontsize_large
				}

				bad_progressbar_horizontal = {
					size = { 50 6 }
					blockoverride "values" {
						value = "[FixedPointToFloat(Law.GetPercentPolStrDisapprove)]"
						min = 0
						max = 1
					}
				}
			}

			overlappingitembox = {
				datamodel = "[Law.AccessDisapprovingIGs]"
				maximumsize = { 300	-1 }
				autoresize = yes

				item = {
					ig_button = {}
				}
			}
		}
	}

	### used for VBOX/HBOX
	type approval_info2 = widget {
		layoutpolicy_horizontal = expanding
		size = { 0 140 }

		vbox = {
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = preferred
			margin = { 5 5 }
			visible = "[Or( Not(IsDataModelEmpty(Law.AccessApprovingIGs)), Not(IsDataModelEmpty(Law.AccessDisapprovingIGs))) ]"
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				margin = { 8 8 }
				spacing = 10
				tooltip = "TOOLTIP_LAW_APPROVAL"
				alpha = "[TransparentIfFalse(NotEqualTo_CFixedPoint( Law.GetPercentPolStrApprove, '(CFixedPoint)0' ))]"

				background = {
					using = entry_bg
				}

				icon = {
					size = { 35 35 }
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
				}

				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						align = left|nobaseline
						text = "LAW_APPROVAL"
						autoresize = yes
						using = fontsize_large
					}
					bar_horizontal = {

						block "progressbar_size" {
							size = { 80 9 }
						}

						blockoverride "values" {
							min = 0
							max = 1
							value = "[Law.GetPercentPolStrApprove]"
						}

						blockoverride "color" {
							using = color_green_approval
						}
					}
				}

				overlappingitembox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					datamodel = "[Law.AccessApprovingIGs]"
					spacing = 10

					item = {
						ig_button = {
							using = tooltip_above
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				margin = { 8 8 }
				spacing = 10
				tooltip = "TOOLTIP_LAW_DISAPPROVAL"
				alpha = "[TransparentIfFalse(NotEqualTo_CFixedPoint( Law.GetPercentPolStrDisapprove, '(CFixedPoint)0' ))]"

				background = {
					using = entry_bg
				}

				icon = {
					size = { 35 35 }
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
				}

				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						align = left|nobaseline
						text = "LAW_DISAPPROVAL"
						autoresize = yes
						using = fontsize_large
					}
					bar_horizontal = {

						block "progressbar_size" {
							size = { 80 9 }
						}

						blockoverride "values" {
							min = 0
							max = 1
							value = "[Law.GetPercentPolStrDisapprove]"
						}

						blockoverride "color" {
							using = color_red_disapproval
						}
					}
				}

				overlappingitembox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = preferred
					datamodel = "[Law.AccessDisapprovingIGs]"
					spacing = 10

					item = {
						ig_button = {
							using = tooltip_above
						}
					}
				}
			}
		}
	}

	### approval info to the right in the entry.
	type approval_info_small = flowcontainer {
		direction = vertical
		spacing = 3
		margin = { 15 5 }

		background = {
			using = entry_bg_simple
		}

		flowcontainer = {
			visible = "[GreaterThan_CFixedPoint(Law.GetPercentPolStrApprove, '(CFixedPoint)0')]"
			spacing = 5
			tooltip = "TOOLTIP_LAW_APPROVAL"

			icon = {
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
				parentanchor = left|vcenter
			}

			textbox = {
				align = left|nobaseline
				text = "LAW_APPROVAL"
				size = { 45 20 }
				parentanchor = left|vcenter
			}

			bar_horizontal = {

				parentanchor = vcenter

				block "progressbar_size" {
					size = { 140 9 }
				}

				blockoverride "values" {
					min = 0
					max = 1
					value = "[Law.GetPercentPolStrApprove]"
				}

				blockoverride "color" {
					using = color_green_approval
				}
			}
		}

		flowcontainer = {
			spacing = 5
			tooltip = "TOOLTIP_LAW_DISAPPROVAL"
			visible = "[GreaterThan_CFixedPoint(Law.GetPercentPolStrDisapprove, '(CFixedPoint)0')]"


			icon = {
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
				parentanchor = left|vcenter
			}

			textbox = {
				align = left|nobaseline
				text = "LAW_DISAPPROVAL"
				size = { 45 20 }
				parentanchor = left|vcenter
			}

			bar_horizontal = {

				parentanchor = vcenter

				block "progressbar_size" {
					size = { 140 9 }
				}

				blockoverride "values" {
					min = 0
					max = 1
					value = "[Law.GetPercentPolStrDisapprove]"
				}

				blockoverride "color" {
					using = color_red_disapproval
				}
			}
		}

		flowcontainer = {
			visible = "[GreaterThan_CFixedPoint(Law.GetPercentPolStrUndecided, '(CFixedPoint)0')]"
			spacing = 5
			tooltip = "TOOLTIP_LAW_INDIFFERENT"

			icon = {
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
				parentanchor = left|vcenter
			}

			textbox = {
				align = left|nobaseline
				text = "LAW_INDIFFERENT"
				size = { 45 20 }
				parentanchor = left|vcenter
			}

			bar_horizontal = {

				parentanchor = vcenter

				block "progressbar_size" {
					size = { 140 9 }
				}

				blockoverride "values" {
					min = 0
					max = 1
					value = "[Law.GetPercentPolStrUndecided]"
				}

				blockoverride "color" {
					using = color_grey_undecided
				}
			}
		}
	}

	### used when there is a "CHANGE LAW" button to the right.
	type approval_info_small2 = flowcontainer {
		spacing = 10
		name = "approval_info"
		alpha = 0

		state = {
			name = show
			using = default_show_properties
		}
		state = {
			name = hide
			using = default_hide_properties
		}

		flowcontainer = {
			visible = "[GreaterThan_CFixedPoint(Law.GetPercentPolStrApprove, '(CFixedPoint)0')]"
			tooltip = "TOOLTIP_LAW_APPROVAL"
			spacing = 4

			icon = {
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
				parentanchor = left|vcenter
			}

			textbox = {
				align = left|nobaseline
				text = "LAW_APPROVAL"
				autoresize = yes
				parentanchor = left|vcenter
			}
		}

		flowcontainer = {
			visible = "[GreaterThan_CFixedPoint(Law.GetPercentPolStrDisapprove, '(CFixedPoint)0')]"
			tooltip = "TOOLTIP_LAW_DISAPPROVAL"
			spacing = 4

			icon = {
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
				parentanchor = left|vcenter
			}

			textbox = {
				align = left|nobaseline
				text = "LAW_DISAPPROVAL"
				autoresize = yes
				parentanchor = left|vcenter
			}
		}
	}

	type interest_group_filter = hbox {
		spacing = 5
		
		### IG FILTER
		widget = {
			size = { 75 75 }
			tooltip = "EXILE_POOL_INTEREST_GROUP_FILTER"
			using = tooltip_above

			icon = {
				texture = "gfx/interface/backgrounds/round_frame_dec.dds"
				size = { 75 75 }
				visible = "[Not( GetExilePool.IsInterestGroupFiltered(InterestGroup.Self) )]"
				using = default_fade_in_out
			}

			button_icon_round_big = {
				size = { 59 59 }
				parentanchor = center

				click_modifiers = {
					ondefault = "[GetExilePool.SetInterestGroupFilter(InterestGroup.Self)]"
					onshift = "[GetExilePool.ToggleInterestGroupFilter(InterestGroup.Self)]"
				}

				using = market_filter_staple_button_sound

				blockoverride "icon" {
					texture = "[InterestGroup.GetTexture]"
				}
				blockoverride "icon_size" {
					size = { 48 48 }
				}
			}
		}
	}

	type exiled_agitator = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = preferred
		margin = { 10 10 }
		spacing = 5

		using = entry_bg_fancy_solid_bg
		datacontext = "[Character.GetInterestGroup]"

		background = {
			using = fade_right_entry_fancy_header_colored
			color = "[InterestGroup.GetColor]"
		}

		character_portrait_large = {
			using = tooltip_below
			blockoverride "show_hat" {}
			blockoverride "highlight" {}
			
			### IG ICON
			character_ig_button = {
				blockoverride "interestgroup_datacontext" {
					datacontext = "[Character.AccessInterestGroup]"
				}
				parentanchor = bottom|left
				size = { 38 38 }
				position = { 2 0 }
				blockoverride "in_government_icon" {}
			}
			
			### IDEOLOGY
			icon = {
				parentanchor = bottom|right
				size = { 38 38 }
				position = { -2 0 }
				datacontext = "[Character.GetIdeology]"
				texture = "[Ideology.GetTexture]"
				tooltipwidget = {
					FancyTooltip_Ideology = {}
				}
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			spacing = 5

			textbox = {
				layoutpolicy_horizontal = expanding
				autoresize = yes
				align = left|nobaseline
				elide = right
				using = fontsize_xl
				text = "[Character.GetFullName]"
			}

			divider_clean = {
				blockoverride "size" {
					layoutpolicy_horizontal = expanding
					size = { 0 1 }
				}
			}

			hbox = {
				margin_left = 5
				layoutpolicy_horizontal = expanding

				textbox = {
					autoresize = yes
					minimumsize = { 0 20 }
					align = left|nobaseline
					text = "CHARACTER_POPULARITY_LABEL"
					elide = right
				}

				expand = {}
			}

			dynamicgridbox = {
				layoutpolicy_vertical = preferred
				datamodel = "[Character.AccessTraits]"
				datamodel_wrap = 3
				flipdirection = yes

				item = {
					character_trait_with_label = {}
				}
			}
		}

		expand = {}

		vbox = {
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = expanding

			hbox = {
				layoutpolicy_horizontal = preferred
				datacontext = "[Character.PredictLawToAgitate(GetPlayer.Self)]"
				datacontext = "[Law.GetPoliticalMovement]"
				spacing = 5

				textbox = {
					layoutpolicy_horizontal = preferred
					multiline = yes
					size = { 0 60 }
					elide = right
					fontsize_min = 14
					align = right|nobaseline
					text = "AGITATOR_START_JOIN_POLITICAL_MOVEMENT"
				}

				icon = {
					visible = "[Law.IsValid]"
					size = { 60 60 }
					texture = "[Law.GetTexture]"

					tooltipwidget = {
						FancyTooltip_Law = {}
					}
				}
			}

			expand = {}

			hbox = {
				layoutpolicy_horizontal = expanding

				expand = {}

				button = {
					using = default_button_action
					size = { 150 40 }
					text = "INVITE"
					datacontext = "[Character.GetInteraction('invite_exile')]"
					tooltip = "CHARACTER_INTERACTION_TOOLTIP"
					enabled = "[CharacterInteraction.IsCommandValid(Character.Self)]"
					onclick = "[CharacterInteraction.ExecuteCommand(Character.Self)]"
					onclick = "[GetVariableSystem.Toggle('politics_overview_exile_pool')]"
					clicksound = "event:/SFX/DLC/1.3_ip1/UI/character_invite"
				}
			}
		}

	}

	type character_trait_with_label = flowcontainer {
		margin = { 5 5 }

		tooltipwidget = {
			FancyTooltip_CharacterTrait = {}
		}
		icon = {
			size = { 32 45 }
			texture = "[CharacterTrait.GetTexture]"
		}

		textbox = {
			text = "[CharacterTrait.GetNameNoFormatting]"
			parentanchor = vcenter
			margin_left = 5
			max_width = 130
			autoresize = yes
			align = left|nobaseline
			multiline = yes
			elide = right
			using = fontsize_small
		}
	}

	### SECESSION ITEM
	type politics_panel_secession = flowcontainer {
		spacing = 20
		margin = { 20 20 }
		tooltip = "SECESSION_PROGRESS_TOOLTIP"

		background = {
			using = entry_bg
		}

		widget = {
			size = { 60 60 }
			parentanchor = vcenter

			icon = {
				using = rotate_glow_red_02
				parentanchor = center
				size = { 300% 300% }
			}

			icon = {
				parentanchor = center
				size = { 100% 100% }
				texture = "gfx/interface/icons/war_goals/secession.dds"
			}
		}

		flowcontainer = {
			parentanchor = vcenter
			direction = vertical
			spacing = 5

			textbox = {
				align = nobaseline
				autoresize = yes
				using = fontsize_xl
				text = "SECESSION_HEADER_FORMATTED"
			}

			textbox = {
				align = nobaseline
				autoresize = yes
				text = "SECESSION_CULTURE_TURMOIL_TEXT"
				max_width = 240
				fontsize_min = 14
				elide = right
			}
		}


		flowcontainer = {
			parentanchor = vcenter
			direction = vertical
			spacing = 5

			#### SECESSION PROGRESSBAR ####
			bad_progressbar_horizontal = {
				size = { 355 30 }
				tooltip = "SECESSION_PROGRESS_TOOLTIP"

				blockoverride "values" {
					value = "[FixedPointToFloat( CivilWar.GetProgress )]"
					min = 0
					max = 1
				}

				textbox = {
					text = "[CivilWar.GetProgress|v%0]"
					autoresize = yes
					align = nobaseline
					parentanchor = right|vcenter
					margin_right = 35
				}

				widget = {
					size = { 25 25 }
					parentanchor = right|vcenter
					position = { -5 0 }

					icon = {
						using = rotate_glow_red_02
						parentanchor = center
						size = { 300% 300% }
					}

					icon = {
						parentanchor = center
						size = { 100% 100% }
						texture = "gfx/interface/icons/war_goals/secession.dds"
					}
				}
			}

			flowcontainer = {
				parentanchor = right
				spacing = 5

				icon = {
					parentanchor = vcenter
					size = { 25 25 }
					texture = "gfx/interface/icons/state_status_icons/has_turmoil.dds"
				}

				textbox = {
					parentanchor = vcenter
					text = "SECESSION_HEADER_TOOLTIP"
					align = nobaseline
					autoresize = yes
					max_width = 330
					fontsize_min = 14
					elide = right
				}
			}
		}
	}

	### POLITICAL MOVEMENT ITEM - HBOX
	type politics_panel_political_movement_item = flowcontainer {
		direction = vertical

		tooltipwidget = {
			FancyTooltip_PoliticalMovement = {}
		}

		###NORMAL NON-REVOLUTIONARY MOVEMENT###
		widget = {
			size = { 300 100 }
			visible = "[Not(PoliticalMovement.IsRevolutionary)]"

			button = {
				size = { 100% 90 }
				onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
				using = default_button
				parentanchor = bottom

				vbox = {
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_top = 5
						margin_left = 5
						spacing = 2

						law_icon = {
							datacontext = "[PoliticalMovement.GetLaw]"
							size = { 37 37 }
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							align = left|vcenter
							elide = right
							fontsize_min = 12

							background = {
								using = dark_area
								alpha = 0.3
								margin_bottom = 6
								margin_top = 4
								
								modify_texture = {
									texture = "gfx/interface/masks/fade_horizontal_center.dds"
									blend_mode = alphamultiply
								}
							}
							
							text = "[PoliticalMovement.GetName]"	
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 10 0 }

						### Characters ###
						hbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = preferred
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
							datamodel = "[PoliticalMovement.GetSupportingCharacters]"
							margin_left = 5
							margin_bottom = 7
							spacing = 3

							item = {
								character_portrait_mini = {

									blockoverride "portrait_button_onrightclick" {}
									
									blockoverride "tooltip" {}

									character_ig_icon = {
										parentanchor = bottom|right
										size = { 12 12 }

										blockoverride "tooltip" {}
									}
								}
							}

							###CODE SUPPORT NEEDED TO SHOW ADDITIONAL AGITATORS AFTER 3 CHARACTER PORTRAITS. FEEL FREE TO CHANGE THE DATA CONTEXT IF THERES SOMETHING MORE SUITABLE###
							#textbox = {
							#	layoutpolicy_horizontal = expanding
							#	visible = "[GreaterThan_int32(PoliticalMovement.GetSupportingCharacters.GetNumAgitators, '(int32)0')]"
							#	size = { 0 30 }
							#	align = left|nobaseline
							#	parentanchor = vcenter
							#	text = "AGITATORS_IN_QUEUE"
							#	fontsize_min = 12
							#	elide = right
							#	autoresize = yes
							#}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							margin_bottom = 15

							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								visible = "[Not(PoliticalMovement.IsPlacated)]"
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
							}

							textbox = {
								layoutpolicy_horizontal = expanding
								size = { 0 20 }
								align = right|nobaseline
								elide = right
								fontsize_min = 12
								
								visible = "[PoliticalMovement.IsPlacated]"
								text = "[concept_political_movement_placated]"
							}
						}
					}
				}
			}
			
			### Interest Groups
			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
				datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
				parentanchor = hcenter

				item = {
					ig_button = {
						size = { 26 26 }
						
						tooltipwidget = {
						 	FancyTooltip_IG = {}
						}
					}
				}
			}
		}

		###REVOLUTIONARY MOVEMENT###
		widget = {
			size = { 300 120 }

			visible = "[PoliticalMovement.IsRevolutionary]"
			alpha = 0 

			###REVOLUTION ANIMATION###
			state = {
				#name = _show
				name = testing
				trigger_on_create = yes
				alpha = 1
				delay = 0.2
				duration = 0.7
				on_start = "[PdxGuiWidget.FindChild('revolution_button').TriggerAnimation('1')]"
				on_start = "[PdxGuiWidget.FindChild('interest_group_top').TriggerAnimation('show')]"
			}

			state = {
				#name = _hide
				name = testing2
				#trigger_on_create = yes
				#on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('hide')]"
				alpha = 0
				duration = 1
			}

			widget = {
				parentanchor = bottom
				size = { 100% 110 }

				button = {
					size = { 0 10 }
					name = revolution_button
					onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
					using = default_button
					parentanchor = top|right

					state = {
						name = 1
						next = 2
						size = { 330 10 }
						delay = 0.2
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 2
						next = 3
						size = { 300 10 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
					}

					state = {
						name = 3
						next = 4
						size = { 300 140 }
						delay = 0.1
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 4
						size = { 300 110 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
						on_finish = "[PdxGuiWidget.FindChild('outliner_info').TriggerAnimation('show')]"
						on_finish = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('show')]"
					}

					vfx = {
						size = { 100% 200% }
						blockoverride "entity_instance" {
							entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
						}
						
						alpha = 0.2
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						name = outliner_info
						margin_left = 8
						alpha = 0

						state = {
							name = show
							alpha = 1
							delay = 0.45
							duration = 0.1
							using = Animation_Curve_Default
						}

						widget = {
							size = { 100 100 }

							widget = {
								name = revolution_clock
								size = { 0 0 }
								parentanchor = center

								###REVOLUTION CLOCK ANIMATION###
								state = {
									name = show
									next = 2
									delay = 0.35
									size = { 180 180 }
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = 2
									size = { 100 100 }
									delay = 0.05
									duration = 0.1
									using = Animation_Curve_EaseOut
								}

								icon = {
									using = rotate_glow_animation_02
									blockoverride "rotate_animation_texture" {
										texture = "gfx/interface/animation/color_bad.dds"
									}
									size = { 250% 250% }
									parentanchor = center
								}

								round_progress_bad = {
									size = { 80% 80% }
									position = { 0 7 }
									value = "[FixedPointToFloat(PoliticalMovement.GetRevolution.GetClockTime)]"
									parentanchor = center
								}
								
								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/backgrounds/revolution_clock_frame.dds"	
									law_icon = {
										datacontext = "[PoliticalMovement.GetLaw]"
										size = { 50% 50% }
										position = { 0 4 }
										parentanchor = center
									}
								}
							}
						}


						vbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 10
							margin_right = 5

							### REVOLUTION PROGRESSBAR ###
							widget = {
								size = { 180 25 }
								
								bad_progressbar_horizontal = {
									datacontext = "[PoliticalMovement.GetRevolution]"
									size = { 180 25 }
									tooltip = "REVOLUTIONS_PROGRESS_TOOLTIP"

									blockoverride "values" {
										value = "[FixedPointToFloat( PoliticalMovement.GetRevolution.GetProgress )]"
										min = 0
										max = 1
									}

									flowcontainer = {
										parentanchor = vcenter
										margin_left = 10
										spacing = 7

										### revolution header
										textbox = {
											text = "REVOLUTIONS_HEADER"
											tooltip = "REVOLUTIONS_HEADER_TOOLTIP"
											align = nobaseline
											autoresize = yes
										}
									}

									textbox = {
										text = "[PoliticalMovement.GetRevolution.GetProgress|%0v]"
										autoresize = yes
										align = nobaseline
										parentanchor = right|vcenter
										margin_right = 35
									}
									
									blockoverride "in_government_icon"{}

									icon = {
										parentanchor = right|vcenter
										size = { 25 25 }
										texture = "gfx/interface/icons/politics_icons/radicalized.dds"
										position = { -5 0 }
									}
								}
							}

							### LAW HEADER ###
							hbox = {
								layoutpolicy_horizontal = expanding
								margin_top = 5
								margin_right = 12
								spacing = 2

								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 20 }
									align = right|vcenter
									elide = right
									fontsize_min = 12

									background = {
										using = dark_area
										alpha = 0.4
										margin_bottom = 6
										margin_top = 4
										
										modify_texture = {
											texture = "gfx/interface/masks/fade_horizontal_center.dds"
											blend_mode = alphamultiply
										}
									}
									
									text = "[PoliticalMovement.GetName]"	
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								margin_right = 12
								spacing = 2


								widget = {
									size = { 30 30 }
									visible = "[IsDataModelEmpty(PoliticalMovement.GetTopSupportingCharacters)]"
								}

								### Characters ###
								widget = {
									layoutpolicy_horizontal = expanding
									size = { 0 35 }
									visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetTopSupportingCharacters))]"
									flowcontainer = {
										parentanchor = bottom|left
										spacing = 3
										margin_right = 10

										dynamicgridbox = {
											flipdirection = yes
											datamodel = "[PoliticalMovement.GetTopSupportingCharacters]"

											item = {
												character_portrait_mini = {
													character_ig_icon = {
														size = { 12 12 }
														parentanchor = right|bottom
													}
												}
											}
										}

										textbox = {
											visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetBottomSupportingCharacters))]"
											tooltip = "[PoliticalMovement.GetBottomSupportingCharactersDesc]"
											size = { 0 30 }
											align = left|nobaseline
											parentanchor = vcenter
											text = "AGITATORS_IN_QUEUE"
											fontsize_min = 12
											autoresize = yes
										}
									}
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									visible = "[Not(PoliticalMovement.IsPlacated)]"
									margin_top = 10
									size = { 0 20 }
									align = right|nobaseline
									elide = right
									fontsize_min = 12
									text = "POLITICAL_MOVEMENT_RADICALISM_WITHOUT_LABEL"
								}
							}
						}
					}
				}

			}

			
			### Interest Groups
			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups))]"
				datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
				parentanchor = hcenter
				alpha = 0
				name = "interest_group_top"

				state = {
					name = show
					alpha = 1
					delay = 1.4
					duration = 0.2
					using = Animation_Curve_Default
				}
				item = {
					ig_button = {
						size = { 26 26 }
						
						tooltipwidget = {
						 	FancyTooltip_IG = {}
						}
					}
				}
			}
		}

		outliner_revolutionary_movement_events = {
			visible = "[PoliticalMovement.IsRevolutionary]"
			
			blockoverride "size" {
				size = { 300 35 }
			}

			blockoverride "highlight_size" {
				size = { 290 24 }
			}
		}
	}
}

template = "color_green_approval"
{
   color = { 0 128 0 1 }
}

template = "color_red_disapproval"
{
   color = { 128 0 0 1 }
}

template = "color_grey_undecided"
{
   color = { 46 49 49 0.7 }
}

template = "color_gold_positive"
{
   color = { 0.7 0.5 0.2 1 }
}

template = "color_blue_negative"
{
   color = { 0.2 0.4 0.5 1 }
}


