generate_character_type = {
	name = generate_character_general

	blockoverride "window_header_name" {
		text = "RECRUIT_CHARACTER_GENERAL_HEADER"
	}
	
	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	
	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideRecruitGeneral]"
	}

	blockoverride "datamodel"
	{
		datamodel = "[AccessPlayer.AccessGeneralsOffer]"
	}
}

generate_character_type = {
	name = generate_character_admiral

	blockoverride "window_header_name" {
		text = "RECRUIT_CHARACTER_ADMIRAL_HEADER"
	}

	blockoverride "header_close_button" {
		visible = yes
		onclick = "[PopupManager.HideRecruitAdmiral]"
	}

	blockoverride "datamodel"
	{
		datamodel = "[AccessPlayer.AccessAdmiralsOffer]"
	}
}

types generate_character_types
{
	type generate_character_type = default_popup
	{
		layer = top
		blockoverride "header_close_button_visibility" {
			visible = yes
		}

		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				block "datamodel" {}
				resizeparent = yes
				direction = horizontal
				spacing = 5

				item = {
					container = {
						datacontext = "[Character.GetCountry]"

						using = entry_bg_fancy
						
						flowcontainer = {
							direction = vertical
							vertical_divider_full = {}
							
							### INFO
							flowcontainer = {
								direction = vertical
								spacing = 4
								margin_bottom = 12
								margin_left = 2
								
								### NAME + ICONS
								widget = {
									parentanchor = hcenter
									size = { 340 35 }
									scissor = yes
									
									background = {
										using = default_header_bg
										using = frame_small_mask_top
									}
									
									textbox = {
										raw_text = "[Character.GetCountry.GetFlagTextIcon] #BOLD  [Character.GetFullNameNoFormatting]#!"
										size = { 100% 100% }
										elide = right
										align = nobaseline
										using = fontsize_large
										margin = { 10 0 }
										parentanchor = vcenter
									}
									
									icon = {
										size = { 30 30 }
										position = { -5 0 }
										parentanchor = right|vcenter
										texture = "gfx/interface/icons/character_role_icons/ruler.dds"
										visible = "[Character.IsRuler]"
										tooltip = "RULER_OF_COUNTRY"
									}
									icon = {
										size = { 30 30 }
										position = { -5 0 }
										parentanchor = right|vcenter
										texture = "gfx/interface/icons/character_role_icons/heir.dds"
										visible = "[Character.IsHeir]"
										tooltip = "HEIR_OF_COUNTRY"								
									}
								}
								
								### PORTRAIT
								character_portrait_large_torso = {
									parentanchor = hcenter
									blockoverride "show_hat" {}
									blockoverride "portrait_icons" {}
									blockoverride "portrait_button" {}
									blockoverride "tooltip_button_visibility" {
										visible = no
									}
									blockoverride "portrait_size" {
										size = { 85% 85% }
									}
								}

								widget = {
									parentanchor = hcenter
									size = { 320 40 }

									# IG
									flowcontainer = {
										name = "tutorial_highlight_recruit_commander_rank"
										parentanchor = left|vcenter
										margin_left = 5
										spacing = 5
										
										### RANK
										icon = {
											size = { 35 35 }
											parentanchor = left|vcenter
											texture = "[Character.GetCommanderRank.GetTexture]"
											datacontext = "[Character.GetCommanderRank]"
											tooltipwidget = {
												FancyTooltip_CommanderRank = {}
											}
										}
										
										textbox = {
											text = "COMMANDER_RANK_LOC_KEY"
											autoresize = yes
											
											tooltipwidget = {
												FancyTooltip_IG = {
													datacontext = "[Character.AccessInterestGroup]"
												}
											}
											
											parentanchor = left|vcenter
											align = left|nobaseline
										}
									}

									# IG
									flowcontainer = {
										name = "tutorial_highlight_recruit_commander_interest_group"
										parentanchor = right|vcenter
										margin_right = 10
										#visible = "[Not(Character.IsHeir)]"
										datacontext = "[Character.AccessInterestGroup]"
										spacing = 5
										
										character_ig_icon = {
											size = { 30 30 }

											blockoverride "tooltip" {
												tooltipwidget = {
													FancyTooltip_IG = {}
												}
											}
										}
										
										textbox = {
											raw_text = "#bold [InterestGroup.GetNameNoIcon]#!"
											autoresize = yes
											
											tooltipwidget = {
												FancyTooltip_IG = {}
											}
											
											parentanchor = left|vcenter
											align = left|nobaseline
										}
									}
								}

								divider_clean = {
									parentanchor = hcenter
									size = { 310 1 }
								}
								
								# traits + ideology
								container = {
									parentanchor = hcenter
									minimumsize = { 320 110 }

									dynamicgridbox = {
										datamodel = "[Character.AccessTraits]"
										maxhorizontalslots = 3
										datamodel_wrap = 2
										flipdirection = yes
										parentanchor = hcenter
										position = { 0 5 }

										item = {
											flowcontainer = {
												margin_right = 5
												margin_bottom = 5											
												container = {
													name = "tutorial_highlight_recruit_commander_trait"
													minimumsize = { 150 45 }
													maximumsize = { 150 45 }
													using = tooltip_above
													background = {
														using = entry_bg_simple
													}
													tooltipwidget = {
														FancyTooltip_CharacterTrait = {}
													}

													flowcontainer = {
														parentanchor = vcenter
														margin_left = 5
														icon = {
															size = { 25 35 }
															parentanchor = vcenter
															texture = "[CharacterTrait.GetTexture]"
														}
														textbox = {
															text = "[CharacterTrait.GetNameNoFormatting]"
															margin_left = 5
															margin_right = 10
															maximumsize = { 125 35 }
															elide = right
															autoresize = yes
															parentanchor = vcenter
															align = left|nobaseline
															multiline = yes
															using = fontsize_small
														}
													}
												}	
											}
										}
									}
								}

								# SPECIAL ORDERS
								flowcontainer = {
									visible = yes 
									parentanchor = hcenter
									direction = vertical
									spacing = 5
									margin_bottom = 10

									# HAS SPECIAL ORDERS
									textbox = {
										visible = "[Not(IsDataModelEmpty(Character.AccessPossibleSpecialOrders))]"
										parentanchor = hcenter
										autoresize = yes
										multiline = yes
										align = nobaseline
										text = "RECRUIT_COMMANDER_SPECIAL_ORDERS_TITLE"
									}

									# NO SPECIAL ORDERS
									textbox = {
										visible = "[IsDataModelEmpty(Character.AccessPossibleSpecialOrders)]"
										parentanchor = hcenter
										autoresize = yes
										multiline = yes
										align = nobaseline
										text = "NO_SPECIAL_ORDERS_TITLE"
										minimumsize = { -1 73 }
										alpha = "[TransparentIfTrue('(bool)yes')]"
									}

									# SPECIAL ORDERS LIST
									dynamicgridbox = {
										parentanchor = hcenter
										visible = "[Not(IsDataModelEmpty(Character.AccessPossibleSpecialOrders))]"
										datamodel = "[Character.AccessPossibleSpecialOrders]"
										flipdirection = yes
										datamodel_wrap = 2
										minimumsize = { 310 -1 }

										item = {
											flowcontainer = {
												margin_right = 5
												flowcontainer = {
													minimumsize = { 150 45 }
													maximumsize = { 150 45 }
													margin_left = 5
													spacing = 5
													tooltipwidget = {
														FancyTooltip_CommanderOrderType = {
															blockoverride "text_before" {
																visible = "[Or(Or(ObjectsEqual(Character.GetOrderType.Self, CommanderOrderType.Self), ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)), Not(StringIsEmpty(GetDesc( Character.SelectOrder( CommanderOrderType.Self )))))]"
																text =  "NEXT_OR_CURRENT_ORDER"
																margin_bottom = 15
															}
														}
													}

													background = {
														using = entry_bg_simple
													}

													icon = {
														parentanchor = vcenter
														size = { 35 35 }
														texture = "gfx/interface/icons/commander_order_icons/advance.dds"
													}

													textbox = {
														parentanchor = vcenter
														text = "[CommanderOrderType.GetName]"
														autoresize = yes
														multiline = yes
														align = nobaseline
														using = fontsize_small
														fontsize_min = 12
														elide = right
														maximumsize = { 100 35 }
													}
												}
											}
										}
									}
								}
								

								### ORDERS
								dynamicgridbox = {
									visible = no
									datamodel = "[Character.AccessOrders]"
									flipdirection = yes
									datamodel_wrap = 2
									parentanchor = hcenter
									item = {
										flowcontainer = {
											spacing = 10
											tooltipwidget = {
												FancyTooltip_CommanderOrderType = {
													blockoverride "text_before" {
														visible = "[Or(Or(ObjectsEqual(Character.GetOrderType.Self, CommanderOrderType.Self), ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)), Not(StringIsEmpty(GetDesc( Character.SelectOrder( CommanderOrderType.Self )))))]"
														text =  "NEXT_OR_CURRENT_ORDER"
														margin_bottom = 15
													}
												}
											}
											icon = {
												size = { 30 30 }
												texture = "[CommanderOrderType.GetTexture]"
											}
											textbox = {
												autoresize = yes
												align = nobaseline
												text = "[CommanderOrderType.GetName]"
												parentanchor = vcenter
												maximumsize = { 120 -1 }
												elide = right
											}
										}
									}
								}	
								### RECRUIT BUTTON
								button = {
									name = "tutorial_highlight_recruit_commander_recruit_button"
									parentanchor = hcenter
									using = default_button_action
									size = { 325 45 }
									text = "RECRUIT_CHARACTER_BUTTON"
									enabled = "[IsValid(Character.GetRecruitCommand( PopupManager.GetRecruitFormation ))]"
									tooltip = "COMMANDER_RECRUIT_BUTTON_TOOLTIP"
									onclick = "[Character.RecruitCharacter( PopupManager.GetRecruitFormation )]"
									block "sound" {
										using = commander_recruit_button_sound
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
