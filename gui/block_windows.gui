# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

template sidebar_margin {
	margin_left = "[GetDefine('NGUI', 'LENS_TOOLBAR_MARGIN_LEFT')]"
}
template sidepanel_plus_sidebar_size {
	size = { 613 0 } #@panel_width_plus_20 plus sidebar_margin
}

template sidepanel_filler_bg {
	widget = {
		size = { 50 100% }
		parentanchor = right
		alwaystransparent = yes
		position = { 20 0 }
		
		background = {
			texture = "gfx/interface/backgrounds/sidepanel_shadow.dds"
			size = { 100% 100% }
			spriteType = CorneredTiled
			spriteborder_left = 100
			texture_density = 2
			alwaystransparent = yes
			margin_top = 100
		}
	}

	widget = {
		size = { 100% 100% }
		using = clickthrough_blocker
		
		background = {
			texture = "gfx/interface/backgrounds/sidepanel_filler.dds"
			spriteType = CorneredTiled
			spriteborder = { 0 0 }
			spriteborder_right = 80
			margin_top = 100
			using = clickthrough_blocker
			
			modify_texture = {
				texture = "gfx/interface/backgrounds/default_bg_shading.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}

			modify_texture = {
				using = texture_velvet
			}
			modify_texture = {
				using = fancy_pattern_2
			}
		}
	}
}

# should use this for all vfx after the refactor
types vfx_types {
	type vfx = widget {
		size = { 100% 100% }
		allow_outside = yes
		
		cameracontrolwidget = {

			alwaystransparent = yes
			ignore_in_debug_draw = yes
			gfxtype = jomini_entitygfx
		
			block "parent_anchor" {}
			block "position" {}
			block "size" {
				size = { 100% 100% }
			}
			
			block "camera_position" {}
			block "entity_instance" {}
			block "alpha" {}
			block "visible" {}
		}
	}
}

types windows {
	type default_popup = window {
		parentanchor = center
		movable = yes
		layer = popups
		allow_outside = yes
		
		block "behind_window" {}

		widget = {
			size = { 100% 100% }

			background = {
				texture = "gfx/interface/backgrounds/popup_bg.dds"
				spriteType = Corneredstretched
				spriteborder = { 90 90 }
				texture_density = 2
				
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					using = texture_velvet
				}
			}
		}
		
		block "sound" {
			state = {
				name = sound
				trigger_on_create = yes
				start_sound = {
					using = ui_sfx_global_popup
				}
			}
		}

		### HEADER
		block "header" {
			widget = {
				size = { 100% 82 }
			
				popup_top_header = {}

				textbox = {
					block "first_line_position" {
						position = { 0 24 }
					}
					size = { 75% 40 }
					block "window_header_name" {
						text = ""
					}
					elide = right
					fontsize_min = 14
					parentanchor = hcenter
					align = center|nobaseline
					using = header_font
					using = header_font_size
					default_format = "#header"
				}

				block "second_line" {}
			}
		}
		
		### FRAME
		popup_bg_frame = {}
		
		### BACK
		container = {
			position = { 3 10 }
			block "header_back_button_visibility" {
				visible = no
			}
			
			icon = {
				size = { 53 53 }
				texture = "gfx/interface/backgrounds/round_button_bg.dds"
			}
			back_button_large = {
				block "header_back_button" {}
				parentanchor = center
			}
		}
		
		### CLOSE
		container = {
			parentanchor = right
			position = { -3 10 }
			block "header_close_button_visibility" {
				visible = no
			}
			
			icon = {
				size = { 53 53 }
				texture = "gfx/interface/backgrounds/round_button_bg.dds"
			}
			block "minimize" { 
				close_button_large = {
					block "header_close_button" {
						onclick = "[InformationPanelBar.ClosePanel]"
					}
					parentanchor = center
					shortcut = "close_window"
				}
			}
		}

		widget = {
			block "goto_visibility" {
				visible = no
			}
			size = { 30 30 }
			position = { -48 16 }
			parentanchor = right

			button_icon_zoom = {
				size = { 100% 100% }
				block "goto_properties" {}
			}
		}

		### CONTENT
		block "content" {
			flowcontainer = {
				direction = vertical
				resizeparent = yes
				block "side_margins" {
					margin = { 50 0 }
				}

				block "bottom_margin" {
					margin_bottom = 30
				}

				block "top_margin" {
					margin_top = 100
				}
				
				block "window_header" {}
				
				block "entire_scrollarea" {
					scrollarea = {
						using = default_list_position
						layoutpolicy_vertical = preferred
						layoutpolicy_horizontal = preferred
						maximumsize = { -1 800 }

						scrollbarpolicy_horizontal = always_off

						block "scrollarea_backgrounds" {
						}
						
						scrollbar_vertical = {
							using = vertical_scrollbar		
						}

						scrollwidget = {
							block "scrollarea_content" {
								widget = {
									size = { @panel_width_plus_20 1000 }
									background = {
										using = default_background
									} 
								}
							}
						}
					}
				}

				block "fixed_bottom" {
				}
			}
		}
	}

	type default_popup_two_lines = default_popup {
		blockoverride "first_line_position" {
			position = { 0 14 }
		}
		
		blockoverride "second_line" {
			textbox = {
				block "second_text" {
					raw_text = "Second text"
				}
				position = { 0 49 }
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline
			}
		}
	}

	### DEFAULT WINDOW
	type default_block_window = widget {
		using = sidepanel_plus_sidebar_size
		layoutpolicy_vertical = expanding
		alwaystransparent = no
		allow_outside = yes

		block "animation_state_block" {}

		state = {
			name = _show
			on_start = "[PdxGuiWidget.FindChild('content_container').InterruptThenTriggerAnimation('hide','show')]"
			start_sound = {
				soundeffect = "snapshot:/Dynamic/mute_world_3D_60"
			}
		}

		state = {
			name = _hide
			on_start = "[PdxGuiWidget.FindChild('content_container').InterruptThenTriggerAnimation('show','hide')]"
		}
		
		using = sidepanel_filler_bg

		vbox = {
			using = sidebar_margin
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding

			vbox = {
				using = clickthrough_blocker
				
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = preferred

				background = {
					using = default_bg
					margin_top = -84
				}
				
				background = {
					spriteType = Corneredtiled
					spriteborder = { 10 0 }
					margin = { 3 0 }
					margin_top = -84
					shaderfile = "gfx/FX/pdxgui_default.shader"
					texture = "gfx/interface/backgrounds/side_frame.dds"
					texture_density = 2
					
					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
						alpha = 1
					}
				}

				### HEADER
				block "window_header" {
					widget = {
						size = { @panel_width_plus_20 102 }
						layoutpolicy_horizontal = preferred

						### BG
						widget = {
							size = { @panel_width_plus_30 106 }
							position = { 0 -4 }
							parentanchor = hcenter
							
							using = sidepanel_top_header
						}
						
						### TEXT
						block "header_texts" {
							textbox = {
								using = header_font_fancy
								using = header_font_fancy_size

								block "window_header_name" {
									raw_text = "Default Window Name"
								}
								
								parentanchor = center
								align = hcenter|nobaseline
								
								autoresize = yes
								maximumsize = { 395 70 }
								multiline = yes
								fontsize_min = 17
								
								default_format = "#header"
							}
						}
						
						block "entire_back_button" {
							back_button_large = {
								position = { 8 30 }
								block "header_back_button" {
									onclick = "[InformationPanelBar.OpenPreviousPanel]"
									onclick = "[GetVariableSystem.Clear('international_open')]" 
									onclick = "[GetVariableSystem.Clear('un_panel')]" 
									onclick = "[GetVariableSystem.Clear('banks_panel')]" 
									onclick = "[GetVariableSystem.Clear('nato_panel')]" 
									onclick = "[GetVariableSystem.Clear('warsaw_pact_panel')]" 
									input_action = "back"
								}
							}
						}
						
						close_button_large = {
							position = { -8 30 }
							parentanchor = right
							block "header_close_button" {
								onclick = "[InformationPanelBar.ClosePanel]"
								onclick = "[GetVariableSystem.Clear('international_open')]" 
								onclick = "[GetVariableSystem.Clear('un_panel')]" 
								onclick = "[GetVariableSystem.Clear('banks_panel')]" 
								onclick = "[GetVariableSystem.Clear('nato_panel')]" 
								onclick = "[GetVariableSystem.Clear('warsaw_pact_panel')]" 
							}
							shortcut = "close_window"
						}

						widget = {
							block "pin_visibility" {
								visible = no
							}
							size = { 30 30 }
							position = { -48 59 }
							parentanchor = right

							button_icon_pin = {
								size = { 100% 100% }
								block "pin_properties" {}
							}
							button_icon_unpin = {
								size = { 100% 100% }
								block "unpin_properties" {}
							}
						}

						widget = {
							block "goto_visibility" {
								visible = no
							}
							size = { 30 30 }
							position = { -48 16 }
							parentanchor = right

							button_icon_zoom = {
								size = { 100% 100% }
								block "goto_properties" {}
							}
						}
					}
				}

				block "fixed_top" {
				}
				
				block "entire_scrollarea" {
					scrollarea = {
						layoutpolicy_vertical = preferred
						layoutpolicy_horizontal = preferred

						scrollbarpolicy_horizontal = always_off

						block "scrollarea_backgrounds" {
						}
						
						scrollbar_vertical = {
							using = vertical_scrollbar		
						}

						scrollwidget = {
							block "scrollarea_content_vbox" {
								container = {
									name = "content_container"
									parentanchor = hcenter
									
									state = {
										name = show
										duration = 0.2
										alpha = 1
										using = Animation_Curve_Default
									}
									state = {
										name = hide
										duration = 0
										alpha = 0
									}
									
									block "scrollarea_content" {
										widget = {
											size = { 480 1000 }
											background = {
												using = default_background
											} 
										}
									}
								}
							}
						}
					}
				}

				block "fixed_bottom" {}

				block "bottom_spacing" {
					widget = {
						size = { 10 10 }
					}
				}
			}
		}
	}

	### INTERNATIONAL ORG WINDOW
	type international_org_window = widget {
		using = sidepanel_plus_sidebar_size
		layoutpolicy_vertical = expanding
		alwaystransparent = no
		allow_outside = yes

		block "animation_state_block" {}

		state = {
			name = _show
			on_start = "[PdxGuiWidget.FindChild('content_container').InterruptThenTriggerAnimation('hide','show')]"
			start_sound = {
				soundeffect = "snapshot:/Dynamic/mute_world_3D_60"
			}
		}

		state = {
			name = _hide
			on_start = "[PdxGuiWidget.FindChild('content_container').InterruptThenTriggerAnimation('show','hide')]"
		}
		
		using = sidepanel_filler_bg

		vbox = {
			using = sidebar_margin
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding

			vbox = {
				using = clickthrough_blocker
				
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = preferred

				background = {
					using = dropdown_background
					margin_top = -84
				}
				
				background = {
					spriteType = Corneredtiled
					spriteborder = { 10 0 }
					margin = { 3 0 }
					margin_top = 90
					shaderfile = "gfx/FX/pdxgui_default.shader"
					texture = "gfx/interface/backgrounds/side_frame.dds"
					texture_density = 2
					
					modify_texture = {
						texture = "gfx/interface/backgrounds/default_bg_shading.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
						alpha = 1
					}
				}

				### HEADER
				block "window_header" {
					widget = {
						size = { @panel_width 102 }
						layoutpolicy_horizontal = preferred

						### BG
						widget = {
							size = { 1500 106 }
							position = { 0 -4 }
							parentanchor = hcenter
						}
						
						### TEXT
						block "header_texts" {
							textbox = {
								using = header_font_fancy
								using = header_font_fancy_size

								block "window_header_name" {
									raw_text = "Default Window Name"
								}
								
								parentanchor = center
								align = hcenter|nobaseline
								
								autoresize = yes
								maximumsize = { 395 70 }
								multiline = yes
								fontsize_min = 17
								
								default_format = "#header"
							}
						}
					}
				}

				block "fixed_top" {
				}
				
				block "entire_scrollarea" {
					scrollarea = {
						layoutpolicy_vertical = preferred
						layoutpolicy_horizontal = preferred

						scrollbarpolicy_horizontal = always_off

						block "scrollarea_backgrounds" {
						}
						
						scrollbar_vertical = {
							using = vertical_scrollbar		
						}

						scrollwidget = {
							block "scrollarea_content_vbox" {
								container = {
									name = "content_container"
									parentanchor = hcenter
									
									state = {
										name = show
										duration = 0.2
										alpha = 1
										using = Animation_Curve_Default
									}
									state = {
										name = hide
										duration = 0
										alpha = 0
									}
									
									block "scrollarea_content" {
										widget = {
											size = { 480 1000 }
											background = {
												using = dropdown_background
											} 
										}
									}
								}
							}
						}
					}
				}

				block "fixed_bottom" {}

				block "bottom_spacing" {
					widget = {
						size = { 10 10 }
					}
				}
			}
		}
	}

	### DEFAULT WINDOW VBOX
	type default_block_window_vbox = default_block_window {

		blockoverride "scrollarea_content_vbox" {

			vbox = {
				name = "content_container"
				layoutpolicy_vertical = expanding
				layoutpolicy_horizontal = expanding

				state = {
					name = show
					duration = 0.2
					alpha = 1
					using = Animation_Curve_Default
				}
				state = {
					name = hide
					duration = 0
					alpha = 0
				}

				block "scrollarea_content_vbox" {}
			}
		}
	}
	
	type fixed_bottom_spacer = widget {
		size = { 10 10 }
	}

	### DEFAULT WINDOW TWO LINES
	type default_block_window_two_lines = default_block_window {
		blockoverride "header_texts" {
			textbox = {
				position = { 0 26 }
				parentanchor = top|hcenter
				
				using = header_font_fancy
				using = header_font_fancy_size

				block "window_header_name" {
					raw_text = "Default Window Name"
				}
				
				align = center|nobaseline
				size = { 395 30 }
				fontsize_min = 17
				elide = right
				
				default_format = "#header"
			}
			
			container = {
				position = { 0 64 }
				parentanchor = top|hcenter

				block "highlight_name" {}
				
				flowcontainer = {
					spacing = 5
					
					textbox = {
						using = fontsize_large
						autoresize = yes
						max_width = 395
						fontsize_min = 14
						elide = right
						align = center|nobaseline
						parentanchor = vcenter

						block "window_header_name_line_two" {
							raw_text = "Default Window Line Two"
						}
					}
					
					block "goto_button" {}
				}
			}
		}
	}
	
	### FULLSCREEN WINDOW
	type fullscreen_block_window = widget {
		size = { 100% 100% }
		using = clickthrough_blocker
		
		block "animation_state_block" {}

		state = {
			name = _show
			alpha = 1
			duration = 0
			start_sound = {
				soundeffect = "snapshot:/Dynamic/mute_world_80"
			}
		}
		state = {
			name = _hide
			alpha = 0
			duration = 0.2
			using = Animation_Curve_Default
		}
		
		background = {
			using = default_bg
			margin = { 40 40 }
		}
		
		### HEADER BG
		fullscreen_top_header = {}
		
		#left dark fade
		widget = {
			size = { 50 100% }
			parentanchor = left
			
			background = {
				using = dark_area
				alpha = 0.5
				mirror = horizontal
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_left_full.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
		}
		
		#right dark fade
		widget = {
			size = { 50 100% }
			parentanchor = right
			
			background = {
				using = dark_area
				alpha = 0.5
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_left_full.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = alphamultiply
				}
			}
		}
		
		### TOP FILLER
		widget = {
			size = { 100% 78 }
			
			background = {
				texture = "gfx/interface/main_hud/topbar_bg.dds"
				shaderfile = "gfx/FX/pdxgui_default.shader"
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				spriteborder_right = 100
				margin_right = 100
				texture_density = 2
				using = hud_elements_alpha
				
				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0.5
				}
				modify_texture = {
					using = texture_velvet
				}
				modify_texture = {
					using = fancy_pattern
				}
			}
			icon = {
				texture = "gfx/interface/main_hud/topbar_bg_border.dds"
				position = { 0 -3 }
				size = { 100% 2 }
				spriteType = Corneredtiled
				spriteborder = { 0 0 }
				texture_density = 2
				parentanchor = bottom
				alpha = 0.06
			}
		}

		### CONTENT
		vbox = {
			using = clickthrough_blocker
			margin_top = 100
			margin_right = 45
			margin_left = 50
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = preferred

			### header text / back / close
			widget = {
				size = { 0 70 }
				layoutpolicy_horizontal = expanding
				
				hbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding
					margin = { 250 0 }
					margin_bottom = 8
					
					textbox = {
						size = { 0 50 }
						layoutpolicy_horizontal = expanding
						fontsize_min = 14
						using = header_font_fancy
						using = header_font_fancy_size

						block "window_header_name" {
							raw_text = "Default Window Name"
						}
						
						default_format = "#header"
						align = center|nobaseline
					}
				}
				
				block "back_button_fullscreen" {
					back_button_large = {
						position = { 11 15 }
						parentanchor = top|left
						onclick = "[InformationPanelBar.OpenPreviousPanel]"
						onclick = "[GetVariableSystem.Clear('international_open')]" 
						onclick = "[GetVariableSystem.Clear('un_panel')]" 
						onclick = "[GetVariableSystem.Clear('banks_panel')]" 
						onclick = "[GetVariableSystem.Clear('nato_panel')]" 
						onclick = "[GetVariableSystem.Clear('warsaw_pact_panel')]" 
						input_action = "back"
					}
				}
				
				close_button_large = {
					name = "tutorial_highlight_close_button"
					position = { -11 15 }
					parentanchor = top|right
					onclick = "[InformationPanelBar.ClosePanel]"
					onclick = "[GetVariableSystem.Clear('international_open')]" 
					onclick = "[GetVariableSystem.Clear('un_panel')]" 
					onclick = "[GetVariableSystem.Clear('banks_panel')]" 
					onclick = "[GetVariableSystem.Clear('nato_panel')]" 
					onclick = "[GetVariableSystem.Clear('warsaw_pact_panel')]" 
					shortcut = "close_window"
				}		
			}
			
			block "fixed_top" {}

			block "entire_content_area" {
				fullscreen_scrollarea = {}
			}
			
			block "fixed_bottom" {}
		}
	}
	
	### scroll area for fullscreens
	type fullscreen_scrollarea = scrollarea {
		block "scrollarea_size" {
			layoutpolicy_vertical = expanding
			block "scrollarea_width" {
				layoutpolicy_horizontal = expanding
			}
		}

		scrollbarpolicy_horizontal = always_off
		
		scrollbar_vertical = {
			using = vertical_scrollbar		
		}

		scrollwidget = {
			block "scrollarea_content" {
				widget = {
					size = { 1 1 }
				}
			}
		}
	}
}

template fullscreen_show {
	visible = "[Or(Or(InformationPanelBar.IsPanelOpen('politics'), InformationPanelBar.IsPanelOpen('politics_panel_change_law')), InformationPanelBar.IsPanelOpen('tech_tree'))]"
}
template fullscreen_hide {
	visible = "[Not(Or(Or(InformationPanelBar.IsPanelOpen('politics'), InformationPanelBar.IsPanelOpen('politics_panel_change_law')), InformationPanelBar.IsPanelOpen('tech_tree')))]"
}
