### SEA NODES MARKER
widget = {
	name = "sea_node_marker"
	datacontext = "[SeaNodeMarker]"
	layer = layer_map_markers
	datacontext = "[GetPlayer]"
	allow_outside = yes

	container = {
		parentanchor = center

		### network interaction
		button = {
			alwaystransparent = yes
			size = { 250% 250%% }
			alpha = 0.8
			texture ="gfx/interface/map_markers/round_highlight_orange.dds"
			visible = "[And(SeaNodeMarker.IsValidInteractionNode ,SeaNodeMarker.IsActiveInteractionNode)]"
			onclick = "[SeaNodeMarker.SelectInteractionClick]"
			parentanchor = center
			position = { 0 0 }
		}
		### network interaction
		button = {
			alwaystransparent = yes
			size = { 250% 250%% }
			alpha = 0.8
			texture ="gfx/interface/map_markers/round_highlight_green.dds"
			visible = "[And(SeaNodeMarker.IsValidInteractionNode ,Not(SeaNodeMarker.IsActiveInteractionNode))]"
			onclick = "[SeaNodeMarker.SelectInteractionClick]"
			parentanchor = center
			position = { 0 0 }
		}
		#convoy raiding
		icon = {
			visible = "[SeaNodeMarker.HasAnyShippingLaneDamaged( GetPlayer )]"
			size = { 180% 180% }
			texture = "gfx/interface/map_markers/convoy_raiding_highlight.dds"
			alwaystransparent = yes
			parentanchor = center
		}

		#highlight
		icon = {
			visible = "[SeaNodeMarker.IsSeaNodeHighlighted]"
			size = { 120% 120% }
			texture = "gfx/interface/map_markers/round_highlight.dds"
			alwaystransparent = yes
			parentanchor = center
		}

		### ZOOM FAR
		container = {
			visible = "[IsZoomLevelFar]"

			### no supply
			button = {
				visible = "[And(Not(SeaNodeMarker.ShouldShowInteraction), Not(SeaNodeMarker.HasActiveSupplyNetwork))]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node.dds"
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 12 12 }
				parentanchor = center
				alpha = 0.5
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}

			### no supply - in interaction
			button = {
				alwaystransparent = yes
				visible = "[And(SeaNodeMarker.ShouldShowInteraction, Not(SeaNodeMarker.HasActiveSupplyNetwork))]"
				onclick = "[SeaNodeMarker.SelectInteractionClick]"
				texture = "gfx/interface/map_markers/sea_node.dds"
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 12 12 }
				parentanchor = center
				alpha = 0.5
			}

			### has supply
			button = {
				onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				visible = "[And(Not(SeaNodeMarker.ShouldShowInteraction), SeaNodeMarker.HasActiveSupplyNetwork)]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node_have_supply.dds"
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				using = select_button_sound
				framesize = { 60 60 }
				size = { 15 15 }
				parentanchor = center
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}

			### has supply - in interaction
			button = {
				alwaystransparent = yes
				visible = "[And(SeaNodeMarker.ShouldShowInteraction, SeaNodeMarker.HasActiveSupplyNetwork)]"
				onclick = "[SeaNodeMarker.SelectInteractionClick]"
				texture = "gfx/interface/map_markers/sea_node_have_supply.dds"
				gfxtype = framedbuttongfx
				effectname = "NoHighlight"
				upframe = 1
				overframe = 2
				downframe = 3
				using = select_button_sound
				framesize = { 60 60 }
				size = { 15 15 }
				parentanchor = center
			}

			### selected / interface panel opened
			widget = {
				onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				size = { 100% 100% }
				icon = {
					visible = "[SeaNodeMarker.IsSelected]"
					size = { 25 25 }
					texture = "gfx/interface/main_hud/selected_arrow.dds"
					position = { 0 5 }
					parentanchor = hcenter
					alwaystransparent = yes
				}
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}
		}

		### ZOOM NEAR
		container = {
			visible = "[Not(IsZoomLevelFar)]"

			### no supply
			button = {
				visible = "[And(Not(SeaNodeMarker.ShouldShowInteraction), Not(SeaNodeMarker.HasActiveSupplyNetwork))]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node.dds"
				gfxtype = buttongfx
				effectname = "NoHighlight"
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 25 25 }
				parentanchor = center
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}

			### no supply - in interaction
			button = {
				alwaystransparent = yes
				visible = "[And(SeaNodeMarker.ShouldShowInteraction, Not(SeaNodeMarker.HasActiveSupplyNetwork))]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node.dds"
				gfxtype = buttongfx
				effectname = "NoHighlight"
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 25 25 }
				parentanchor = center
			}

			### has supply
			button = {
				onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				visible = "[And(Not(SeaNodeMarker.ShouldShowInteraction), SeaNodeMarker.HasActiveSupplyNetwork)]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node_have_supply.dds"
				gfxtype = buttongfx
				effectname = "NoHighlight"
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 30 30 }
				parentanchor = center
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}

			### has supply - in interaction
			button = {
				alwaystransparent = yes
				visible = "[And(SeaNodeMarker.ShouldShowInteraction, SeaNodeMarker.HasActiveSupplyNetwork)]"
				onclick = "[SeaNodeMarker.SelectClick]"
				texture = "gfx/interface/map_markers/sea_node_have_supply.dds"
				gfxtype = buttongfx
				effectname = "NoHighlight"
				using = default_button_animation
				using = select_button_sound
				framesize = { 60 60 }
				size = { 30 30 }
				parentanchor = center
			}

			### selected / interface panel opened
			widget = {
				onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				size = { 100% 100% }
				icon = {
					visible = "[SeaNodeMarker.IsSelected]"
					size = { 35 35 }
					texture = "gfx/interface/main_hud/selected_arrow.dds"
					position = { 0 15 }
					parentanchor = hcenter
					alwaystransparent = yes
				}
				using = tooltip_above
				tooltip = "[SeaNodeMarker.GetSupplyNetworkTooltip]"
			}
		}
	}
}

### MARKETS
container = {
	name = "market_marker"
	datacontext = "[MarketsMarker.GetAnyMarket]"
	layer = layer_map_markers
	onmousehierarchyenter = "[AccessHighlightManager.HighlightMarket(Market.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	parentanchor = bottom|hcenter

	icon = {
		texture = "gfx/interface/map_markers/market_frame_top.dds"
		size = { 105 32 }
		position = { 0 5 }
		parentanchor = top|hcenter
		visible = "[Or(ObjectsEqual(Market.GetOwner, GetPlayer.Self), Market.IsBeingHighlighted)]"
	}
	icon = {
		texture = "gfx/interface/map_markers/market_frame_bottom.dds"
		size = { 145 34 }
		parentanchor = bottom|hcenter
		visible = "[Market.IsBeingHighlighted]"
	}

	flowcontainer = {
		direction = vertical
		parentanchor = hcenter

		small_flag = {
			datacontext = "[Market.GetOwner]"
			parentanchor = hcenter
			visible = "[Or(ObjectsEqual(Market.GetOwner, GetPlayer.Self), Market.IsBeingHighlighted)]"
			blockoverride "onhover" {}
		}

		tiny_flag = {
			datacontext = "[Market.GetOwner]"
			parentanchor = hcenter
			visible = "[Not(Or(ObjectsEqual(Market.GetOwner, GetPlayer.Self), Market.IsBeingHighlighted))]"
			blockoverride "onhover" {}
		}
		button = {
			onclick = "[MarketsMarker.OpenMarketPanel]"
			onrightclick = "[RightClickMenuManager.ShowForMarket(Market.AccessSelf)]"
			visible = "[Or(ObjectsEqual(Market.GetOwner, GetPlayer.Self), Market.IsBeingHighlighted)]"
			using = default_button
			using = default_list_position

			flowcontainer = {
				resizeparent = yes
				margin = { 19 8 }
				margin_bottom = 9

				textbox = {
					raw_text = "#BOLD [Market.GetNameNoFormatting]#!"
					minimumsize = { 120 -1 }
					autoresize = yes
					align = center|nobaseline
					multiline = yes
					elide = right
				}
			}
		}
	}
}

flowcontainer = {
	name = "market_trade_route_marker"
	datacontext = "[MarketsMarker.GetAnyMarket]"
	layer = layer_map_markers
	direction = vertical
	onmousehierarchyenter = "[AccessHighlightManager.HighlightMarket(Market.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	parentanchor = bottom|hcenter

	dynamicgridbox = {
		datamodel = "[Market.AccessPlayerImportRoutes]"
		using = default_list_position
		visible = "[And(Not(ObjectsEqual(Market.GetOwner, GetPlayer.Self)), Not(MapListPanelManager.HasCurrentInteraction))]"

		item = {
			trade_route_map_marker_list_item = {}
		}
	}

	dynamicgridbox = {
		datamodel = "[Market.AccessPlayerExportRoutes]"
		using = default_list_position
		visible = "[And(Not(ObjectsEqual(Market.GetOwner, GetPlayer.Self)), Not(MapListPanelManager.HasCurrentInteraction))]"

		item = {
			trade_route_map_marker_list_item = {}
		}
	}
}

flowcontainer = {
	name = "potential_market_trade_route_marker"
	datacontext = "[MarketsMarker.GetAnyMarket]"
	layer = layer_map_markers
	direction = vertical
	parentanchor = bottom|hcenter

	textbox = {
		visible = "[GreaterThan_CFixedPoint( MarketsMarker.GetPotentialTradeRouteValueForCurrentInteraction, '(CFixedPoint)0')]"
		autoresize = yes
		text = "[MarketsMarker.GetPotentialTradeRouteValueForCurrentInteraction|v0]"
		margin = { 6 0 }
		align = nobaseline

		background = {
			using = text_edit_bg
		}

		background = {
			using = text_edit_bg
		}
	}
}

### INFRASTRUCTURE IN TRADE LENS
button = {
	name = "state_infra_marker"
	layer = layer_map_markers
	tooltip = "[StateInfraMarker.GetTooltip]"
	parentanchor = bottom|hcenter

	### ISOLATED
	background = {
		visible = "[Not(StateInfraMarker.IsConnectedMarker)]"
		texture = "gfx/interface/map_markers/state_to_state_infra.dds"
		spriteType = Corneredtiled
		spriteborder = { 20 20 }
		texture_density = 2
		shaderfile = "gfx/FX/pdxgui_default.shader"
		alpha = 0.85

		modify_texture = {
			texture = "gfx/interface/backgrounds/gradient_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0.8
		}
		modify_texture = {
			texture = "gfx/interface/textures/default_noise_texture.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	### IN MARKET
	background = {
		visible = "[StateInfraMarker.IsConnectedMarker]"
		texture = "gfx/interface/map_markers/state_to_state_infra_linked.dds"
		spriteType = Corneredtiled
		spriteborder = { 20 20 }
		texture_density = 2
		shaderfile = "gfx/FX/pdxgui_default.shader"
		alpha = 0.85

		modify_texture = {
			texture = "gfx/interface/backgrounds/gradient_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0.8
		}
		modify_texture = {
			texture = "gfx/interface/textures/default_noise_texture.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	flowcontainer = {
		resizeparent = yes
		margin = { 10 6 }

		### MARKET ACCESS WARNING
		textbox = {
			visible = "[And(And(StateInfraMarker.IsConnectedMarker, LessThan_CFixedPoint(StateInfraMarker.GetState.GetMarketAccess, '(CFixedPoint)1')), GreaterThan_CFixedPoint(StateInfraMarker.GetState.GetMarket.GetMarketSharePercentageFor( GetPlayer.Self ), '(CFixedPoint)0'))]"
			text = "MARKET_ACCESS_WARNING"
			autoresize = yes
			align = center|nobaseline
		}

		### ISOLATED MARKET
		textbox = {
			visible = "[Not(StateInfraMarker.IsConnectedMarker)]"
			text = "ISOLATED"
			autoresize = yes
			align = center|nobaseline
		}
	}
}


### INFRASTRUCTURE IN TRADE LENS
button = {
	name = "sea_infra_marker"
	layer = layer_map_markers
	tooltip = "[SeaRegionInfraMarker.GetTooltip]"
	parentanchor = bottom|hcenter

	### SEA REGION
	background = {
		texture = "gfx/interface/map_markers/state_to_state_infra_water.dds"
		spriteType = Corneredtiled
		spriteborder = { 20 20 }
		texture_density = 2
		shaderfile = "gfx/FX/pdxgui_default.shader"
		alpha = 0.85

		modify_texture = {
			texture = "gfx/interface/backgrounds/gradient_overlay.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0.8
		}
		modify_texture = {
			texture = "gfx/interface/textures/default_noise_texture.dds"
			spriteType = Corneredtiled
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	flowcontainer = {
		resizeparent = yes
		margin = { 10 6 }

		### SEA REGION
		textbox = {
			visible = "[And(LessThan_CFixedPoint(SeaRegionInfraMarker.GetStateRegion.GetSeaInfrastructure(GetPlayer), '(CFixedPoint)100'), GreaterThan_CFixedPoint(SeaRegionInfraMarker.GetStateRegion.GetSeaInfrastructure(GetPlayer), '(CFixedPoint)0'))]"
			text = "MARKET_ACCESS_WARNING_SEA"
			autoresize = yes
			align = center|nobaseline
		}
	}
}


### SITUATIONS
container = {
	name = "event_marker"
	datacontext = "[EventMarker.GetAnyEvent]"
	tooltip = "[Event.GetTooltip]"
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	button_icon_round_big = {
		visible = "[IsZoomLevelNear]"
		size = { 80 80 }
		onclick = "[PopupManager.OpenEvent(EventMarker.AccessAnyEvent)]"

		blockoverride "icon" {
			texture = "[Event.GetEventIcon]"
		}
		blockoverride "icon_size" {
			size = { 60 60 }
		}
	}

	button_icon_round_big = {
		visible = "[Not(IsZoomLevelNear)]"
		size = { 40 40 }
		onclick = "[PopupManager.OpenEvent(EventMarker.AccessAnyEvent)]"

		blockoverride "icon" {
			texture = "[Event.GetEventIcon]"
		}
		blockoverride "icon_size" {
			size = { 30 30 }
		}
	}

	icon = {
		visible = "[Or( Or(Event.HasCategory('enactment'), Event.HasCategory('revolution')), LessThanOrEqualTo_int32( Event.GetNumRemainingDays, '(int32)60'))]"
		using = highlighted_circle_selection_small
	}

	textbox = {
		text = "EVENT_REMAINING_DAYS"
		autoresize = yes
		parentanchor = hcenter|bottom
		position = { -4 -4 }
		align = left|nobaseline
		visible = "[IsZoomLevelNear]"

		background = {
			using = blurry_dark_background
			margin = { 10 10 }
		}
	}
}

### WAR GOAL
container = {
	name = "war_goal_marker"
	layer = layer_map_markers
	datacontext = "[WarGoalMarker.AccessWarGoal]"
	tooltip = "WARGOAL_ACTIVE_TOOLTIP"
	alwaystransparent = no
	onmousehierarchyenter = "[WarGoal.ShowHighlight]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

	background = {
		using = colored_panel_dark
		color = "[WarGoal.GetHolder.GetMapColor]"
	}

	wargoal_item = {
		visible = "[And(IsZoomLevelNear,WarGoal.GetWar.IsParticipant( GetMetaPlayer.GetPlayedOrObservedCountry.Self ))]"
	}

	widget = {
		size = { 44 44 }
		visible = "[And(Not(IsZoomLevelNear),WarGoal.GetWar.IsParticipant( GetMetaPlayer.GetPlayedOrObservedCountry.Self ))]"

		button = {
			enabled = "[WarGoal.IsValid]"
			onclick = "[Execute( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"
			visible = "[IsValid( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"
			using = default_button
			size = { 100% 100% }

			icon = {
				visible = no
				#todo add the below visible state instead when PRCAL-17690 is done:
	 			#visible = "[WarGoal.IsBeingHighlighted]"
	  			using = highlighted_square_selection
	  		}
		}

		icon = {
			size = { 40 40 }
			texture = "[WarGoal.GetTexture]"
			parentanchor = center
		}

		wargoal_checkmark = {
			blockoverride "position" {
				position = { 0 0 }
			}
			background = {
				using = blurry_dark_background
			}
		}
	}
}

### STRATEGIC REGION
container = {
	name = "strategic_region_marker"
	ignoreinvisible = yes
	onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(StrategicRegionMarker.GetStrategicRegion)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	using = clickthrough_blocker
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	### BACKGROUND (HAS INTEREST)
	widget = {
		size = { 100% 100% }
		datacontext = "[StrategicRegionMarker.GetStrategicRegion]"
		visible = "[GetPlayer.HasInterestIn( StrategicRegion.Self )]"

		background = {
			using = paper_bg
		}
	}

	### BACKGROUND (NO INTEREST)
	widget = {
		size = { 100% 100% }
		datacontext = "[StrategicRegionMarker.GetStrategicRegion]"
		visible = "[Not(GetPlayer.HasInterestIn( StrategicRegion.Self ))]"

		background = {
			using = default_background
		}
	}

	### CONTENT
	flowcontainer = {
		direction = vertical
		margin = { 7 7 }
		spacing = 7

		textbox = {
			multiline = yes
			datacontext = "[StrategicRegionMarker.GetStrategicRegion]"
			raw_text = "#BOLD [StrategicRegion.GetNameNoFormatting]#!"
			autoresize = yes
			align = hcenter|nobaseline
			parentanchor = top|hcenter
			margin = { 25 0 }
			visible = "[IsZoomLevelNear]"
			using = fontsize_large

			tooltipwidget = {
				FancyTooltip_StrategicRegion = {}
			}
		}

		### NATIONS WITH INTEREST MARKERS
		dynamicgridbox = {
			parentanchor = hcenter
			flipdirection = yes
			name = "interest_marker_box"
			datamodel = "[StrategicRegionMarker.GetStrategicRegion.GetInterests]"
			datamodel_wrap = 8
			visible = "[Not(IsDataModelEmpty(StrategicRegionMarker.GetStrategicRegion.GetInterests))]"

			item = {
				container = {
					tooltip = "INTEREST_MARKER_TOOLTIP"
					using = tooltip_above
					datacontext = "[StrategicRegionMarker.GetStrategicRegion]"

					### ZOOMED OUT
					widget = {
						visible = "[Not(IsZoomLevelNear)]"
						size = { 35 33 }

						tiny_flag = {
							position = { 0 -2 }
							visible = "[Not(Interest.IsActive)]"
							datacontext = "[Interest.GetOwner]"
							blockoverride "tooltip" {}
							parentanchor = center
							alpha = 0.3
						}
						tiny_flag = {
							position = { 0 -2 }
							visible = "[Interest.IsActive]"
							datacontext = "[Interest.GetOwner]"
							blockoverride "tooltip" {}
							parentanchor = center
						}

						widget = {
							size = { 25 4 }
							position = { 0 12 }
							visible = "[Interest.ShouldShowProgressBar]"
							parentanchor = center

							bad_progressbar_horizontal = {
								visible = "[Interest.IsActive]"
								size = { 100% 100% }
								blockoverride "values" {
									min = 0
									max = 1
									value = "[Interest.GetProgress]"
								}
							}

							default_progressbar_horizontal = {
								visible = "[Not(Interest.IsActive)]"
								size = { 100% 100% }
								blockoverride "values" {
									min = 0
									max = 1
									value = "[Interest.GetProgress]"
								}
							}
						}
					}

					### ZOOMED IN
					widget = {
						size = { 65 52 }
						visible = "[IsZoomLevelNear]"

						small_flag = {
							position = { 0 -5 }
							visible = "[Not(Interest.IsActive)]"
							datacontext = "[Interest.GetOwner]"
							blockoverride "tooltip" {}
							parentanchor = center
							alpha = 0.5
						}
						small_flag = {
							position = { 0 -5 }
							visible = "[Interest.IsActive]"
							datacontext = "[Interest.GetOwner]"
							blockoverride "tooltip" {}
							parentanchor = center
						}

						widget = {
							size = { 46 6 }
							position = { 0 18 }
							visible = "[Interest.ShouldShowProgressBar]"
							parentanchor = center

							bad_progressbar_horizontal = {
								visible = "[Interest.IsActive]"
								size = { 100% 100% }
								blockoverride "values" {
									min = 0
									max = 1
									value = "[Interest.GetProgress]"
								}
							}

							default_progressbar_horizontal = {
								visible = "[Not(Interest.IsActive)]"
								size = { 100% 100% }
								blockoverride "values" {
									min = 0
									max = 1
									value = "[Interest.GetProgress]"
								}
							}
						}
					}
				}
			}
		}

		### DIPLO PLAY
		flowcontainer = {
			using = default_list_position
			visible = "[StrategicRegionMarker.GetStrategicRegion.HasDiplomaticPlay]"
			margin_top = 5

			diplomatic_play_item = {
				visible = "[Not(StrategicRegionMarker.GetStrategicRegion.GetDiplomaticPlay.HasEscalatedIntoWar)]"
				datacontext = "[StrategicRegionMarker.AccessStrategicRegion.AccessDiplomaticPlay]"
			}

			war_item = {
				visible = "[StrategicRegionMarker.GetStrategicRegion.GetDiplomaticPlay.HasEscalatedIntoWar]"
				blockoverride "datacontext" {
					datacontext = "[StrategicRegionMarker.AccessStrategicRegion.AccessDiplomaticPlay.AccessWar]"
				}
			}
		}
	}
}

### DIPLOMATIC PLAY
container = {
	name = "diplomatic_play_marker"
	ignoreinvisible = yes
	onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(StrategicRegionMarker.GetStrategicRegion)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	using = clickthrough_blocker
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	button = {
		name = "diplo_play_item"
		onclick = "[InformationPanelBar.OpenDiplomaticPlayPanelTab( StrategicRegionMarker.AccessStrategicRegion.AccessDiplomaticPlay, 'default' )]"
		using = default_button

		### BOTTOM INFO
		flowcontainer = {
			datacontext = "[StrategicRegionMarker.AccessStrategicRegion.AccessDiplomaticPlay]"
			resizeparent = yes
			margin = { 5 10 }

			### progressbar + small phase images
			container = {
				parentanchor = vcenter
				widget = {
					size = { 30 30 }
					parentanchor = center
					animated_progresspie = {
						tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
						texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
						size = { 70 70 }
						framesize = { 492 492 }
						frame = 2
						value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
						parentanchor = center
					}
					animated_progresspie = {
						tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
						texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
						size = { 70 70 }
						framesize = { 492 492 }
						frame = 2
						value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
						parentanchor = center
					}
					animated_progresspie = {
						tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
						texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
						size = { 70 70 }
						framesize = { 492 492 }
						frame = 2
						value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
						parentanchor = center
					}
					### phase images
					icon = {
						texture = "gfx/interface/diplomatic_plays/phase_opening_moves_small.dds"
						size = { 56 56 }
						parentanchor = center
						visible = "[LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END'))]"
					}
					icon = {
						texture = "gfx/interface/diplomatic_plays/phase_diplomatic_maneuvers_small.dds"
						size = { 56 56 }
						parentanchor = center
						visible = "[And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START')))]"
					}
					icon = {
						texture = "gfx/interface/diplomatic_plays/phase_countdown_to_war_small.dds"
						size = { 56 56 }
						parentanchor = center
						visible = "[GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))]"
					}

					### frame on top
					icon = {
						tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
						texture = "gfx/interface/diplomatic_plays/escalation_progress_frame_small.dds"
						size = { 76 76 }
						parentanchor = center
					}
				}
			}

			widget = { size = { 30 30 }}

			### NATIONS INVOLVED
			flowcontainer = {
				direction = vertical
				spacing = 4
				parentanchor = vcenter

				### SUPPORTS
				flowcontainer = {
					spacing = 5

					icon = {
						size = { 20 20 }
						tooltip = "DIPLOMATIC_PLAY_SUPPORTS"
						texture = "/gfx/interface/icons/generic_icons/approval_icon.dds"
					}

					overlappingitembox = {
						datamodel = "[DiplomaticPlay.AccessInitiatorSideCountriesNoForcedSubjects]"
						maximumsize = { 225 20 }
						autoresize = yes

						item = {
							widget = {
								size = { 32 20 }

								tiny_flag_no_interact = {

								}
							}
						}
					}
				}

				### OPPOSES
				flowcontainer = {
					spacing = 5

					icon = {
						size = { 20 20 }
						tooltip = "DIPLOMATIC_PLAY_OPPOSES"
						texture = "/gfx/interface/icons/generic_icons/disapproval_icon.dds"
					}

					overlappingitembox = {
						datamodel = "[DiplomaticPlay.AccessTargetSideCountriesNoForcedSubjects]"
						maximumsize = { 225 20 }
						autoresize = yes

						item = {
							widget = {
								size = { 32 20 }

								tiny_flag_no_interact = {}
							}
						}
					}
				}
			}
		}
	}
}

### WARS
container = {
	name = "war_marker"
	ignoreinvisible = yes
	onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(StrategicRegionMarker.GetStrategicRegion)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	using = clickthrough_blocker
	layer = layer_map_markers
	parentanchor = bottom|hcenter
	datacontext = "[StrategicRegionMarker.AccessStrategicRegion.AccessDiplomaticPlay.AccessWar]"
			
	outliner_war_item = {}
}


### BUILDING PROGRESS (zoomed in)
container = {
	name = "construction_queue_marker"
	datacontext = "[BuildingMarker.AccessBuilding]"
	layer = layer_map_markers
	ignoreinvisible = yes
	onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	parentanchor = bottom|hcenter

	container = {
		button = {
			datacontext = "[Building.GetState]"
			onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			using = default_button
			visible = "[And(Building.GetState.IsBeingHighlighted, IsZoomLevelNear)]"

			flowcontainer = {
				margin = { 6 2 }
				resizeparent = yes
				spacing = 3
				icon = {
					size = { 23 23 }
					texture = "[Building.GetTexture]"
				}

				textbox = {
					text = "[Building.GetExpansionLevelDesc]"
					autoresize = yes
					parentanchor = vcenter
					align = nobaseline
					using = fontsize_small
					background = {
						using = blurry_dark_background
					}
				}
			}
		}
	}
}

container = {
	name = "construction_marker"
	datacontext = "[BuildingMarker.AccessBuilding]"
	layer = layer_map_markers
	ignoreinvisible = yes
	onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	parentanchor = bottom|hcenter

	button = {
		texture = "gfx/interface/map_markers/building_progress_button.dds"
		gfxtype = buttongfx
		effectname = "NoHighlight"
		framesize = { 204 168 }
		size = { 102 84 }
		parentanchor = hcenter
		position = { 0 7 }
		onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		visible = "[And(Building.IsCurrentlyUnderConstruction, IsZoomLevelNear)]"
	}

	button = {
		parentanchor = hcenter
		visible = "[Building.IsCurrentlyUnderConstruction]"
		onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
		onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		tooltip = "BUILDING_PROGRESS_TOOLTIP"

		flowcontainer = {
			alwaystransparent = yes
			resizeparent = yes
			direction =  vertical
			icon = {
				size = { 30 30 }
				visible = "[Not(IsZoomLevelNear)]"
				texture = "[Building.GetTexture]"
				parentanchor = hcenter
				onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			}
			icon = {
				size = { 60 60 }
				visible = "[IsZoomLevelNear]"
				texture = "[Building.GetTexture]"
				parentanchor = hcenter
				onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			}

			progressbar = {
				parentanchor = hcenter
				visible = "[IsZoomLevelNear]"
				progresstexture = "gfx/interface/map_markers/building_progress_bar.dds"
				noprogresstexture = "gfx/interface/map_markers/building_progress_bar_empty.dds"
				onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				direction = horizontal
				size = { 84 17 }
				value = "[Building.GetConstructionProgressPercentage]"
				min = 0
				max = 1

				textbox = {
					text = "BUILDING_MAP_MARKER_WEEKS_LEFT"
					autoresize = yes
					parentanchor = center
					align = right|nobaseline
					using = fontsize_small
				}
			}
		}

		default_progressbar_horizontal = {
			visible = "[Not(IsZoomLevelNear)]"
			size = { 24 2 }
			parentanchor = hcenter
			position = { 0 4 }

			blockoverride "values" {
				value = "[Building.GetConstructionProgressPercentage]"
				min = 0
				max = 1
			}
		}
	}

	textbox = {
			position = { 25 0 }
			minimumsize = { -1 22 }
			autoresize = yes
			margin_right = 5
			margin_left = 5
			align = left|nobaseline
			text = "[Building.GetExpansionLevelDesc]"
			using = fontsize_small
			visible = "[And(Building.IsCurrentlyUnderConstruction, IsZoomLevelNear)]"

			background = {
				using = dark_area
			}
		}
}

### CONSTRUCTION SUMMARY
button = {
	name = "construction_summary_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.AccessState]"
	datacontext = "[StateMarker.GetState.GetCountry]"
	parentanchor = bottom|hcenter
	onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"

	tooltip = "STATE_CONSTRUCTION_QUEUE_TOOLTIP"

	flowcontainer = {
		resizeparent = yes

		background = {
			using = default_background
		}

		textbox = {
			raw_text = "@construction! [State.GetCountry.GetNumBuildingsUnderConstructionInState(State.Self)|v]"
			autoresize = yes
			align = nobaseline
			margin = { 9 4 }
		}
	}
}

container = {
	name = "building_details_marker"
	datacontext = "[BuildingMarker.AccessBuilding]"
	layer = layer_map_markers
	ignoreinvisible = yes
	parentanchor = bottom|hcenter

	tooltipwidget = {
		FancyTooltip_Building = {}
	}

	icon = {
		size = { 50 50 }
		texture = "[Building.GetTexture]"

		textbox = {
			minimumsize = { -1 22 }
			autoresize = yes
			margin_right = 5
			margin_left = 5
			align = left|nobaseline
			text = "[Building.GetExpansionLevelDesc]"
			using = fontsize_small

			background = {
				using = dark_area
			}
		}
	}
}


### INPUT SHORTAGE MARKERS
button = {
	name = "input_shortage_marker"
	datacontext = "[BuildingMarker.AccessBuilding]"
	layer = layer_map_markers
	tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
	parentanchor = bottom|hcenter

	onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
	onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
	size = { 45 30 }

	icon = {
		position = { 15 0 }
		size = { 30 30 }
		texture = "[Building.GetTexture]"
	}

	icon = {
		parentanchor = vcenter
		size = { 25 25 }
		texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
	}
}

### EMPLOYMENT MARKERS
button = {
	name = "employment_marker"
	datacontext = "[BuildingMarker.AccessBuilding]"
	layer = layer_map_markers
	tooltip = "TOOLTIP_BUILDING_HIRING"
	parentanchor = bottom|hcenter

	onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
	onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"

	onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Building.GetState)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

	container = {
		resizeparent = yes
		flowcontainer = {
			visible = "[Not(Building.HasFailedHires)]"
			margin = { 5 5 }
			parentanchor = vcenter
			position = { 42 0 }
			container = {
				default_progressbar_horizontal = {
					size = { 40 4 }
					parentanchor = vcenter
					blockoverride "values" {
						value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
						min = 0
						max = 1
					}
				}
			}
		}

		icon = {
			position = { 15 0 }
			size = { 30 30 }
			texture = "[Building.GetTexture]"
		}

		icon = {
			parentanchor = vcenter
			visible = "[And(Building.ShouldShowAsUnableToHire,Not(Building.HasFailedHires))]"
			size = { 25 25 }
			texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
			tooltip = "NOT_HIRING"
		}
		
		icon = {
			parentanchor = vcenter
			visible = "[And(Building.ShouldShowAsUnableToHire,Building.HasFailedHires)]"
			size = { 25 25 }
			texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
			tooltip = "NOT_FULLY_EMPLOYED"
		}		
	}
}

# CITIES
container = {
	name = "city_marker"
	datacontext = "[CityMarker]"
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	### regular cities
	container = {
		visible = "[Not(CityMarker.IsCountryCapital)]"

		background = {
			using = colored_panel_dark
			color = "[CityMarker.GetCountry.GetMapColor]"
			margin = { 6 0 }
			alpha = 0.7
		}

		textbox = {
			text = "[CityMarker.GetCityName]"
			align = nobaseline
			autoresize = yes
			parentanchor = center
			margin = { 0 1 }
			using = fontsize_small
		}
	}

	### capital cities
	flowcontainer = {
		visible = "[CityMarker.IsCountryCapital]"
		parentanchor = center
		spacing = 4
		margin = { 4 2 }
		margin_left = 2

		background = {
			using = colored_panel_dark
			alpha = 0.5
		}

		background = {
			using = colored_panel
			color = "[CityMarker.GetCountry.GetMapColor]"
			alpha = 0.5
		}

		icon = {
			texture = "gfx/interface/icons/state_status_icons/state_capital_icon.dds"
			size = { 14 14 }
			parentanchor = vcenter
		}
		textbox = {
			parentanchor = vcenter
			raw_text = "#bold [CityMarker.GetCityName]#!"
			align = nobaseline
			autoresize = yes
			font = "PlayfairDisplay"
			fontsize = 14
			default_format = "#v"
		}

		tiny_flag = {
			datacontext = "[CityMarker.GetCountry]"
			parentanchor = vcenter
			size = { 24 16 }

			blockoverride "visibility" {
				visible = no
			}
		}
	}
}

### COLONY
container = {
	name = "colony_marker"
	using = small_nib
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	button = {
		datacontext = "[ColonyMarker.AccessState]"
		tooltip = "STATE_COLONY_TOOLTIP"
		size = { 97 26 }
		onclick = "[InformationPanelBar.OpenStatePanel(ColonyMarker.AccessState)]"
		using = default_button

		tiny_flag = {
			datacontext = "[State.GetOwner]"
			#size = { 31 26 }
			#texture = "[State.GetOwner.GetFlag.GetFlagTexture]"
			#frame = "[State.GetOwner.GetFlag.GetFlagFrame]"
			#framesize = "[GetFlagFrameSize]"
			parentanchor = left|vcenter
		}

		default_progressbar_horizontal = {
			size = { 62 15 }
			position = { 31 0 }
			parentanchor = vcenter
			blockoverride "values" {
				value = "[State.GetColonyProgressAsFloat]"
				min = 0
				max = 1
			}
		}

		textbox = {
			visible = "[And( Not(State.IsColonyProgressBlockedByInactiveInterest), GreaterThan_int32( State.GetColonyProgressAsDays, '(int32)-1'))]"
			text = "COLONY_MAP_MARKER_DAYS_LEFT"
			autoresize = yes
			position = { -7 0 }
			parentanchor = right|vcenter
			widgetanchor = right|vcenter
			align = right|nobaseline
			using = fontsize_xsmall
		}

		textbox = {
			visible = "[Or(State.IsColonyProgressBlockedByInactiveInterest, Not(GreaterThan_int32( State.GetColonyProgressAsDays, '(int32)-1')))]"
			text = "NO_PROGRESS"
			autoresize = yes
			position = { -7 0 }
			parentanchor = right|vcenter
			widgetanchor = right|vcenter
			align = right|nobaseline
			using = fontsize_xsmall
		}
	}
}

### PRODUCTION STATE (small)
flowcontainer = {
	name = "production_marker"
	layer = layer_map_markers
	datacontext = "[ProductionMarker.AccessState]"
	direction = vertical
	margin_bottom = 5
	parentanchor = bottom|hcenter

	flowcontainer = {
		direction = vertical
		tooltip = "STATE_PRODUCTION_MARKER_TOOLTIP"
		visible = "[Or(IsZoomLevelNear, And(Not(IsZoomLevelNear), ObjectsEqual(State.AccessSelf, State.AccessStateRegion.GetLargestStateInRegion)))]"

		background = {
			visible = "[IsZoomLevelNear]"
			using = default_background
			margin = { 11 6 }
		}

		flowcontainer = {
			visible = "[Not(IsDataModelEmpty(State.AccessStateRegion.AccessTraits))]"
			datamodel = "[State.AccessStateRegion.AccessTraits]"
			spacing = 2
			parentanchor = hcenter
			margin_top = 2

			item = {
				flowcontainer = {
					onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no
					tooltip = TOOLTIP_STATE_TRAIT
					icon = {
						size = { 36 36 }
						texture = "[StateTrait.GetTexture]"
						visible = "[Not(IsZoomLevelFar)]"
					}
					icon = {
						size = { 25 25 }
						texture = "[StateTrait.GetTexture]"
						visible = "[IsZoomLevelFar]"
					}
				}
			}
		}

		textbox = {
			visible = "[IsZoomLevelNear]"
			using = default_list_position
			text = "MAP_LIST_STATE_AVAILABLE_LABOR"
			tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
			autoresize = yes
			align = left|nobaseline
		}
	}

	widget = {
		size = { 3 3 }
		visible = "[IsZoomLevelNear]"
	}
	widget = {
		visible = "[IsZoomLevelNear]"
		using = default_list_position
		using = small_nib
	}
}

### BATTLE
container = {
	name = "battle_marker"
	using = clickthrough_blocker
	layer = layer_map_markers
	parentanchor = bottom|hcenter


	### ONGOING BATTLE
	container = {
		datacontext = "[BattleMarker.GetBattle]"
		visible = "[Or(Or(IsMapModeSelected( 'mm_military' ), IsMapModeSelected( 'mm_military_with_past_battles' )), Battle.IsRelevantForCountry( GetMetaPlayer.GetPlayedOrObservedCountry.Self ))]"

		onmousehierarchyenter = "[AccessHighlightManager.HighlightBattle(Battle.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		parentanchor = bottom|hcenter

		widget = {
			size = { 40 40 }
			parentanchor = bottom|hcenter

			icon = {
				size = { 50 50 }
				parentanchor = center
				visible = "[Battle.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/round_highlight.dds"
			}
		}

		button = {
			onclick = "[InformationPanelBar.OpenBattlePanel( BattleMarker.GetBattle.AccessSelf )]"
			size = { 100% 100% }
		}

		### BATTLE INFO SMALLER VERSION
		widget = {
			visible = "[Or(And(IsZoomLevelNear, Not(Battle.IsBeingHighlighted)), And(IsZoomLevelMid, Battle.IsBeingHighlighted))]"
			size = { 0 40 }

			state = {
				name = _show
				size = { 110 40 }
				duration = 0.2
				alpha = 1
				using = Animation_Curve_Default
			}
			state = {
				name = _hide
				size = { 0 40 }
				duration = 0.2
				alpha = 0
				using = Animation_Curve_Default
			}

			### attackers
			icon = {
				datacontext = "[Battle.AccessAttackerBattleParticipant]"
				using = colored_panel
				color = "[BattleParticipant.GetCountry.GetMilitaryInterfaceColor]"
				alwaystransparent = yes
				size = { 50% 25 }
				parentanchor = left|vcenter

				textbox = {
					position = { -23 0 }
					raw_text = "[Battle.GetCurrentAttackerUnits|0v]#!"
					autoresize = yes
					align = right|nobaseline
					parentanchor = right|vcenter
				}
			}

			### defenders
			icon = {
				datacontext = "[Battle.AccessDefenderBattleParticipant]"
				using = colored_panel
				color = "[BattleParticipant.GetCountry.GetMilitaryInterfaceColor]"
				alwaystransparent = yes
				size = { 50% 25 }
				parentanchor = right|vcenter

				textbox = {
					position = { 23 0 }
					raw_text = "[Battle.GetCurrentDefenderUnits|0v]#!"
					autoresize = yes
					align = left|nobaseline
					parentanchor = left|vcenter
				}
			}
		}

		### BATTLE INFO LARGER VERSION
		widget = {
			visible = "[And(IsZoomLevelNear, Battle.IsBeingHighlighted)]"
			size = { 0 40 }

			state = {
				name = _show
				size = { 230 40 }
				duration = 0.2
				alpha = 1
				using = Animation_Curve_Default
			}
			state = {
				name = _hide
				size = { 0 40 }
				duration = 0.2
				alpha = 0
				using = Animation_Curve_Default
			}

			### attackers
			widget = {
				size = { 50% 100% }
				parentanchor = left|vcenter
				datacontext = "[Battle.AccessAttackerBattleParticipant]"

				icon = {
					parentanchor = left|vcenter
					using = colored_panel
					datacontext = "[BattleParticipant.GetCountry]"
					color = "[Country.GetMilitaryInterfaceColor]"
					alwaystransparent = yes
					size = { 95 30 }

					tiny_flag = {
						parentanchor = left|vcenter
						position = { 5 0 }

						blockoverride "onhover" {}
						using = tooltip_ws
					}

					textbox = {
						raw_text = "[Battle.GetCurrentAttackerUnits|0v]#!"
						autoresize = yes
						align = right|nobaseline
						parentanchor = right|vcenter
						position = { -25 0 }
					}

					manpower_bar = {
						size = { 5 20 }
						position  = { -15 0 }
						parentanchor = right|vcenter

						blockoverride "manpower_values" {
							max = "[Battle.GetStartingAttackerManpower]"
							value = "[Battle.CalcCurrentAttackerManpower]"
						}

						blockoverride "manpower_tooltip" {
							tooltip = "BATTLE_MANPOWER_ATTACKER_TOOLTIP"
						}
					}

					white_progressbar_vertical = {
						size = { 5 20 }
						position  = { -5 0 }
						tooltip = "BATTLE_MORALE_TOOLTIP"
						parentanchor = right|vcenter

						blockoverride "values" {
							min = 0
							max = 1
							value = "[FixedPointToFloat( BattleParticipant.GetMorale )]"
						}
						blockoverride "color" {
							color = "[GetMoraleColorVec( BattleParticipant.GetMorale )]"
						}
					}
				}
			}

			### defenders
			widget = {
				size = { 50% 100% }
				parentanchor = right|vcenter
				datacontext = "[Battle.AccessDefenderBattleParticipant]"

				icon = {
					parentanchor = right|vcenter
					using = colored_panel
					datacontext = "[BattleParticipant.GetCountry]"
					color = "[Country.GetMilitaryInterfaceColor]"
					alwaystransparent = yes
					size = { 95 30 }

					tiny_flag = {
						parentanchor = right|vcenter
						position = { -5 0 }
						blockoverride "onhover" {}
					}

					textbox = {
						raw_text = "[Battle.GetCurrentDefenderUnits|0v]#!"
						autoresize = yes
						align = left|nobaseline
						parentanchor = left|vcenter
						position = { 25 0 }
					}

					manpower_bar = {
						size = { 5 20 }
						position  = { 15 0 }
						parentanchor = vcenter

						blockoverride "manpower_values" {
							max = "[Battle.GetStartingDefenderManpower]"
							value = "[Battle.CalcCurrentDefenderManpower]"
						}

						blockoverride "manpower_tooltip" {
							tooltip = "BATTLE_MANPOWER_DEFENDER_TOOLTIP"
						}
					}

					white_progressbar_vertical = {
						size = { 5 20 }
						position  = { 5 0 }
						tooltip = "BATTLE_MORALE_TOOLTIP"
						parentanchor = vcenter

						blockoverride "values" {
							min = 0
							max = 1
							value = "[FixedPointToFloat( BattleParticipant.GetMorale )]"
						}
						blockoverride "color" {
							color = "[GetMoraleColorVec( BattleParticipant.GetMorale )]"
						}
					}
				}
			}
		}

		icon = {
			size = { 40 40 }
			texture = "[Battle.GetBattleIcon]"
			tooltip = "[Battle.GetStatusString]"
			using = tooltip_above
			parentanchor = bottom|hcenter
			visible = "[Or(Battle.IsBeingHighlighted, IsZoomLevelNear)]"
		}

		icon = {
			size = { 30 30 }
			texture = "[Battle.GetBattleIcon]"
			tooltip = "[Battle.GetStatusString]"
			using = tooltip_above
			parentanchor = center
			visible = "[And(IsZoomLevelMid, Not(Battle.IsBeingHighlighted))]"
		}

		icon = {
			size = { 20 20 }
			texture = "[Battle.GetBattleIcon]"
			tooltip = "[Battle.GetStatusString]"
			using = tooltip_above
			parentanchor = center
			visible = "[And(IsZoomLevelFar, Not(Battle.IsBeingHighlighted))]"
		}
	}
}

### BATTLE
container = {
	name = "past_battle_marker"
	datacontext = "[PastBattleMarker.GetBattle]"
	using = clickthrough_blocker
	layer = layer_map_markers
	onmousehierarchyenter = "[AccessHighlightManager.HighlightBattle(Battle.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	alwaystransparent = no
	parentanchor = bottom|hcenter

	### BATTLE RESULT
	widget = {
		size = { 40 30 }
		datacontext = "[Battle.GetWinner]"
		color = "[Country.GetMilitaryInterfaceColor]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightBattle(Battle.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		parentanchor = bottom|hcenter
		visible = "[Battle.IsBeingHighlighted]"

		icon = {
			size = { 45 45 }
			parentanchor = center
			visible = "[Battle.IsBeingHighlighted]"
			texture = "gfx/interface/map_markers/round_highlight.dds"
		}

		icon = {
			size = { 35 35 }
			texture = "[Battle.GetBattleIcon]"
			tooltip = "[Battle.GetStatusString]"
			parentanchor = center
			alpha = 0.75
		}

		tiny_flag = {
			visible = "[Country.IsValid]"
			parentanchor = center
		}

		textbox = {
			visible = "[Not(Country.IsValid)]"
			raw_text = "?"
			align = center|nobaseline
			size = { 100% 100% }
		}

		button = {
			size = { 100% 100% }
			tooltip = "[Battle.GetStatusString]"
			onclick = "[InformationPanelBar.OpenBattlePanel( PastBattleMarker.GetBattle.AccessSelf )]"
		}
	}
}

### MILITARY FORMATION MARKER
button = {
	name = "military_formation_marker"
	datacontext = "[FormationMarker.GetFormation]"

	# TODO - Formation Highlight
	onmousehierarchyenter = "[AccessHighlightManager.HighlightMilitaryFormation( MilitaryFormation.Self )]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

	alwaystransparent = no
	layer = layer_map_markers
	
	onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( MilitaryFormation.AccessSelf, 'default' )]"
	onrightclick = "[RightClickMenuManager.ShowForMilitaryFormation(MilitaryFormation.AccessSelf)]"

	using = colored_panel
	color = "[MilitaryFormation.GetCountry.GetMilitaryInterfaceColor]"

	parentanchor = bottom|hcenter

	is_mobilizing_progressbar = {
		blockoverride "textbox" {}
		blockoverride "button_size" {
			size = { 100% 100% }
		}
		blockoverride "color" {
			color = "[MilitaryFormation.GetCountry.GetMilitaryInterfaceColor]"
		}
	}

	using = small_nib

	blockoverride "nib_visibility" {
		visible = "[MilitaryFormation.IsTraveling]"
	}

	container = {
		resizeparent = yes

		tooltipwidget = {
			FancyTooltip_MilitaryFormation = {}
		}

		flowcontainer = {
			visible = "[Or(IsZoomLevelNear, And(IsZoomLevelMid, MilitaryFormation.IsBeingHighlighted))]"
			margin = { 1 1 }
			minimumsize = { 100 -1 }
			margin_left = 8
			tiny_flag_no_interact = {
				parentanchor = vcenter
				datacontext = "[MilitaryFormation.GetCountry]"
			}

			flowcontainer = {
				direction = vertical
				parentanchor = vcenter
				margin_right = 5

				icon = {
					texture = "[MilitaryFormation.GetFlag]"
					color = "[MilitaryFormation.GetFlagColor]"
					visible = "[MilitaryFormation.IsArmy]"
					size = { 32 32 }
					parentanchor = hcenter
				}

				icon = {
					texture = "[MilitaryFormation.GetFlag]"
					color = "[MilitaryFormation.GetFlagColor]"
					visible = "[MilitaryFormation.IsFleet]"
					size = { 32 32 }
					parentanchor = hcenter
				}

				textbox = {
					visible = "[MilitaryFormation.IsTraveling]"
					raw_text = "#v [MilitaryFormation.GetTravelDaysLeft]d#!"
					autoresize = yes
					align = hcenter|nobaseline
					using = fontsize_small
					parentanchor = hcenter
				}
			}

			vertical_divider = {}

			flowcontainer = {
				direction = vertical
				parentanchor = vcenter
				spacing = 4
				margin = { 0 3 }
				margin_left = 10 

				flowcontainer = {
					parentanchor = hcenter
					spacing = 5

					icon = {
						visible = "[MilitaryFormation.IsArmy]"
						size = { 23 23 }
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
						parentanchor = vcenter
					}

					icon = {
						visible = "[MilitaryFormation.IsFleet]"
						size = { 23 23 }
						texture = "gfx/interface/icons/generic_icons/flotillas.dds"
						parentanchor = vcenter
					}
					
					textbox = {
						text = "COMBAT_UNITS_TYPE_AND_NUM"
						using = transparent_if_unmobilized_in_conflict
						autoresize = yes
						align = nobaseline
						parentanchor = vcenter
						margin_right = 5
					}

					flowcontainer = {
						visible = "[NotEqualTo_int64(MilitaryFormation.GetCurrentManpower, MilitaryFormation.GetMaxManpower)]"
						parentanchor = vcenter
						manpower_bar = {
							size = { 6 30 }
							parentanchor = vcenter
						}
						margin_right = 5
					}

					flowcontainer = {
						parentanchor = vcenter
						direction = vertical

						textbox = {
							raw_text = "@unit_offense! [MilitaryFormation.GetAverageOffenseExcludeUnavailableManpower|0v]"
							tooltip = "MILITARY_FORMATION_OFFENSE_TOOLTIP"
							autoresize = yes
							align = nobaseline
							using = fontsize_small
							minimumsize = { 40 -1 }
							margin_right = 3
						}

						textbox = {
							raw_text = "@unit_defense! [MilitaryFormation.GetAverageDefenseExcludeUnavailableManpower|0v]"
							tooltip = "MILITARY_FORMATION_DEFENSE_TOOLTIP"
							autoresize = yes
							align = nobaseline
							using = fontsize_small
							minimumsize = { 40 -1 }
							margin_right = 3
						}
					}

					organization_bar = {
						tooltip = "MILITARY_FORMATION_ORGANIZATION_TOOLTIP"
						visible = "[LessThan_CFixedPoint(MilitaryFormation.GetOrganizationPercentage, '(CFixedPoint)1')]"
						parentanchor = vcenter
						size = { 6 30 }
						
						blockoverride "organization_value" {
							value = "[FixedPointToFloat( MilitaryFormation.GetOrganizationPercentage )]"
						}
						blockoverride "organization_color" {
							color = "[GetOrganizationColorVec( MilitaryFormation.GetOrganizationPercentage )]"
						}
					}

					morale_bar = {
						visible = "[LessThan_CFixedPoint(MilitaryFormation.GetMorale, '(CFixedPoint)1')]"
						
						size = { 6 30 }
						parentanchor = vcenter
						tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"
						
						blockoverride "morale_value" {
							value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
						}
						blockoverride "morale_color" {
							color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
						}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[And(IsZoomLevelMid, Not(MilitaryFormation.IsBeingHighlighted))]"
			#minimumsize = { 55 -1 }

			icon = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				size = { 25 25 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			icon = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				size = { 25 25 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			flowcontainer = {
				direction = vertical
				parentanchor = vcenter

				textbox = {
					text = "COMBAT_UNITS_TYPE_AND_NUM"
					using = transparent_if_unmobilized_in_conflict
					autoresize = yes
					align = nobaseline
					margin_right = 5
				}
			}
		}

		textbox = {
			visible = "[And(IsZoomLevelFar, Not(And(IsZoomLevelMid, MilitaryFormation.IsBeingHighlighted)))]"
			minimumsize = { 36 -1 }
			text = "COMBAT_UNITS_TYPE_AND_NUM_WITH_ICON"
			using = transparent_if_unmobilized_in_conflict
			autoresize = yes
			align = hcenter|nobaseline
			using = fontsize_small
			parentanchor = center
			margin = { 4 2 }
		}
	}

	icon = {
		visible = "[MilitaryFormation.IsBeingHighlighted]"
		using = highlighted_square_selection
	}
}

container = {
	name = "front_marker"
	layer = layer_map_markers
	parentanchor = bottom|hcenter
	onmousehierarchyenter = "[AccessHighlightManager.HighlightFront(FrontMarker.GetFront)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

	container = {
		parentanchor = bottom|hcenter

		### FRONT INDICATOR - LARGE
		flowcontainer = {
			visible = "[Or(IsZoomLevelNear, FrontMarker.GetFront.IsBeingHighlighted)]"

			background = {
				visible = "[FrontMarker.GetFront.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/round_highlight.dds"
			}

			background = {
				texture = "gfx/interface/map_markers/front_indicator_behind.dds"
				margin = { 20 20 }
			}

			icon = {
				texture = "gfx/interface/map_markers/front_indicator.dds"
				size = { 60 60 }
				tooltip = "FRONT_MARKER_TOOLTIP"
				visible = "[And(Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessFirstCountries ) ), Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessSecondCountries ) ) ) ]"
				framesize = { 188 188 }
				frame = "[FrontMarker.GetFront.GetAdvantageFrame]"
				using = tooltip_below

				textbox = {
					alpha = "[TransparentIfFalse(Or(GreaterThan_int32(FrontMarker.AccessFront.GetNumFirstCombatUnits, '(int32)0'), GreaterThan_int32( FrontMarker.AccessFront.GetNumSecondCombatUnits, '(int32)0' )))]"
					visible = "[Not(StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc ))]"
					using = tooltip_below
					raw_text = "#bold [FrontMarker.GetFront.GetPlayerAdvantageRaw|+]#!"
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
				}
				textbox = {
					visible = "[StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc )]"
					raw_text = "?"
					using = tooltip_below
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
					margin_left = 10
					margin_right = 10
				}
			}
		}

		### FRONT INDICATOR - MEDIUM
		flowcontainer = {
			visible = "[And(IsZoomLevelMid, Not(FrontMarker.GetFront.IsBeingHighlighted))]"

			background = {
				visible = "[FrontMarker.GetFront.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/round_highlight.dds"
			}

			background = {
				visible = "[FrontMarker.GetFront.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/front_indicator_behind.dds"
				margin = { 20 20 }
			}

			icon = {
				texture = "gfx/interface/map_markers/front_indicator.dds"
				size = { 45 45 }
				tooltip = "FRONT_MARKER_TOOLTIP"
				visible = "[And(Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessFirstCountries ) ), Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessSecondCountries ) ) ) ]"
				framesize = { 188 188 }
				frame = "[FrontMarker.GetFront.GetAdvantageFrame]"
				using = tooltip_below

				textbox = {
					alpha = "[TransparentIfFalse(Or(GreaterThan_int32(FrontMarker.AccessFront.GetNumFirstCombatUnits, '(int32)0'), GreaterThan_int32( FrontMarker.AccessFront.GetNumSecondCombatUnits, '(int32)0' )))]"
					visible = "[Not(StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc ))]"
					using = tooltip_below
					raw_text = "#bold [FrontMarker.GetFront.GetPlayerAdvantageRaw|+]#!"
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
				}
				textbox = {
					visible = "[StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc )]"
					raw_text = "?"
					using = tooltip_below
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
					margin_left = 10
					margin_right = 10
				}
			}
		}

		### FRONT INDICATOR - SMALL
		flowcontainer = {
			visible = "[And(IsZoomLevelFar, Not(FrontMarker.GetFront.IsBeingHighlighted))]"

			background = {
				visible = "[FrontMarker.GetFront.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/round_highlight.dds"
			}

			background = {
				visible = "[FrontMarker.GetFront.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/front_indicator_behind.dds"
				margin = { 20 20 }
			}

			icon = {
				texture = "gfx/interface/map_markers/front_indicator.dds"
				size = { 30 30 }
				tooltip = "FRONT_MARKER_TOOLTIP"
				visible = "[And(Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessFirstCountries ) ), Not( IsDataModelEmpty( FrontMarker.AccessFront.AccessSecondCountries ) ) ) ]"
				framesize = { 188 188 }
				frame = "[FrontMarker.GetFront.GetAdvantageFrame]"
				using = tooltip_below

				textbox = {
					alpha = "[TransparentIfFalse(Or(GreaterThan_int32(FrontMarker.AccessFront.GetNumFirstCombatUnits, '(int32)0'), GreaterThan_int32( FrontMarker.AccessFront.GetNumSecondCombatUnits, '(int32)0' )))]"
					visible = "[Not(StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc ))]"
					using = tooltip_below
					raw_text = "#bold [FrontMarker.GetFront.GetPlayerAdvantageRaw|+]#!"
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
					using = fontsize_small
				}
				textbox = {
					visible = "[StringIsEmpty( FrontMarker.GetFront.GetPlayerAdvantageDesc )]"
					raw_text = "?"
					using = tooltip_below
					autoresize = yes
					align = center|nobaseline
					parentanchor = center
					margin_left = 10
					margin_right = 10
					using = fontsize_small
				}
			}
		}
	}

	button = {
		tooltip = "FRONT_MARKER_TOOLTIP"
		onclick = "[FrontMarker.OnClick]"
		parentanchor = bottom|hcenter
		using = tooltip_below
		size = { 70 70 }
	}
}

### INTEREST GROUPS
flowcontainer = {
	name = "interestgroup_marker"
	datacontext = "[InterestGroupMarker.AccessInterestGroup]"
	righttoleft = yes
	ignoreinvisible = yes
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	tooltipwidget = {
		FancyTooltip_IG = {}
	}

	### ZOOMED IN
	container = {
		visible = "[IsZoomLevelNear]"

		button = {
			visible = "[InterestGroup.IsPowerful]"
			onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
			using = default_button
			size = { 100 38 }

			hbox = {
				margin_left = 3

				ig_icon = {
					size = { 30 30 }
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 30 }
					raw_text = "#bold [InterestGroup.GetClout|%1]#!"
					margin = { 5 0 }
					align = left|nobaseline
					using = fontsize_large
				}
			}
		}
		button = {
			visible = "[Not(InterestGroup.IsPowerful)]"
			onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForIG(InterestGroup.AccessSelf)]"
			using = default_button
			size = { 100 28 }

			hbox = {
				margin_left = 3

				widget = {
					size = { 30 25 }
					ig_icon = {
						size = { 25 25 }
						parentanchor = center
					}
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 25 }
					raw_text = "#bold [InterestGroup.GetClout|%1]#!"
					margin = { 5 0 }
					align = left|nobaseline
				}
			}
		}
	}

	### ZOOMED OUT
	container = {
		visible = "[Not(IsZoomLevelNear)]"

		ig_button = {
			visible = "[InterestGroup.IsPowerful]"
			size = { 38 38 }
		}
		ig_button = {
			visible = "[Not(InterestGroup.IsPowerful)]"
			size = { 28 28 }
		}
	}
}

### REVOLUTIONARY MOVEMENT
container = {
	name = "revolutionary_movement_marker"
	datacontext = "[RevolutionaryMovementMarker.GetPoliticalMovement]"
	datacontext = "[RevolutionaryMovementMarker.GetPoliticalMovement.GetPrimaryInterestGroup]"
	using = clickthrough_blocker
	alwaystransparent = no
	ignoreinvisible = yes
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	onmousehierarchyenter = "[AccessHighlightManager.HighlightPoliticalMovement(PoliticalMovement.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"


	tooltipwidget = {
		FancyTooltip_PoliticalMovement = {}
	}

	### REVOLUTION VFX
	widget = {
		size = { 70 70 }
		parentanchor = hcenter

		vfx = {
			blockoverride "position" {
				position = { 2 6 }
			}

			blockoverride "camera_position" {
				camera_position = { 0 0 -4 }
			}

			blockoverride "parent_anchor" {
				parentanchor = center
			}

			blockoverride "size" {
				size = { 350% 350% }
			}

			blockoverride "entity_instance"{
				entity_instance = vfx_entity_ui_revolution_map_marker
			}
		}
	}

	### MOVEMENT HIGHLIGHTED
	widget = {
		visible = "[PoliticalMovement.IsBeingHighlighted]"
		size = { 0 40 }
		parentanchor = vcenter

		state = {
			name = _show
			size = { 150 40 }
			position_x = 80
			duration = 0.2
			alpha = 1
			using = Animation_Curve_Default
		}
		state = {
			name = _hide
			size = { 0 40 }
			position_x = 40
			duration = 0.2
			alpha = 0
			using = Animation_Curve_Default
		}

		widget = {
			size = { 80% 100% }
			parentanchor = right|vcenter

			bad_progressbar_horizontal = {
				parentanchor = right|vcenter
				datacontext = "[PoliticalMovement.GetRevolution]"
				size = { 80% 100% }

				blockoverride "values" {
					value = "[FixedPointToFloat( PoliticalMovement.GetRevolution.GetProgress )]"
					min = 0
					max = 1
				}

				blockoverride "in_government_icon" {}
			}

			textbox = {
				parentanchor = right|vcenter
				align = right|nobaseline
				autoresize = yes
				raw_text = "#v [PoliticalMovement.GetRevolution.GetProgress|0%]#!"
				position = { -40 0 }
			}

			icon = {
				parentanchor = right|vcenter
				size = { 30 30 }
				texture = "gfx/interface/icons/politics_icons/radicalized.dds"
				position = { -5 0 }
			}
		}
	}

	widget = {
		size = { 70 70 }
		parentanchor = hcenter

		round_progress_bad = {
			size = { 100% 100% }
			value = "[FixedPointToFloat(PoliticalMovement.GetRevolution.GetClockTime)]"
			parentanchor = center
		}

		ig_button = {
			size = { 70% 70% }
			parentanchor = center
			blockoverride "influential" {}

			blockoverride "tooltip" {}

			blockoverride "onclick" {
				onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
			}
		}

		icon = {
			size = { 105% 105% }
			parentanchor = center
			texture = "gfx/interface/map_markers/revolutionary_movement_frame.dds"
		}

	}
}

### NATIONAL FOCUS
flowcontainer = {
	name = "decree_marker"
	datacontext = "[DecreeMarker.AccessDecree]"
	righttoleft = yes
	ignoreinvisible = yes
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	button = {
		using = small_nib
		size = { 48 48 }
		tooltip = "[Decree.BuildTooltip]"
		onrightclick = "[RightClickMenuManager.ShowForDecree(Decree.AccessSelf)]"

		icon = {
			size = { 100% 100% }
			texture = "[Decree.GetTexture]"
		}
	}
}


### HOMELAND
flowcontainer = {
	name = "homeland_marker"
	datacontext = "[HomelandMarker.AccessState]"
	layer = layer_map_markers
	parentanchor = bottom|hcenter

	tiny_flag = {
		datacontext = "[State.GetOwner]"

		blockoverride "tooltip" {
			tooltip = "HOMELAND_MAP_MARKER_TOOLTIP"
		}
	}
}

### BUILDING POTENTIAL
container = {
	name = "building_potential_marker"
	layer = layer_map_markers
	datacontext = "[BuildingPotentialMarker.GetState]"
	datacontext = "[State.GetBuilding( BuildingPotentialMarker.GetBuildingType.GetKey )]"
	onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	parentanchor = bottom|hcenter

	flowcontainer = {
		visible = "[And(MapInteractions.HasAnyActiveMapInteraction, Or(Not(Building.HasConstructionQueued), Building.IsCurrentlyUnderConstruction))]"
		background = {
			using = text_edit_bg
		}

		background = {
			using = text_edit_bg
		}

		textbox = {
			visible = "[ObjectsEqual(GetPlayer.Self, State.GetOwner)]"
			text = "[State.GetBuilding( BuildingPotentialMarker.GetBuildingType.GetKey).GetExpansionLevelDesc]"
			autoresize = yes
			align = nobaseline
			margin_left = 6
			margin_right = 6
		}

		container = {
			visible = "[Not(BuildingPotentialMarker.GetBuildingType.IsUrban)]"
			container = {
				visible = "[Not(ObjectsEqual(GetPlayer.Self, State.GetOwner))]"
				tooltip = "POTENTIAL_MAP_MARKER_TOOLTIP"
				onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
				onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
				alwaystransparent = no

				icon = {
					size = { 20 20 }
					visible = "[Not(IsZoomLevelNear)]"
					texture = "[BuildingPotentialMarker.GetBuildingType.GetTexture]"
				}

				icon = {
					size = { 30 30 }
					visible = "[IsZoomLevelNear]"
					texture = "[BuildingPotentialMarker.GetBuildingType.GetTexture]"
				}
			}
		}
	}
}

### HQ MARKER
container = {
	name = "hq_marker"
	layer = layer_map_markers
	datacontext = "[HQMarker.GetHQ]"
	datacontext = "[Hq.GetCountry]"
	onmousehierarchyenter = "[AccessHighlightManager.HighlightHQ(Hq.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	parentanchor = bottom|hcenter
	using = clickthrough_blocker

	container = {
		# Naval HQ markers are not shown by default. Only when you have a fleet selected should it actually show up
		visible = "[And(Or(GetMetaPlayer.IsPlayedOrObservedCountry(Country.Self), Hq.IsBeingHighlighted), Or(Not(Hq.IsNavalHQ),And(Hq.IsNavalHQ, GetSelectedMilitaryFormation.IsFleet)))]"
		
		using = small_nib
		blockoverride "nib_visibility" {
			visible = "[IsZoomLevelNear]"
		}

		button = {
			visible = "[GetMetaPlayer.IsPlayedOrObservedCountry(Country.Self)]"
			tooltip = "HQ_MAP_MARKER_TOOLTIP"
			size = { 100% 100% }
			onclick = "[InformationPanelBar.OpenMilitaryPanelTab('army')]"
		}

		button = {
			visible = "[Not(GetMetaPlayer.IsPlayedOrObservedCountry(Country.Self))]"
			tooltip = "HQ_MAP_MARKER_TOOLTIP"
			size = { 100% 100% }
			onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'default')]"
		}

		background = {
			using = colored_panel_dark
			color = "[Country.GetMilitaryInterfaceColor]"
			alpha = 0.8
		}

		flowcontainer = {
			direction = vertical

			container = {
				visible = "[GetMetaPlayer.IsPlayedOrObservedCountry(Country.Self))]"
				
				textbox = {
					text = "[Hq.GetNameNoFlagNoConcept]"
					autoresize = yes
					align = hcenter|nobaseline
					alwaystransparent = yes
					using = fontsize_small
					margin = { 6 1 }
					parentanchor = hcenter
					visible = "[IsZoomLevelMid]"
				}
				
				textbox = {
					text = "[Hq.GetName]"
					visible = "[IsZoomLevelNear]"
					autoresize = yes
					align = hcenter|nobaseline
					alwaystransparent = yes
					using = fontsize_small
					margin = { 5 3 }
					parentanchor = hcenter
				}
			}

			tiny_flag = {
				visible = "[Not(GetMetaPlayer.IsPlayedOrObservedCountry(Country.Self)))]"

				blockoverride "tooltip" {
					tooltip = "[Hq.GetName]"
				}
			}

		}

		icon = {
			visible = "[Hq.IsBeingHighlighted]"
			using = highlighted_square_selection
		}
	}
}

### NAVAL INVASION MARKER
container = {
	name = "naval_invasion_marker"
	datacontext = "[NavalInvasionMarker.GetNavalInvasion]"
	layer = layer_map_markers
	onmousehierarchyenter = "[AccessHighlightManager.HighlightNavalInvasion(NavalInvasion.Self)]"
	onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
	parentanchor = bottom|hcenter
	using = clickthrough_blocker

	### ONGOING BATTLE
	container = {
		visible = "[Or(And(Not(NavalInvasion.HasEnded), NavalInvasion.IsRelevantForCountry( GetMetaPlayer.GetPlayedOrObservedCountry.Self )), NavalInvasion.IsBeingHighlighted)]"
		
		onmousehierarchyenter = "[AccessHighlightManager.HighlightNavalInvasion(NavalInvasion.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		onmousehierarchyenter = "[GetVariableSystem.Set(Concatenate('placeholder_naval_invasion_highlight_', NavalInvasion.GetName), 'true')]"
		onmousehierarchyleave = "[GetVariableSystem.Set(Concatenate('placeholder_naval_invasion_highlight_', NavalInvasion.GetName), 'false')]"

		alwaystransparent = no
		parentanchor = bottom|hcenter

		tooltip = "NAVAL_INVASION_MARKER_TOOLTIP"
		using = tooltip_above

		widget = {
			size = { 40 40 }
			parentanchor = bottom|hcenter

			icon = {
				size = { 50 50 }
				parentanchor = center
				visible = "[NavalInvasion.IsBeingHighlighted]"
				texture = "gfx/interface/map_markers/round_highlight.dds"
			}
		}

		button = {
			onclick = "[InformationPanelBar.OpenNavalInvasionPanel(NavalInvasion.AccessSelf)]"
			size = { 100% 100% }
		}

		### MEDIUM SIZE WITH FLAGS ONLY
		widget = {
			visible = "[And(IsZoomLevelNear, Not(NavalInvasion.IsBeingHighlighted))]"
			size = { 0 60 }

			state = {
				name = _show
				size = { 110 60 }
				duration = 0.2
				alpha = 1
				using = Animation_Curve_Default
			}
			state = {
				name = _hide
				size = { 0 60 }
				duration = 0.2
				alpha = 0
				using = Animation_Curve_Default
			}

			### attackers
			icon = {
				using = colored_panel
				color = "[NavalInvasion.GetInvaderCountry.GetMilitaryInterfaceColor]"
				alwaystransparent = yes
				size = { 50% 25 }
				parentanchor = left|bottom
				position = { 0 -14 }

				tiny_flag_no_interact = {
					datacontext = "[NavalInvasion.GetInvaderCountry]"
					parentanchor = right|vcenter
					position = { -23 0 }
				}

			}

			### defenders
			icon = {
				using = colored_panel
				color = "[NavalInvasion.GetInvadedCountry.GetMilitaryInterfaceColor]"
				alwaystransparent = yes
				size = { 50% 25 }
				parentanchor = right|bottom
				position = { 0 -14 }

				tiny_flag_no_interact = {
					datacontext = "[NavalInvasion.GetInvadedCountry]"
					parentanchor = vcenter
					position = { 23 0 }
				}
			}
		}

		### NAVAL INVASION HIGHLIGHTED - BIG SIZE WITH UNIT NUMBERS + FLAGS
		widget = {
			visible = "[NavalInvasion.IsBeingHighlighted]"
			size = { 0 60 }

			state = {
				name = _show
				size = { 230 60 }
				duration = 0.2
				alpha = 1
				using = Animation_Curve_Default
			}
			state = {
				name = _hide
				size = { 0 60 }
				duration = 0.2
				alpha = 0
				using = Animation_Curve_Default
			}

			### attackers
			widget = {
				size = { 50% 100% }
				parentanchor = left|vcenter
				position = { -10 0 }

				icon = {
					parentanchor = left|vcenter
					using = colored_panel
					color = "[NavalInvasion.GetInvaderCountry.GetMilitaryInterfaceColor]"
					alwaystransparent = yes
					size = { 120 50 }

					tiny_flag = {
						datacontext = "[NavalInvasion.GetInvaderCountry]"
						parentanchor = left|vcenter
						position = { 5 0 }

						blockoverride "onhover" {}
						using = tooltip_ws
					}

					flowcontainer = {
						parentanchor = right|vcenter
						position = { -25 0 }
						direction = vertical

						textbox = {
							raw_text = "@flotillas! [NavalInvasion.GetNumInvadingFleetsUnits]"
							autoresize = yes
							align = right|nobaseline
							parentanchor = right
						}

						textbox = {
							raw_text = "@battalions! [NavalInvasion.GetNumInvadingArmiesUnits]"
							autoresize = yes
							align = right|nobaseline
							parentanchor = right
						}

					}
				}
			}

			### defenders
			widget = {
				size = { 50% 100% }
				parentanchor = right|vcenter
				position = { 10 0 }

				icon = {
					parentanchor = right|vcenter
					using = colored_panel
					color = "[NavalInvasion.GetInvadedCountry.GetMilitaryInterfaceColor]"
					alwaystransparent = yes
					size = { 120 50 }

					tiny_flag = {
						datacontext = "[NavalInvasion.GetInvadedCountry]"
						parentanchor = right|vcenter
						position = { -5 0 }
						blockoverride "onhover" {}
					}

					flowcontainer = {
						parentanchor = vcenter
						position = { 25 0 }
						direction = vertical

						textbox = {
							raw_text = "@flotillas! [NavalInvasion.GetNumDefendingFleetsUnits]"
							autoresize = yes
							align = nobaseline
						}

						textbox = {
                            raw_text = "@battalions! [NavalInvasion.GetNumDefendingArmiesUnits]"
							autoresize = yes
							align = nobaseline
						}

					}
				}
			}
		}

		icon = {
			size = { 50 50 }
			texture = "gfx/interface/map_markers/naval_invasion_marker.dds"
			parentanchor = bottom|hcenter

			round_progress_bad = {
				size = { 65% 65% }
				parentanchor = center
			}

			icon = {
				size = { 60% 60% }
				texture = "gfx/interface/backgrounds/round_button_bg.dds"
				parentanchor = center

				icon = {
					size = { 91% 91% }
					texture = "gfx/interface/icons/formation_order_icons/naval_invasion.dds"
					parentanchor = center
				}

			}
		}
	}
}

### STATE EFFECT
flowcontainer = {
	name = "state_effect_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	parentanchor = bottom|hcenter

	icon = {
		visible = "[State.GetStateRegion.HasDevastation]"
		datacontext = "[State.GetStateRegion]"
		tooltip = "TOOLTIP_STATE_DEVASTATION"
		texture = "gfx/interface/icons/state_status_icons/has_devastation.dds"
		size = { 30 30 }
	}

	icon = {
		visible = "[State.HasTurmoilEffects]"
		tooltip = "TOOLTIP_STATE_TURMOIL"
		texture = "gfx/interface/icons/state_status_icons/has_turmoil.dds"
		size = { 30 30 }
	}
}

### STATE BUDGET BALANCE
container = {
	name = "state_budget_balance_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	using = small_nib
	blockoverride "nib_position" {
		position = { 0 -3 }
	}
	parentanchor = bottom|hcenter

	background = {
		using = default_background
	}

	flowcontainer = {
		margin = { 9 5 }
		direction = vertical

		textbox = {
			raw_text = "@warning! [State.CalcTaxCapacityBalance|0+=]"
			visible = "[GreaterThan_CFixedPoint(State.CalcTaxCapacityUsage, State.CalcTaxCapacity)]"
			autoresize = yes
			align = nobaseline
			parentanchor = hcenter
			tooltip = "STATE_TAX_CAPACITY_DESC"
		}

		textbox = {
			visible = "[GreaterThan_CFixedPoint(State.GetTaxationRevenue, '(CFixedPoint)0')]"
			tooltip = "[State.GetTaxationRevenueTooltip]"
			raw_text = "#variable [State.GetTaxationRevenue|+=d]#!"
			autoresize = yes
			align = left|nobaseline
			parentanchor = hcenter
			using = fontsize_small
		}

		textbox = {
			visible = "[LessThan_CFixedPoint(State.GetGovernmentExpenses, '(CFixedPoint)0')]"
			autoresize = yes
			align = right|nobaseline
			tooltip = "[State.GetGovernmentExpensesTooltip]"
			raw_text = "#variable [State.GetGovernmentExpenses|+d]#!"
			parentanchor = hcenter
			using = fontsize_small
		}
	}
}

### STATE MIGRATION TARGET
button = {
	name = "state_migration_target_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	using = small_nib
	parentanchor = bottom|hcenter

	background = {
		using = default_background
	}

	flowcontainer = {
		resizeparent = yes

		icon = {
			texture = "gfx/interface/icons/state_status_icons/mass_migration_target.dds"
			size = { 50 50 }
			tooltip = "TOOLTIP_MASS_MIGRATION_TARGET"
		}
	}
}

### STRATEGIC OBJECTIVE
button = {
	name = "strategic_objective_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	parentanchor = bottom|hcenter
	tooltip = "STATE_STRATEGIC_OBJECTIVE_TOOLTIP"

	icon = {
		parentanchor = bottom|hcenter
		size = { 11 8 }
		position = { 0 4 }
		texture = "/gfx/interface/map_markers/small_nib.dds"
	}

	flowcontainer = {
		resizeparent = yes

		icon = {
			visible = "[IsZoomLevelNear]"
			texture = "gfx/interface/icons/lens_toolbar_icons/designate_strategic_objective_lens_option.dds"
			size = { 50 50 }
		}
		icon = {
			visible = "[Not(IsZoomLevelNear)]"
			texture = "gfx/interface/icons/lens_toolbar_icons/designate_strategic_objective_lens_option.dds"
			size = { 36 36 }
		}
	}
}

### STATE PRICE OF GOODS
widget = {
	name = "state_price_of_goods_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	allow_outside = yes

	flowcontainer = {
		parentanchor = center
		margin = { 7 7 }
		direction = vertical
		datacontext = "[StateMarker.GetGoods.WithStateContext( State.Self )]"
		tooltip = "[Goods.GetStatePriceDesc]"
		alpha = "[TransparentIfFalse(Or(GreaterThan_CFixedPoint(Goods.GetStateProduction, '(CFixedPoint)0'), GreaterThan_CFixedPoint(Goods.GetStateConsumption, '(CFixedPoint)0')))]"

		textbox = {
			raw_text = "[GetPlayer.MakeScope.Var('cwp_currency').GetFlagName] [Goods.GetStatePrice|v0] [Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )]"
			autoresize = yes
			align = left|nobaseline
			parentanchor = hcenter
			using = fontsize_small

			background = {
				using = colored_panel_dark
				margin = { 5 2 }
				alpha = 0.7
			}
		}
	}
}

widget = {
	name = "state_potential_of_goods_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	allow_outside = yes

	flowcontainer = {
		parentanchor = center
		margin = { 7 7 }
		direction = vertical
		datacontext = "[StateMarker.GetGoods.WithStateContext( State.Self )]"
		
		textbox = {
			text = "[State.GetPotentialProductionForCountry(Goods.Self, GetPlayer.Self)|vD]"
			visible = "[GreaterThan_CFixedPoint(State.GetPotentialProductionForCountry(Goods.Self, GetPlayer.Self), '(CFixedPoint)0')]"
			autoresize = yes
			align = left|nobaseline
			parentanchor = hcenter
			using = fontsize_small

			background = {
				using = colored_panel_dark
				margin = { 5 1 }
				alpha = 0.7
			}
		}
	}
}

widget = {
	name = "state_production_of_goods_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	allow_outside = yes

	flowcontainer = {
		parentanchor = center
		margin = { 7 7 }
		direction = vertical
		datacontext = "[StateMarker.GetGoods.WithStateContext( State.Self )]"
		#tooltip = "[Goods.GetStatePriceDesc]"
		
		textbox = {
			text = "[State.GetNumProduced(Goods.Self)|0v]"
			visible = "[GreaterThan_CFixedPoint(State.GetNumProduced(Goods.Self), '(CFixedPoint)0')]"
			autoresize = yes
			align = left|nobaseline
			parentanchor = hcenter
			using = fontsize_small

			background = {
				using = colored_panel_dark
				margin = { 5 1 }
				alpha = 0.7
			}
		}
	}
}

widget = {
	name = "state_consumption_of_goods_marker"
	layer = layer_map_markers
	datacontext = "[StateMarker.GetState]"
	allow_outside = yes

	flowcontainer = {
		parentanchor = center
		margin = { 7 7 }
		direction = vertical
		datacontext = "[StateMarker.GetGoods.WithStateContext( State.Self )]"
		
		textbox = {
			text = "[State.GetNumConsumed(Goods.Self)|0v]"
			visible = "[GreaterThan_CFixedPoint(State.GetNumConsumed(Goods.Self), '(CFixedPoint)0')]"
			autoresize = yes
			align = left|nobaseline
			parentanchor = hcenter
			using = fontsize_small

			background = {
				using = colored_panel_dark
				margin = { 5 1 }
				alpha = 0.7
			}
		}
	}
}

### TEMPLATES AND TYPES

template small_nib {
	container = {
		parentanchor = bottom|hcenter
		widgetanchor = top|hcenter

		block "nib_visibility" {}

		icon = {
			size = { 11 8 }
			block "nib_position" {
				position = { 0 0 }
			}
			texture = "/gfx/interface/map_markers/small_nib.dds"
			alpha = 1
		}
	}
}

template colored_panel
{
	texture = "gfx/interface/map_markers/colored_panel.dds"
	texture_density = 2
	spriteborder = { 10 10 }
	spriteType = Corneredtiled

	icon = {
		name = "shading"
		texture = "gfx/interface/map_markers/colored_panel_shading.dds"
		spriteType = Corneredstretched
		spriteborder = { 0 0 }
		size = { 100% 100% }
		alpha = 0.75

		modify_texture = {
			texture = "gfx/interface/map_markers/colored_panel.dds"
			texture_density = 2
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			blend_mode = alphamultiply
		}
	}

	icon = {
		name = "texture"
		texture = "gfx/interface/map_markers/colored_panel_texture.dds"
		size = { 100% 100% }
		spriteType = Corneredtiled
		spriteborder = { 0 0 }
		alpha = 0.5

		modify_texture = {
			texture = "gfx/interface/map_markers/colored_panel.dds"
			texture_density = 2
			spriteType = Corneredtiled
			spriteborder = { 10 10 }
			blend_mode = alphamultiply
		}
	}
}
template colored_panel_ui
{
	using = colored_panel
	alpha = 0.4
}
template colored_panel_dark
{
	using = colored_panel
	texture = "gfx/interface/map_markers/colored_panel_dark.dds"
}
template colored_panel_bright
{
	using = colored_panel
	texture = "gfx/interface/map_markers/colored_panel_bright.dds"
}

template transparent_if_unmobilized_in_conflict
{
	alpha = "[TransparentIfTrue(And(And(Not(MilitaryFormation.IsMobilized), MilitaryFormation.IsArmy), MilitaryFormation.GetCountry.IsInvolvedInActiveConflict))]"
}