# COPY-PASTED FOR NOW
@panel_width_minus_30 = 510
@panel_width_minus_20 = 520	
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530


military_formation_change_name_popup_type = {
	name = military_formation_change_name_popup
}

types military_formation_change_name
{
	type military_formation_change_name_popup_type = default_popup
	{
		datacontext = "[MilitaryFormationChangeNamePopup.GetFormation]"

		blockoverride "window_header_name"
		{
			text = "CUSTOMISE_MILITARY_FORMATION"
		}

		blockoverride "header_close_button_visibility"
		{
			visible = yes
		}

		blockoverride "header_close_button"
		{
			visible = yes
			onclick = "[PopupManager.HideMilitaryFormationChangeName]"
		}

		blockoverride "entire_scrollarea"
		{
			flowcontainer = {
				direction = vertical

				#background = {
				#	using = default_background
				#}

				# "Choose Name" section
				flowcontainer = {
					direction = vertical	
					spacing = 10

					textbox = {
						size = { 420 40 }
						align = left|nobaseline
						autoresize = yes
						using = fontsize_large
						text = "FORMATION_NAME"
					}

					# Set a custom name
					editbox = {
						visible = yes
						background = {
							using = text_edit_bg
						}

						# The name is referenced in code. If you change it, it will no longer get properly reset
						name = "formation_name_edit"
						ontextedited = "[MilitaryFormationChangeNamePopup.OnEditName]"
						maxcharacters = 30
						size = { 420 40 }
						margin_left = 10
						alwaystransparent = no
						focuspolicy = all
						focus_on_visible = yes
						align = left|nobaseline
					}
					
					widget = {
						size = { 420 10 }
					}
				}

				# "Choose Formation Flag" section
				flowcontainer = {
					direction = vertical
					spacing = 10

					textbox = {
						size = { 420 40 }
						align = left|nobaseline
						autoresize = yes
						using = fontsize_large
						text = "CHOOSE_FORMATION_FLAG"
					}

					dynamicgridbox = {
						# PRCAL-29157 Remove the # for visible state on next line
						#visible = "[MilitaryFormation.IsArmy]"
						###PRCAL-29157 Needs datamodel to pull all Formation Identifiers icons for Army
						#datamodel = "[GetArmyIdentities]"
						datamodel = "[DataModelRepeatedItem('(int32)20')]"
						datamodel_wrap = 5
						flipdirection = yes

						item = {
							widget = {
								size = { 85 95 }

								set_level_bar_item = {
									blockoverride "button_texture" {
										###PRCAL-29157 Needs function to get the texture from this color
										#texture = "[Color.GetTexture]"
										###PRCAL-29157 Remove next line when function is in
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
									}

									blockoverride "size" {
										size = { 85 95 }
									}

									blockoverride "button_size" {
										size = { 80 80 }
									}

									blockoverride "texture_size" {
										size = { 50 50 }
									}

									blockoverride "selected_frame_size" {
										size = { 80 80 }
									}

									blockoverride "selected_texture_size" {
										size = { 53 53 }
									}

									blockoverride "selected_arrow_size" {	
										size = { 30 17 }
									}

									blockoverride "click" {
										using = budget_coins_lvl_1_button_sound
										block "button_1_click" {
											###PRCAL-29157 Needs function to select the color
											#onclick = "[Execute(MilitaryFormationChangeNamePopup.SelectColor(Color.AccessSelf))]"
											###PRCAL-29157 Remove next line when function is in
											onclick = "[GetVariableSystem.Toggle('military_formation_cool_color')]"
										}
									}

									blockoverride "setvisible" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf)]"
										###PRCAL-29157 Remove next line when function is in
										visible = "[GetVariableSystem.Exists('military_formation_cool_color')]"
									}

									blockoverride "setvisible_2" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[Not(MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf))]"
										###PRCAL-29157 Remove next line when function is in
										visible = "[Not(GetVariableSystem.Exists('military_formation_cool_color'))]"
									}
								}
							}
						}
					}

					dynamicgridbox = {
						#visible = "[MilitaryFormation.IsNavy]"
						###PRCAL-29157 Remove next line when data is in
						visible = no
						###PRCAL-29157 Needs datamodel to pull all Formation Identifiers icons for Navy
						#datamodel = "[GetNavyIdentities]"
						datamodel = "[DataModelRepeatedItem('(int32)20')]"
						datamodel_wrap = 5
						flipdirection = yes

						item = {
							widget = {
								size = { 85 95 }

								set_level_bar_item = {
									blockoverride "button_texture" {
										###PRCAL-29157 Needs function to get the texture from this color
										#texture = "[Color.GetTexture]"
										###PRCAL-29157 Remove next line when function is in
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
									}

									blockoverride "size" {
										size = { 85 95 }
									}

									blockoverride "button_size" {
										size = { 80 80 }
									}

									blockoverride "texture_size" {
										size = { 50 50 }
									}

									blockoverride "selected_frame_size" {
										size = { 80 80 }
									}

									blockoverride "selected_texture_size" {
										size = { 53 53 }
									}

									blockoverride "selected_arrow_size" {	
										size = { 30 17 }
									}

									blockoverride "click" {
										using = budget_coins_lvl_1_button_sound
										block "button_1_click" {
											###PRCAL-29157 Needs function to select the color
											#onclick = "[Execute(MilitaryFormationChangeNamePopup.SelectColor(Color.AccessSelf))]"
											###PRCAL-29157 Remove next line when function is in
											onclick = "[GetVariableSystem.Toggle('military_formation_cool_color')]"
										}
									}

									blockoverride "setvisible" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf)]"
										###PRCAL-29157 Remove next line when function is in
										visible = "[GetVariableSystem.Exists('military_formation_cool_color')]"
									}

									blockoverride "setvisible_2" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[Not(MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf))]"
										###PRCAL-29157 Remove next line when function is in
										visible = "[Not(GetVariableSystem.Exists('military_formation_cool_color'))]"
									}
								}
							}
						}
					}

					widget = {
						size = { 420 10 }
					}
				}

				# "Choose Flag Colour" section
				flowcontainer = {
					direction = vertical
					spacing = 10

					textbox = {
						size = { 420 40 }
						align = left|nobaseline
						autoresize = yes
						using = fontsize_large
						text = "CHOOSE_FORMATION_FLAG_COLOUR"
					}

					dynamicgridbox = {
						# PRCAL-29157 Remove the # for visible state on next line
						#visible = "[MilitaryFormation.IsArmy]"
						###PRCAL-29157 Needs datamodel to pull all Formation Identifiers colours for Army
						#datamodel = "[GetArmyIdentitiesColour]"
						###PRCAL-29157 Remove next line when datamodel is in
						datamodel = "[DataModelRepeatedItem('(int32)7')]"
						datamodel_wrap = 7
						flipdirection = yes

						item = {
							widget = {
								size = { 61 70 }

								set_level_bar_item = {
									blockoverride "button_texture" {
										###PRCAL-29157 Needs function to get the texture from this color
										#texture = "[Color.GetTexture]"
										###PRCAL-29157 Remove next line when function is in
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
									}

									blockoverride "size" {
										size = { 61 70 }
									}

									blockoverride "button_size" {
										size = { 56 56 }
									}

									blockoverride "texture_size" {
										size = { 32 32 }
									}

									blockoverride "selected_frame_size" {
										size = { 56 56 }
									}

									blockoverride "selected_texture_size" {
										size = { 35 35 }
									}

									blockoverride "selected_arrow_size" {	
										size = { 30 17 }
									}

									blockoverride "click" {
										using = budget_coins_lvl_1_button_sound
										block "button_1_click" {
											###PRCAL-29157 Needs function to select the color
											#onclick = "[Execute(MilitaryFormationChangeNamePopup.SelectColor(Color.AccessSelf))]"
											onclick = "[GetVariableSystem.Toggle('military_formation_cool_color')]"
										}
									}

									blockoverride "setvisible" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf)]"
										visible = "[GetVariableSystem.Exists('military_formation_cool_color')]"
									}

									blockoverride "setvisible_2" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[Not(MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf))]"
										visible = "[Not(GetVariableSystem.Exists('military_formation_cool_color'))]"
									}
								}
							}
						}
					}

					dynamicgridbox = {
						#visible = "[MilitaryFormation.IsNavy]"
						###PRCAL-29157 Remove next line when data is in
						visible = no
						###PRCAL-29157 Needs datamodel to pull all Formation Identifiers colours for Navy
						#datamodel = "[GetNavyIdentitiesColour]"
						datamodel = "[DataModelRepeatedItem('(int32)7')]"
						datamodel_wrap = 7
						flipdirection = yes

						item = {
							widget = {
								size = { 64 75 }

								set_level_bar_item = {
									blockoverride "button_texture" {
										###PRCAL-29157 Needs function to get the texture from this color
										#texture = "[Color.GetTexture]"
										###PRCAL-29157 Remove next line when function is in
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
									}

									blockoverride "size" {
										size = { 60 75 }
									}

									blockoverride "button_size" {
										size = { 56 56 }
									}

									blockoverride "texture_size" {
										size = { 40 40 }
									}

									blockoverride "selected_frame_size" {
										size = { 56 56 }
									}

									blockoverride "selected_texture_size" {
										size = { 43 43 }
									}

									blockoverride "selected_arrow_size" {	
										size = { 30 17 }
									}

									blockoverride "click" {
										using = budget_coins_lvl_1_button_sound
										block "button_1_click" {
											###PRCAL-29157 Needs function to select the color
											#onclick = "[Execute(MilitaryFormationChangeNamePopup.SelectColor(Color.AccessSelf))]"
											onclick = "[GetVariableSystem.Toggle('military_formation_cool_color')]"
										}
									}

									blockoverride "setvisible" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf)]"
										visible = "[GetVariableSystem.Exists('military_formation_cool_color')]"
									}

									blockoverride "setvisible_2" {
										###PRCAL-29157 Add visible state for when a color is selected or not
										#visible = "[Not(MilitaryFormationChangeNamePopup.IsColorSelected(Color.AccessSelf))]"
										visible = "[Not(GetVariableSystem.Exists('military_formation_cool_color'))]"
									}
								}
							}
						}
					}

					widget = {
						size = { 420 10 }
					}
				}
			}
		}

		blockoverride "fixed_bottom"
		{
			# Formation button
			button = {
				using = default_button_action
				parentanchor = hcenter
				size = { 420 50 }
				using = fontsize_large
				enabled = "[IsValid(MilitaryFormationChangeNamePopup.Confirm)]"
				onclick = "[Execute(MilitaryFormationChangeNamePopup.Confirm)]"
				tooltip = "[GetDesc(MilitaryFormationChangeNamePopup.Confirm)]"
				onclick = "[PopupManager.HideMilitaryFormationChangeName]"
				using = default_content_fade

				flowcontainer = {
					parentanchor = center

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = center|nobaseline
						text = "CONFIRM"
					}
				}
			}
		}
		
		blockoverride "bottom_margin"
		{
			margin_bottom = 50
		}
	}
}

types military_formation_panel_types
{
	type organization_bar = white_progressbar_vertical {
		size = { 6 24 }

		blockoverride "values" {
			min = 0
			max = 1
			block "organization_value" {
			}
		}
		blockoverride "color" {
			block "organization_color" {
			}
		}
	}
	
	# placeholder
	type smol_combat_unit = widget
	{
		size = { 245 70 }

		background = {
			using = entry_bg_unit
			alpha = 0.5
		}

		### REMOVE UNIT
		button_icon_round_action = {
			parentanchor = right
			position = { -5 5 }
			size = { 25 25 }
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			enabled = "[IsValid( MilitaryFormation.GetDisbandUnitCommand( CombatUnit.AccessSelf ) )]"
			onclick = "[Execute( MilitaryFormation.GetDisbandUnitCommand( CombatUnit.AccessSelf ) )]"
			tooltip = "DISBAND_COMBAT_UNIT"

			blockoverride "icon" {
				texture = "gfx/interface/buttons/button_icons/close.dds"
			}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = center
			spacing = 5
			margin_right = 20

			textbox = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				autoresize = yes
				maximumsize = { 200 -1 }
				raw_text = "@battalions! [CombatUnit.GetName]"
				tooltip = "[CombatUnit.GetName]"
				elide = right
				align = left|nobaseline
			}

			textbox = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				autoresize = yes
				maximumsize = { 200 -1 }
				raw_text = "@flotillas! [CombatUnit.GetName]"
				tooltip = "[CombatUnit.GetName]"
				elide = right
				align = left|nobaseline
			}

			flowcontainer = {
				direction = horizontal
				spacing = 20
				
				textbox = {
					parentanchor = vcenter
					autoresize = yes
					text = "[CombatUnit.GetOffenseFormatted]"
					tooltip = "COMBAT_UNIT_OFFENSE_BREAKDOWN"
					align = left|nobaseline
					using = text_icon_scale 
				}
				
				# Defense
				textbox = {
					parentanchor = vcenter
					autoresize = yes
					text = "[CombatUnit.GetDefenseFormatted]"
					tooltip = "COMBAT_UNIT_DEFENSE_BREAKDOWN"
					align = left|nobaseline
					using = text_icon_scale
				}

				# Manpower
				textbox = {
					parentanchor = vcenter
					autoresize = yes
					text = "COMBAT_UNIT_MANPOWER"
					tooltip = "COMBAT_UNIT_MANPOWER_BREAKDOWN"
					align = left|nobaseline
					using = text_icon_scale
				}

				# Morale
				morale_bar = {
					tooltip = "[CombatUnit.GetMoraleTooltip]"
					
					blockoverride "morale_value" {
						value = "[FixedPointToFloat( CombatUnit.GetMoraleRaw )]"
					}
					blockoverride "morale_color" {
						color = "[GetMoraleColorVec( CombatUnit.GetMoraleRaw )]"
					}
				}
			}
		}
	}

	type military_formation_panel = default_block_window_two_lines
    {
        name = "military_formation_panel"
        datacontext = "[FormationPanel.GetFormation]"

        blockoverride "window_header_name"
        {
            text = "[MilitaryFormation.GetName]"
        }
		blockoverride "window_header_name_line_two"
		{
			text = "MILITARY_FORMATION_SUBTITLE_FROM_COUNTRY"
		}

		blockoverride "pin_visibility" {
			visible = "[MilitaryFormation.GetCountry.IsLocalPlayer]"
		}

		blockoverride "pin_properties" {
			visible = "[MilitaryFormation.IsPinnedInOutliner]"
			onclick = "[MilitaryFormation.TogglePinInOutliner]"
			tooltip = "UNPIN_MILITARY_FORMATION"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(MilitaryFormation.IsPinnedInOutliner)]"
			onclick = "[MilitaryFormation.TogglePinInOutliner]"
			tooltip = "PIN_MILITARY_FORMATION"
		}

		blockoverride "goto_visibility" {}

		blockoverride "goto_properties" {
			### TODO add a function to zoom to the current location of the Military Formation + tooltip
			onclick = "[MilitaryFormation.ZoomToMapMarkerPosition]"
			tooltip = "ZOOM_TO_MILITARY_FORMATION"
			enabled = "[Not( MilitaryFormation.IsZoomingToMapMarkerPosition )]"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				size = { 30 30 }
				datacontext = "[MilitaryFormation.GetCountry]"
				tooltip = "GO_TO_BUTTON_COUNTRY"
				onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
			}
		}
		
		
		blockoverride "edit_visibility" {
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
		}
		
		blockoverride "edit_tooltip" {
			tooltip = "CHANGE_NAME"
		}
		
		blockoverride "edit_properties" {
			onclick = "[PopupManager.ShowMilitaryFormationChangeName(MilitaryFormation.Self)]"
			#enabled = yes
		}
		

		blockoverride "fixed_top"
		{
			top_illu = {
				datacontext = "[GetPlayer]"

				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_army.dds"
				}

				### FORMATION STATS


				flowcontainer = {
					parentanchor = center
					spacing = 10

					icon = {
						visible = "[MilitaryFormation.IsArmy]"
						size = { 70 70 }
						###TODO PRCAL-29039 CODE SUPPORT NEEDED TO GET THE CORRECT FORMATION IDENTITY
						texture = "gfx/interface/icons/military_icons/military_formation_identity_icons/army_01.dds"
					}

					icon = {
						visible = "[MilitaryFormation.IsFleet]"
						size = { 70 70 }
						###TODO PRCAL-29039 CODE SUPPORT NEEDED TO GET THE CORRECT FORMATION IDENTITY
						texture = "gfx/interface/icons/military_icons/military_formation_identity_icons/fleet_01.dds"
					}

					flowcontainer = {
						tooltip = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS_TOOLTIP"
						parentanchor = vcenter
						spacing = 7

						### ARMY ICON
						icon = {
							visible = "[MilitaryFormation.IsArmy]"
							size = { 30 30 }
							parentanchor = vcenter
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
						}

						### FLEET ICON
						icon = {
							visible = "[MilitaryFormation.IsFleet]"
							size = { 30 30 }
							parentanchor = vcenter
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
						}

						### NUMBER OF UNITS
						textbox = {
							parentanchor = vcenter
							using = fontsize_xl
							autoresize = yes
							align = center|nobaseline
							text = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS"
						}

						### ORGANIZATION BAR
						widget = {
							size = { 10 24 }
							parentanchor = vcenter
							tooltip = "MILITARY_FORMATION_ORGANIZATION_TOOLTIP"
							
							organization_bar = {
								size = { 6 24 }
								parentanchor = vcenter
								
								blockoverride "organization_value" {
									value = "[FixedPointToFloat( MilitaryFormation.GetOrganizationPercentage )]"
								}
								blockoverride "organization_color" {
									color = "[GetOrganizationColorVec( MilitaryFormation.GetOrganizationPercentage )]"
								}
							}
						}
					}
					
					widget = {
						size = { 15 0 }
					}

					### ATTRITION ICON
					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = left|nobaseline
						using = fontsize_xl
						tooltip = "[MilitaryFormation.GetAttritionRiskDesc]"
						
						text = "MILITARY_FORMATION_ATTRITION"
					}

					widget = {
						size = { 15 0 }
					}

					flowcontainer = {
						parentanchor = vcenter
						spacing = 10
						tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"

						### MORALE VALUE
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = left|nobaseline
							using = fontsize_xl
							text = "MILITARY_FORMATION_MORALE"
						}

						widget = {
							size = { 10 24 }
							parentanchor = vcenter
							
							### MORALE BAR
							morale_bar = {
								size = { 6 24 }
								parentanchor = vcenter
								
								blockoverride "morale_value" {
									value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
								}
								blockoverride "morale_color" {
									color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
								}
							}
						}
					}

					widget = {
						size = { 15 0 }
					}

					### EXPENSES
					textbox = {
						parentanchor = vcenter
						text = "MILITARY_FORMATION_EXPENSE"
						autoresize = yes
						align = left|nobaseline
						using = fontsize_xl
						tooltip = "MILITARY_FORMATION_EXPENSE_TOOLTIP_TAG"
					}
				}
			}

			tab_buttons = {
				# Information
				blockoverride "first_button" {
					text = "MILITARY_FORMATION_PANEL_INFORMATION_TAB"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "MILITARY_FORMATION_PANEL_INFORMATION_TAB"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "MILITARY_FORMATION_PANEL_INFORMATION_TAB_SELECTED"
				}
					
				# Mobilization
				blockoverride "second_button" {
					text = "MILITARY_FORMATION_PANEL_MOBILIZATION_TAB"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "MILITARY_FORMATION_PANEL_MOBILIZATION_TAB"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('mobilization')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[And(Not(IsDataModelEmpty(MilitaryFormation.GetMobilizationOptions)),InformationPanel.IsTabSelected('mobilization'))]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[And(Not(IsDataModelEmpty(MilitaryFormation.GetMobilizationOptions)),Not(InformationPanel.IsTabSelected('mobilization')))]"
				}
				blockoverride "second_button_selected" {
					text = "MILITARY_FORMATION_PANEL_MOBILIZATION_TAB_SELECTED"
				}		
				
				# Modifiers
				blockoverride "third_button" {
					text = "MILITARY_FORMATION_PANEL_MODIFIERS_TAB"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "MILITARY_FORMATION_PANEL_MODIFIERS_TAB"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('modifiers')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('modifiers')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('modifiers') )]"
				}
				blockoverride "third_button_selected" {
					text = "MILITARY_FORMATION_PANEL_MODIFIERS_TAB_SELECTED"
				}		
			}
		}
		
		blockoverride "scrollarea_content"
		{
			military_formation_panel_overview_content = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
			}

			military_formation_panel_mobilization_content = {
				visible = "[InformationPanel.IsTabSelected('mobilization')]"
				using = default_content_fade
			}

			modifier_list = {
				visible = "[InformationPanel.IsTabSelected('modifiers')]"
				using = default_content_fade
			}
		}

		### BOTTOM PART
		blockoverride "fixed_bottom"
        {
			military_formation_panel_default_footer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
			}
        }
    }
	
	type military_formation_panel_overview_content = flowcontainer {
		direction = vertical
		using = default_list_position
		spacing = 10

		### COMMANDERS
		default_header = {
			using = default_fade_in_out

			blockoverride "text" {
				text = "MILITARY_FORMATION_COMMANDERS"
			}
		}

		### If not Player and no commanders - Show empty state
		empty_state = {
			blockoverride "visible" {
				visible = "[And(IsDataModelEmpty(MilitaryFormation.GetCommanders), Not(MilitaryFormation.GetCountry.IsPlayer))]"
			}
			blockoverride "text" {
				text = "NO_COMMANDERS_IN_MILITARY_FORMATION"
			}
		}

		### If not Player - Only show commanders
		dynamicgridbox = {
			visible = "[And( Not(MilitaryFormation.GetCountry.IsPlayer), Not(IsDataModelEmpty(MilitaryFormation.GetCommanders)))]"
			datamodel = "[MilitaryFormation.GetCommanders]"
			parentanchor = hcenter
			datamodel_wrap = "[GetDefine('NMilitary','MAX_NUM_COMMANDERS_PER_FORMATION')]"
			flipdirection = yes

			item = {
				widget = {
					size = { 120 110 }

					### COMMANDER
					military_formation_commander = {
						visible = "[Character.IsValid]"
					}
				}
			}
		}

		### If Player - Show commanders + extra slot
		dynamicgridbox = {
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			datamodel = "[MilitaryFormation.GetCommandersWithRecruitableSlot]"
			parentanchor = hcenter
			datamodel_wrap = "[GetDefine('NMilitary','MAX_NUM_COMMANDERS_PER_FORMATION')]"
			flipdirection = yes

			item = {
				widget = {
					size = { 120 110 }

					### COMMANDER
					military_formation_commander = {
						visible = "[Character.IsValid]"
					}

					### RECRUIT GENERAL
					add_character_button = {
						visible = "[And(And(Not(Character.IsValid), MilitaryFormation.IsArmy), MilitaryFormation.GetCountry.IsPlayer)]"
						size = { 110 110 }
						parentanchor = center
						
						blockoverride "tooltip" {
							tooltip = "RECRUIT_CHARACTER_GENERAL"
						}

						blockoverride "onclick" {
							onclick = "[PopupManager.ToggleRecruitFormationGeneral( MilitaryFormation.Self )]"
						}
					}

					### RECRUIT ADMIRAL
					add_character_button = {
						visible = "[And(And(Not(Character.IsValid), MilitaryFormation.IsFleet), MilitaryFormation.GetCountry.IsPlayer)]"
						size = { 110 110 }
						parentanchor = center

						blockoverride "tooltip" {
							tooltip = "RECRUIT_CHARACTER_ADMIRAL"
						}

						blockoverride "onclick" {
							onclick = "[PopupManager.ToggleRecruitFormationAdmiral( MilitaryFormation.Self )]"
						}
					}

				}
			}
		}

		flowcontainer = {
			visible = "[IsDataModelEmpty(MilitaryFormation.GetCommandersWithRecruitableSlot)]"
			parentanchor = hcenter
			direction = vertical
			spacing = 5

			textbox = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = hcenter
				align = hcenter|nobaseline
				autoresize = yes
				using = fontsize_large
				using = look_at_me_text_animation
				text = "MILITARY_FORMATION_RECRUIT_GENERAL"
			}

			textbox = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = hcenter
				align = hcenter|nobaseline
				autoresize = yes
				using = fontsize_large
				using = look_at_me_text_animation
				text = "MILITARY_FORMATION_RECRUIT_ADMIRAL"
			}

			### RECRUIT GENERAL
			add_character_button = {
				visible = "[MilitaryFormation.IsArmy]"
				size = { 110 110 }
				parentanchor = hcenter

				blockoverride "tooltip" {
					tooltip = "RECRUIT_CHARACTER_GENERAL"
				}

				blockoverride "onclick" {
					onclick = "[PopupManager.ToggleRecruitFormationGeneral( MilitaryFormation.Self )]"
				}
			}

			### RECRUIT ADMIRAL
			add_character_button = {
				visible = "[MilitaryFormation.IsFleet]"
				size = { 110 110 }
				parentanchor = hcenter

				blockoverride "tooltip" {
					tooltip = "RECRUIT_CHARACTER_ADMIRAL"
				}

				blockoverride "onclick" {
					onclick = "[PopupManager.ToggleRecruitFormationAdmiral( MilitaryFormation.Self )]"
				}
			}
		}

		### UNIT RECRUITMENT
		default_header = {
			using = default_fade_in_out

			blockoverride "text" {
				text = "MILITARY_FORMATION_UNITS_RECRUITMENT"
			}
		}

		dynamicgridbox = {
			parentanchor = hcenter
			flipdirection = yes
			datamodel = "[MilitaryFormation.GetEligibleGroups]"

			item = {
				widget = {
					size = { 182 280 }

					military_formation_unit_type_default = {}
				}
			}
		}

		### UNIT DETAILS

		default_header = {
			using = default_fade_in_out

			blockoverride "text" {
				text = "MILITARY_FORMATION_UNITS"
			}
		}

		dynamicgridbox = {
			parentanchor = hcenter

			datamodel = "[MilitaryFormation.GetEligibleGroups]"

			item = {
				flowcontainer = {
					margin = { 0 5 }

					military_formation_unit_type_group = {
						visible = "[GreaterThan_int32(MilitaryFormation.GetNumCombatUnitsInGroup(CombatUnitGroup.Self), '(int32)0')]"
					}
				}
			}
		}
	}

	type military_formation_commander_medium = widget {
		size = { 100% 100% }

		character_portrait_medium = {
			parentanchor = center
			using = tooltip_above

			blockoverride "highlight" {}
		}

		button_icon_round = {
			parentanchor = bottom
			tooltip = "CHANGE_COMMANDER_ORDER_TOOLTIP"

			blockoverride "size" {
				size = { 33 33 }
			}	
			
			blockoverride "icon_size" {
				size = { 75% 75% }
			}

			block "onclick" {
				onclick = "[RightClickMenuManager.ShowForSelectOrder(Character.AccessSelf, PdxGuiWidget.AccessSelf)]"
			}

			blockoverride "icon" {
				texture = "[Character.GetOrderType.GetTexture]"
			}			
		}
	}

	type military_formation_commander = widget {
		size = { 100% 100% }

		block "portrait" {
			character_portrait_large = {
				parentanchor = center
				using = tooltip_above

				blockoverride "highlight" {}
			}
		}

		button_icon_round = {
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			parentanchor = bottom
			tooltip = "CHANGE_COMMANDER_ORDER_TOOLTIP"

			blockoverride "size" {
				size = { 40 40 }
			}	
			
			blockoverride "icon_size" {
				size = { 75% 75% }
			}

			block "onclick" {
				onclick = "[RightClickMenuManager.ShowForSelectOrder(Character.AccessSelf, PdxGuiWidget.AccessSelf)]"
			}

			blockoverride "icon" {
				texture = "[Character.GetOrderType.GetTexture]"
			}			
		}

		icon = {
			visible = "[Not(MilitaryFormation.GetCountry.IsPlayer)]"
			parentanchor = bottom
			size = { 40 40 }
			tooltip = "COMMANDER_ORDER_TOOLTIP"
		}
	}

	type military_formation_unit_type_default = flowcontainer {
		direction = vertical
		#spacing = 5
		minimumsize = { 180 280 }
		maximumsize = { 180 280 }
		datamodel = "[MilitaryFormation.GetCombatUnitEntries]"
		
		using = entry_bg_fancy

		icon = {
			###TODO PRCAL-29465 set up properly scripted Unit Illustrations
			texture = "gfx/unit_illustrations/unit_battalion_line_infantry_european.dds"
			size = { 180 180 }
			using = frame_small_mask_top
		}

		unit_group_default_unit_button = {
			parentanchor = hcenter
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"

			blockoverride "size" {
				size = { 175 37 }
			}
		}

		# UNIT NUMBER

		flowcontainer = {
			direction = horizontal
			parentanchor = hcenter
			spacing = 5
			margin_top = 20

			### REMOVE UNITS
			button_icon_round_action = {
				visible = "[MilitaryFormation.GetCountry.IsPlayer]"
				size = { 30 30 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_DISBAND_DEFAULT_UNIT_TYPE_TOOLTIP"
				using = tooltip_above
				enabled = "[IsValid( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.AccessSelf) ) )]"
				onclick = "[Execute( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.AccessSelf) ) )]"

				blockoverride "icon" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}
			}

			widget = {
				size = { 90 35 }
				parentanchor = vcenter

				background = {
					using = entry_bg
				}

				textbox = {
					parentanchor = center
					position = { -2 0 }
					maximumsize = { 75 28 }
					elide = right
					autoresize = yes
					align = nobaseline
					using = fontsize_large
					fontsize_min = 12
					text = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS_DEFAULT_TYPE"
					#TODO PRCAL-29817 Tooltip is not working and needs to be fixed
					#tooltip = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS_TOOLTIP"
				}
			}

			### RECRUIT UNITS
			button_icon_round_map_interaction = {
				visible = "[MilitaryFormation.GetCountry.IsPlayer]"
				size = { 30 30 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_RECRUIT_DEFAULT_UNIT_TYPE_TOOLTIP"
				using = tooltip_above
				onclick = "[MilitaryFormation.OnClickRecruitCombatUnit( MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.AccessSelf) )]"

				blockoverride "icon" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}
			}
		}
	}

	type military_formation_unit_type_group = flowcontainer {
		direction = vertical
		spacing = 2
		margin_bottom = 10

		block "minimumsize" {
			minimumsize = { @panel_width 100 }
		}

		using = entry_bg_fancy

		background = {
			using = fade_right_entry_fancy_header_colored
			color = "[CombatUnitGroup.GetUIColor]"
			alpha = 0.12
		}

		### UNIT GROUP NAME HEADER

		flowcontainer = {
			spacing = 5

			block "content_margins" {
				margin_top = 10
				margin_left = 10
			}

			widget = {
				size = { @panel_width_minus_20 30 }

				textbox = {
					position = { 10 0 }
					parentanchor = left|vcenter
					autoresize = yes
					align = nobaseline
					using = fontsize_large
					text = "[CombatUnitGroup.GetName]"
				}

				textbox = {
					position = { -10 0 }
					parentanchor = right|vcenter
					autoresize = yes
					align = nobaseline
					text = "[MilitaryFormation.GetCombatUnitsTypeIcon] [MilitaryFormation.GetNumCombatUnitsInGroup(CombatUnitGroup.Self)|v]"
				}
			}
		}

		widget = {
			size = { 1 1 }
		}

		dynamicgridbox = {
			parentanchor = hcenter
			datamodel = "[MilitaryFormation.GetCombatUnitEntries]"

			item = {
				flowcontainer = {
					visible = "[MilitaryFormationUnitEntry.IsForGroup( CombatUnitGroup.Self )]"
					military_formation_combat_unit = {
						visible = "[GreaterThan_int32(MilitaryFormationUnitEntry.GetCurrentNumUnits, '(int32)0')]"
					}
				}
			}
		}
	}

	type military_formation_unit_type_group_small = flowcontainer {
		direction = vertical
		spacing = 5

		block "minimumsize" {
			minimumsize = { @panel_width 40 }
		}

		background = {
			using = paper_bg
			color = "[CombatUnitGroup.GetUIColor]"
		}

		flowcontainer = {
			spacing = 5

			block "content_margins" {
				margin = { 10 10 }
			}

			### COMBAT UNIT NAME HEADER
			widget = {
				size = { @panel_width_minus_20 40 }
				
				background = {
					using = dark_area
				}

				flowcontainer = {
					parentanchor = vcenter
					position = { 10 0 }
					spacing = 10

					textbox = {
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						text = "[CombatUnitGroup.GetName]"
						parentanchor = vcenter
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						text = "[MilitaryFormation.GetCombatUnitsTypeIcon] [MilitaryFormation.GetNumCombatUnitsInGroup(CombatUnitGroup.Self)|v]"
					}
				}


				flowcontainer = {
					parentanchor = right|vcenter
					position = { -10 0 }
					spacing = 10

					### DEFAULT UNIT
					unit_group_default_unit_button = {
						visible = "[MilitaryFormation.GetCountry.IsPlayer]"

						block "text_max_width" {
							max_width = 250
						}

						blockoverride "size" {
							size = { 250 40 }
						}
					}

					### RECRUIT UNITS
					button_icon_round_map_interaction = {
						visible = "[MilitaryFormation.GetCountry.IsPlayer]"
						size = { 30 30 }
						parentanchor = vcenter
						onclick = "[MilitaryFormation.OnClickRecruitCombatUnit( MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.AccessSelf) )]"
						tooltip = "MILITARY_FORMATION_RECRUIT_DEFAULT_UNIT_TYPE_TOOLTIP"

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/plus.dds"
						}
					}
				}
			}
		}
	}

	type unit_group_default_unit_button = button {
		using = default_button
		parentanchor = vcenter
		using = tooltip_above
		tooltip = "MILITARY_FORMATION_UNIT_GROUP_DEFAULT_UNIT_TOOLTIP"
		onclick = "[RightClickMenuManager.ShowForSetDefaultCombatUnitType(MilitaryFormation.AccessSelf, CombatUnitGroup.AccessSelf)]"

		textbox = {
			parentanchor = center
			align = nobaseline
			autoresize = yes
			elide = right
			fontsize_min = 14

			block "text_max_width" {
				max_width = 150
			}

			text = "[MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.AccessSelf).GetName]"
		}

		block "size" {
			size = { 172 45 }
		}
	}

	type default_unit_right_click_item = button {
		size = { 280 60 }
		using = default_button
		parentanchor = vcenter
		tooltip = "[CombatUnitType.GetDesc]"
		enabled = "[IsValid( MilitaryFormation.GetSetDefaultUnitTypeCommand( CombatUnitType.AccessSelf ) )]"
		onclick = "[Execute( MilitaryFormation.GetSetDefaultUnitTypeCommand( CombatUnitType.AccessSelf ) )]"
		onclick = "[RightClickMenuManager.Close]"

		flowcontainer = {
			margin_left = 10
			parentanchor = vcenter
			spacing = 10

			icon = {
				parentanchor = vcenter
				size = { 50 50 }
				###TODO PRCAL-29465 set up properly scripted Unit Illustrations
				texture = "gfx/unit_illustrations/unit_battalion_line_infantry_european.dds"
			}

			textbox = {
				align = nobaseline
				parentanchor = vcenter
				autoresize = yes
				text = "[CombatUnitType.GetName]"
				using = fontsize_large
				max_width = 250
				fontsize_min = 14
			}
		}
	}

	type default_unit_right_click_item_selected = widget {
		size = { 280 60 }
		parentanchor = vcenter
		tooltip = "[CombatUnitType.GetDesc]"


		background = {
			using = paper_bg
		}

		flowcontainer = {
			margin_left = 10
			parentanchor = vcenter
			spacing = 10

			icon = {
				parentanchor = vcenter
				size = { 50 50 }
				###TODO PRCAL-29465 set up properly scripted Unit Illustrations
				texture = "gfx/unit_illustrations/unit_battalion_line_infantry_european.dds"
			}

			textbox = {
				align = nobaseline
				parentanchor = vcenter
				autoresize = yes
				text = "[CombatUnitType.GetName]"
				using = fontsize_large
				max_width = 250
				elide = right
				fontsize_min = 14
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}

    type military_formation_panel_mobilization_content = flowcontainer {
        direction = vertical
        using = default_list_position
        margin_top = 5
        spacing = 10

        ### MOBILIZATION SUMMARY

        ### DROPDOWN/EXPAND
		section_header_button = {
			parentanchor = left
			size = { @panel_width 38 }

			blockoverride "left_text" {
				text = "MOBILIZATION_SUMMARY_HEADER"
			}

			### PRCAL-29404 TODO Needs support for Mobilization Options to be grouped and categorised so the droplist can work.

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( 'mobilization_summary' )]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists( 'mobilization_summary' ))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists( 'mobilization_summary' )]"
			}
		}

        flowcontainer = {
        	direction = vertical
        	parentanchor = hcenter
        	spacing = 5
        	datamodel = "[MilitaryFormation.GetMobilizationOptions]"

			### MOBILIZATION EFFECTS

			flowcontainer = {
				visible = "[GetVariableSystem.Exists( 'mobilization_summary' )]"
				direction = vertical
				minimumsize = { @panel_width_minus_20 40 }
				parentanchor = hcenter
				spacing = 3
				margin = { 10 0 }
				margin_bottom = 20

				background = {
					using = entry_bg
				}

				### MOBILIZATION EFFECTS

				textbox = {
					using = fontsize_large
					size = { @panel_width_minus_20 40 }
					fontsize_min = 12
					text = "MOBILZATION_SUMMARY_EFFECTS_HEADER"
					align = left|vcenter
					elide = right
				}

				divider_clean = {
					size = { @panel_width_minus_20 2 }
				}

				textbox = {
					align = left|vcenter
					autoresize = yes
					max_width = @panel_width_minus_20
					fontsize_min = 12
					multiline = yes
					elide = right

					text = "[MilitaryFormation.GetMobilizationModifier.GetDesc]"
					margin_left = 10
				}
			}

			### MOBILIZATION COSTS

			flowcontainer = {
				visible = "[GetVariableSystem.Exists( 'mobilization_summary' )]"
				direction = vertical
				minimumsize = { @panel_width_minus_20 40 }
				parentanchor = hcenter
				spacing = 3
				margin = { 10 0 }
				margin_bottom = 20

				background = {
					using = entry_bg
				}

				widget = {
					parentanchor = top
					size = { @panel_width_minus_20 40 }

					textbox = {
						using = fontsize_large
						fontsize_min = 12
						parentanchor = left|vcenter
						position = { 10 0 }
						autoresize = yes
						align = left|vcenter
						elide = right
						text = "MOBILIZATION_SUMMARY_CONSUMPTION_HEADER"
					}

					textbox = {
						fontsize_min = 12
						parentanchor = right|vcenter
						position = { -10 0 }
						autoresize = yes
						align = right|vcenter
						elide = right
						raw_text = "Total: [MilitaryFormation.GetEstimatedMobilizationCostFormatted]"
					}
				}

				divider_clean = {
					size = { @panel_width_minus_20 2 }
				}

				textbox = {
					align = left|vcenter
					autoresize = yes
					max_width = @panel_width_minus_20
					fontsize_min = 12
					multiline = yes
					elide = right
					text = "[MilitaryFormation.GetEstimatedMobilizationCostDesc]"
					margin_left = 10
				}	
			}
        }

		### MOBILIZATION OPTIONS

		default_header = {
			using = default_fade_in_out

			blockoverride "text" {
				text = "MOBILIZATION_OPTIONS_HEADER"
			}
		}

		### NON-GROUPED MOBILIZATION OPTIONS
		### this is what we're doing for the beta, as we don't have time to introduce groups to the database right now:
		flowcontainer = {
            direction = vertical
            datamodel = "[MilitaryFormation.GetMobilizationOptions]"

            item = {
                flowcontainer = {
                    minimumsize = { @panel_width 120 }
                    parentanchor = hcenter
                    alpha = "[TransparentIfFalse(And(MobilizationOption.IsActivated(FormationPanel.GetFormation),MobilizationOption.IsPossible(FormationPanel.GetFormation)))]"

                    background = {
                        visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
                        using = paper_bg
                    }

                    icon = {
                        visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
                        using = highlighted_square_selection
                    }

                    background = {
                        visible = "[Not(MobilizationOption.IsActivated(FormationPanel.GetFormation))]"
                        using = entry_bg_simple
                    }

                    tooltipwidget = {
                        FancyTooltip_MobilizationOption = {}
                    }

                    flowcontainer = {
                        direction = vertical
                        parentanchor = hcenter|top
                        margin_top = 5
                        margin_bottom = 20

                        widget = {
                            size = { @panel_width_minus_10 60 }
                            parentanchor = hcenter

                            flowcontainer = {
                                minimumsize = { @panel_width_minus_20 -1 }
                                parentanchor = vcenter
                                spacing = 10
                                margin_left = 12

                                background = {
                                    using = fade_right_simple
                                }

                                icon = {
                                    size = { 38 38 }
                                    texture = "[MobilizationOption.GetTexture]"
                                    parentanchor = vcenter
                                }

                                textbox = {
                                    using = fontsize_large
                                    parentanchor = left|vcenter
                                    align = left|nobaseline
                                    text = "[MobilizationOption.GetNameNoFormatting]"
                                    autoresize = yes
                                    maximumsize = { 440 -1 }
                                    multiline = yes
                                }
                            }

                            widget = {
                                size = { 90 90 }
                                position = { -7 0 }
                                parentanchor = right|vcenter

                                icon = {
                                    visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
                                    parentanchor = right|vcenter
                                    size = { 70 70 }
                                    position = { 9 -2 }
                                    using = rotate_glow_blue
                                }

                                button_icon_round_action = {
                                    size = { 50 50 }
                                    enabled = "[IsValid(MobilizationOption.Toggle(FormationPanel.GetFormation))]"
                                    onclick = "[Execute(MobilizationOption.Toggle(FormationPanel.GetFormation))]"
                                    tooltip = "[MobilizationOption.GetTooltipWithToggleDesc(FormationPanel.GetFormation)]"
                                    parentanchor = right|vcenter

                                    icon = {
                                        visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
                                        size = { 30 30 }
                                        texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
                                        parentanchor = center
                                    }

                                    icon = {
                                        visible = "[Not(MobilizationOption.IsActivated(FormationPanel.GetFormation))]"
                                        size = { 30 30 }
                                        texture = "gfx/interface/icons/generic_icons/red_cross.dds"
                                        parentanchor = center
                                    }
                                }
                            }
                        }

                        container = {
                            minimumsize = { @panel_width_minus_10 -1 }
                            parentanchor = top

                            textbox = {
                                autoresize = yes
                                parentanchor = left
                                position = { 15 5 }
                                max_width = 250
                                fontsize_min = 12
                                text = "[MobilizationOption.GetUnitModifier.GetDesc]"
                            }

                            textbox = {
                                visible = "[MobilizationOption.GetUnitModifier.IsEmpty]"
                                autoresize = yes
                                parentanchor = left
                                position = { 15 5 }
                                max_width = 250
                                fontsize_min = 12
                                text = "mobilization_option_basic_supplies_can_be_turned_off_tt"
                                alpha = 0.5
                            }

                            textbox = {
                                autoresize = yes
                                parentanchor = right
                                position = { -15 5 }
                                max_width = 250
                                fontsize_min = 12
                                text = "[MobilizationOption.GetUpkeepModifier.GetDesc]"

                                background = {
                                    margin = { 10 5 }
                                    using = entry_bg_simple
                                    alpha = 0.7
                                }
                            }
                        }
                    }
                }
            }
        }

		### PRCAL-29404 TODO Add this dynamicgridbox once the datamodel is in
		dynamicgridbox = {
			visible = no ### TODO: Mobilization Groups are hidden for now because they don't exist in the database yet.
			parentanchor = hcenter
			### PRCAL-29404 TODO Create a datamodel for all groups of Mobilization Options
			#datamodel = "[MilitaryFormation.GetMobilizationOptionGroups]"
			datamodel = "[DataModelRepeatedItem('(int32)4')]"

			item = {
				flowcontainer = {
					margin = { 0 5 }

					mobilization_option_group = {}
				}
			}
		}
	}

	type mobilization_option_group = flowcontainer {
		direction = vertical

		### DROPDOWN/EXPAND
		section_header_button = {
			size = { @panel_width_minus_10 38 }

			blockoverride "onclick" {
				### PRCAL-29404 TODO Create function to get unique ID for each Mobilization Option Group so that each dropdown can open independently
				#onclick = "[GetVariableSystem.Toggle( Concatenate( 'mobilization_option_group_', MobilizationOptionGroup.GetIDString ) )]"
				onclick = "[GetVariableSystem.Toggle(  'mobilization_option_group_')]"
			}
			
			blockoverride "onclick_showmore" {
				### PRCAL-29404 TODO Create function to get unique ID for each Mobilization Option Group so that each dropdown can open independently
				#visible = "[Not(GetVariableSystem.Exists( Concatenate( 'mobilization_option_group_', MobilizationOptionGroup.GetIDString ) )]"
				visible = "[Not(GetVariableSystem.Exists( 'mobilization_option_group_' ))]"
			}

			blockoverride "onclick_showless" {
				### PRCAL-29404 TODO Create function to get unique ID for each Mobilization Option Group so that each dropdown can open independently
				#visible = "[GetVariableSystem.Exists( Concatenate( 'mobilization_option_group_', MobilizationOptionGroup.GetIDString ) )]"
				visible = "[GetVariableSystem.Exists( 'mobilization_option_group_' )]"
			}

			### LEFT SIDE

			flowcontainer = {
				parentanchor = vcenter
				margin_left = 35
				spacing = 10

				textbox = {
					parentanchor = vcenter
					elide = right
					align = left|nobaseline
					autoresize = yes
					### PRCAL-29404 TODO Needs support for Mobilization Options to be grouped and categorised so the group name can appear as the droplist title.
					text = "MOBILIZATION_OPTION_GROUP_NAME"
				}
			}

			### RIGHT SIDE

			flowcontainer = {
				parentanchor = right|vcenter
				spacing = 10
				margin_right = 10

				### ICONS

				dynamicgridbox = {
					parentanchor = vcenter
					### PRCAL-29404 TODO Add data model to get the groups Mobilization options
					#datamodel = "[MobilizationOptionGroup.GetMobilizationOptions]"
					datamodel = "[MilitaryFormation.GetMobilizationOptions]"
					flipdirection = yes

					item = {
						widget = {
							size = { 28 25 }
							visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"

							icon = {
								parentanchor = center
								size = { 25 25 }
								### PRCAL-29404 TODO Needs code support to display icons of Options which are activated
								texture = "[MobilizationOption.GetTexture]"
							}
						}
					}
				}

				### UPKEEP

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					### PRCAL-29404 TODO Add Total Upkeep Cost for this group
					text = "MOBILIZATION_OPTION_GROUP_UPKEEP_COST"
				}
			}
		}

		flowcontainer = {
			direction = vertical
			### PRCAL-29404 TODO Add data model to get the groups Mobilization options
			#datamodel = "[MobilizationOptionGroup.GetMobilizationOptions]"
			datamodel = "[MilitaryFormation.GetMobilizationOptions]"

			### PRCAL-29404 TODO Create function to get unique ID for each Mobilization Option Group so that each dropdown can open independently
			#visible = "[GetVariableSystem.Exists( Concatenate( 'mobilization_option_group_', MobilizationOptionGroup.GetIDString ) )]"
			visible = "[GetVariableSystem.Exists( 'mobilization_option_group_' )]"

			item = {
				flowcontainer = {
					minimumsize = { @panel_width 120 }
					parentanchor = hcenter
					alpha = "[TransparentIfFalse(And(MobilizationOption.IsActivated(FormationPanel.GetFormation),MobilizationOption.IsPossible(FormationPanel.GetFormation)))]"

					background = {
						visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
						using = paper_bg
					}

					icon = {
						visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
						using = highlighted_square_selection
					}

					background = {
						visible = "[Not(MobilizationOption.IsActivated(FormationPanel.GetFormation))]"
						using = entry_bg_simple
					}

					tooltipwidget = {
						FancyTooltip_MobilizationOption = {}
					}

					flowcontainer = {
						direction = vertical
						parentanchor = hcenter|top
						margin_top = 5
						margin_bottom = 20

						widget = {
							size = { @panel_width_minus_10 60 }
							parentanchor = hcenter

							flowcontainer = {
								minimumsize = { @panel_width_minus_20 -1 }
								parentanchor = vcenter
								spacing = 10
								margin_left = 12

								background = {
									using = fade_right_simple
								}

								icon = {
									size = { 38 38 }
									texture = "[MobilizationOption.GetTexture]"
									parentanchor = vcenter
								}

								textbox = {
									using = fontsize_large
									parentanchor = left|vcenter
									align = left|nobaseline
									text = "[MobilizationOption.GetNameNoFormatting]"
									autoresize = yes
									maximumsize = { 440 -1 }
									multiline = yes
								}
							}

							widget = {
								size = { 90 90 }
								position = { -7 0 }
								parentanchor = right|vcenter

								icon = {
									visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
									parentanchor = right|vcenter
									size = { 70 70 }
									position = { 9 -2 }
									using = rotate_glow_blue
								}

								button_icon_round_action = {
									size = { 50 50 }
									enabled = "[IsValid(MobilizationOption.Toggle(FormationPanel.GetFormation))]"
									onclick = "[Execute(MobilizationOption.Toggle(FormationPanel.GetFormation))]"
									tooltip = "[MobilizationOption.GetTooltipWithToggleDesc(FormationPanel.GetFormation)]"
									parentanchor = right|vcenter

									icon = {
										visible = "[MobilizationOption.IsActivated(FormationPanel.GetFormation)]"
										size = { 30 30 }
										texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
										parentanchor = center
									}

									icon = {
										visible = "[Not(MobilizationOption.IsActivated(FormationPanel.GetFormation))]"
										size = { 30 30 }
										texture = "gfx/interface/icons/generic_icons/red_cross.dds"
										parentanchor = center
									}
								}
							}
						}

						container = {
							minimumsize = { @panel_width_minus_10 -1 }
							parentanchor = top

							textbox = {
								autoresize = yes
								parentanchor = left
								position = { 15 5 }
								max_width = 250
								fontsize_min = 12
								text = "[MobilizationOption.GetUnitModifier.GetDesc]"
							}

							textbox = {
								visible = "[MobilizationOption.GetUnitModifier.IsEmpty]"
								autoresize = yes
								parentanchor = left
								position = { 15 5 }
								max_width = 250
								fontsize_min = 12
								text = "mobilization_option_basic_supplies_can_be_turned_off_tt"
								alpha = 0.5
							}

							textbox = {
								autoresize = yes
								parentanchor = right
								position = { -15 5 }
								max_width = 250
								fontsize_min = 12
								text = "[MobilizationOption.GetUpkeepModifier.GetDesc]"

								background = {
									margin = { 10 5 }
									using = entry_bg_simple
									alpha = 0.7
								}
							}
						}
					}
				}
            }
        }
	}

	type military_formation_combat_unit_small = flowcontainer {
		direction = vertical
		datacontext = "[MilitaryFormationUnitEntry.GetUnitType]"
		spacing = 5

		block "minimumsize" {
			minimumsize = { @panel_width 40 }
		}

		background = {
			using = paper_bg
			color = "[CombatUnitType.GetGroup.GetUIColor]"
		}

		flowcontainer = {
			spacing = 5

			block "content_margins" {
				margin = { 10 10 }
			}

			### COMBAT UNIT NAME HEADER
			widget = {
				size = { @panel_width_minus_20 40 }
				
				background = {
					using = dark_area
				}

				textbox = {
					position = { 10 0 }
					autoresize = yes
					align = nobaseline
					using = fontsize_large
					text = "[CombatUnitType.GetName]"
					parentanchor = vcenter
				}

				flowcontainer = {
					direction = horizontal
					parentanchor = vcenter|right
					position = { -10 0 }

					### REMOVE UNITS
					button_icon_round_action = {
						visible = "[MilitaryFormation.GetCountry.IsPlayer]"
						size = { 30 30 }
						parentanchor = vcenter
						tooltip = "MILITARY_FORMATION_REMOVE_UNIT_TOOLTIP"
						enabled = "[IsValid( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormationUnitEntry.GetUnitType ) )]"
						onclick = "[Execute( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormationUnitEntry.GetUnitType ) )]"

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/minus.dds"
						}
					}

					widget = { size = { 15 15 } }

					textbox = {
						visible = "[MilitaryFormation.IsArmy]"
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						text = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS"
						tooltip = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS_TOOLTIP"
					}

					textbox = {
						visible = "[MilitaryFormation.IsFleet]"
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						text = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS"
						tooltip = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS_TOOLTIP"
					}

					widget = { size = { 15 15 } }

					### RECRUIT UNITS
					button_icon_round_map_interaction = {
						visible = "[MilitaryFormation.GetCountry.IsPlayer]"
						size = { 30 30 }
						parentanchor = vcenter
						tooltip = "MILITARY_FORMATION_RECRUIT_UNIT_TOOLTIP"
						onclick = "[MilitaryFormation.OnClickRecruitCombatUnit( MilitaryFormationUnitEntry.GetUnitType )]"

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/plus.dds"
						}
					}
				}
			}
		}
	}

	type military_formation_unit_group_simple = widget {
		datacontext = "[MilitaryFormationUnitEntry.GetUnitType]"
		size = { 130 170 }

		flowcontainer = {
			direction = vertical
			minimumsize = { 120 160 }
			margin_top = 7
			margin_bottom = 5
			spacing = 2

			background = {
				using = entry_bg_simple
			}

			background = {
				using = fade_top_entry_header_colored
				color = "[MilitaryFormationUnitEntry.GetUnitType.GetGroup.GetUIColor]"
				alpha = 0.15
			}

			widget = {
				size = { 105 105 }
				parentanchor = hcenter

				background = {
					# placeholder
					texture = "gfx/unit_illustrations/unit_battalion_line_infantry_european.dds"

					modify_texture = {
						using = simple_frame_mask
					}
				}

				icon = {
					parentanchor = hcenter
					using = simple_frame
					size = { 100% 100% }
				}
			}

			textbox = {
				raw_text = "[CombatUnitType.GetName]"
				parentanchor = hcenter
				autoresize = yes
				fontsize_min = 14
				minimumsize = { 105 -1 }
				maximumsize = { 105 -1 }
				elide = right
				align = nobaseline|hcenter
			}

			textbox = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline|hcenter
				using = fontsize_large
				fontsize_min = 12
				max_width = 100
				elide = right
				text = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS"
				tooltip = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS_TOOLTIP"
			}

			textbox = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline|hcenter
				using = fontsize_large
				fontsize_min = 12
				max_width = 100
				elide = right
				text = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS"
				tooltip = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS_TOOLTIP"
			}
		}
	}

	type military_formation_combat_unit = flowcontainer {
		direction = vertical
		datacontext = "[MilitaryFormationUnitEntry.GetUnitType]"
		margin = { 0 10 }

		background = {
			using = dark_area
			alpha = 0.4

			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_right.dds"
				blend_mode = alphamultiply
				alpha = 1
			}
		}

		background = {
			using = simple_frame
		}

		block "minimumsize" {
			minimumsize = { @panel_width_minus_30 -1 }
		}

		flowcontainer = {
			parentanchor = left
			margin_left = 10

			icon = {
				parentanchor = vcenter
				# placeholder
				texture = "gfx/unit_illustrations/unit_battalion_line_infantry_european.dds"
				size = { 42 42 }
			}

			section_header_button = {
				visible = "[GreaterThan_int32(MilitaryFormationUnitEntry.GetCurrentNumUnits, '(int32)0')]"
				using = default_fade_in_out

				block "section_header_size" {
					size = { 200 40 }
				}

				blockoverride "arrow_position" {
					position = { 2 0 }
					parentanchor = left|vcenter
				}

				blockoverride "left_textbox_margin_left" {
					margin_left = 30
				}

				blockoverride "left_text" {
					raw_text = "[CombatUnitType.GetName]"
				}
				
				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle( MilitaryFormationUnitEntry.GetIDString )]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists( MilitaryFormationUnitEntry.GetIDString ))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists( MilitaryFormationUnitEntry.GetIDString )]"
				}
			}

			flowcontainer = {
				direction = horizontal
				parentanchor = vcenter
				spacing = 5

				### REMOVE UNITS
				button_icon_round_action = {
					visible = "[MilitaryFormation.GetCountry.IsPlayer]"
					size = { 35 35 }
					parentanchor = vcenter
					tooltip = "MILITARY_FORMATION_REMOVE_UNIT_TOOLTIP"
					using = tooltip_above
					enabled = "[IsValid( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormationUnitEntry.GetUnitType ) )]"
					onclick = "[Execute( MilitaryFormation.GetDisbandUnitTypeCommand( MilitaryFormationUnitEntry.GetUnitType ) )]"

					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/minus.dds"
					}
				}

				widget = {
					size = { 130 40 }
					parentanchor = vcenter

					background = {
						using = entry_bg
					}

					textbox = {
						visible = "[MilitaryFormation.IsArmy]"
						parentanchor = center
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						fontsize_min = 12
						max_width = 100
						text = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS"
						tooltip = "MILITARY_FORMATION_NUMBER_OF_BATTALIONS_TOOLTIP"
					}

					textbox = {
						visible = "[MilitaryFormation.IsFleet]"
						parentanchor = center
						autoresize = yes
						align = nobaseline
						using = fontsize_large
						text = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS"
						tooltip = "MILITARY_FORMATION_NUMBER_OF_FLOTILLAS_TOOLTIP"
					}
				}

				### RECRUIT UNITS
				button_icon_round_map_interaction = {
					visible = "[MilitaryFormation.GetCountry.IsPlayer]"
					size = { 35 35 }
					parentanchor = vcenter
					tooltip = "MILITARY_FORMATION_RECRUIT_UNIT_TOOLTIP"
					using = tooltip_above
					onclick = "[MilitaryFormation.OnClickRecruitCombatUnit( MilitaryFormationUnitEntry.GetUnitType )]"

					blockoverride "icon" {
						texture = "gfx/interface/buttons/button_icons/plus.dds"
					}
				}

				### UPGRADE UNITS
				button_icon_round_action = {
					blockoverride "icon_size" { size = { 75% 75% } }
					parentanchor = vcenter
					size = { 35 35 }
					tooltip = "MILITARY_FORMATION_UPGRADE_UNIT_TOOLTIP"
					using = tooltip_above
					#onclick = "[MilitaryFormation.OnClickUpgradeCombatUnit( MilitaryFormationUnitEntry.GetUnitType )]"

					blockoverride "icon" {
						texture = "gfx/interface/icons/generic_icons/up_up.dds"
					}
				}
			}
		}

		widget = {
			size = { 1 1 }
		}


		dynamicgridbox = {
			visible = "[GetVariableSystem.Exists( MilitaryFormationUnitEntry.GetIDString )]"
			flipdirection = yes
			parentanchor = hcenter
			datamodel_wrap = 2
			datamodel = "[MilitaryFormationUnitEntry.GetCombatUnits]"

			background = {
				using = dark_area
			}

			item = {

				widget = {
					size = { 250 80 }

					smol_combat_unit = {
						parentanchor = center
					}
				}
			}
		}
	}

	type military_formation_panel_default_footer = flowcontainer {
		minimumsize = { @panel_width_plus_14 -1 }
		direction = vertical
		spacing = 5
		using = default_fade_in_out

		divider_clean = {
			size = { @panel_width_plus_14 3 }
		}

		background = {
			using = dark_area
		}

		widget = {
			size = { 5 2 }
		}

		textbox = {
			parentanchor = hcenter
			autoresize = yes
			align = nobaseline
			text = "[MilitaryFormation.GetFormationStatusDesc]"
			maximumsize = { @panel_width -1 }
			multiline = yes
		}
			
		flowcontainer = {
			visible = "[And(MilitaryFormation.IsArmy, MilitaryFormation.GetCountry.IsPlayer)]"
			parentanchor = hcenter
			spacing = 3

			military_formation_mobilize_button = {

				blockoverride "size" {
					size = { 250 60 }
				}
				blockoverride "button_size" {
					size = { 90% 75% }
				}
				blockoverride "mobilization_icon_size" {
					size = { 55 55 }
				}
			}

			widget = {
				size = { 20 5 }
			}

			# station
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 55 55 }
				parentanchor = vcenter
				tooltip = "STATION_MILITARY_FORMATION_TOOLTIP"
				onclick = "[MilitaryFormation.OnStationClicked]"
				enabled = "[MilitaryFormation.CanStation]"
				using = tooltip_above

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/alert_icons/has_army_in_reserve.dds"
				}
			}

			# deploy to front
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 55 55 }
				parentanchor = vcenter
				tooltip = "DEPLOY_MILITARY_FORMATION_TO_FRONT_TOOLTIP"
				onclick = "[MilitaryFormation.OnDeployToFrontClicked]"
				enabled = "[And( MilitaryFormation.CanDeployToFront, MilitaryFormation.IsMobilized )]"
				using = tooltip_above

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/commander_order_icons/unused/move.dds"
				}
			}
			
			# naval invasion
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 55 55 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_NAVAL_INVASION_TOOLTIP"
				onclick = "[MilitaryFormation.OnNavalInvasionClicked]"
				using = tooltip_above
				enabled = "[MilitaryFormation.CanNavallyInvade]"

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/commander_order_icons/naval_invasion.dds"
				}
			}

			### TRANSFER UNITS
			button_icon_round = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 55 55 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_TRANSFER_UNIT_TOOLTIP"
				using = tooltip_above
				onclick = "[PopupManager.ShowTransferFormation( MilitaryFormation.AccessSelf )]"

				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/ongoing_action_both.dds"
				}
			}
		}

		flowcontainer = {
			visible = "[And(MilitaryFormation.IsFleet, MilitaryFormation.GetCountry.IsPlayer)]"
			spacing = 10
			parentanchor = hcenter

			# station
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 60 60 }
				parentanchor = vcenter
				tooltip = "STATION_MILITARY_FORMATION_TOOLTIP"
				onclick = "[MilitaryFormation.OnStationClicked]"
				enabled = "[MilitaryFormation.CanStation]"

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/alert_icons/has_army_in_reserve.dds"
				}
			}

			# deploy to sea node
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 60 60 }
				parentanchor = vcenter
				tooltip = "DEPLOY_MILITARY_FORMATION_TO_SEA_NODE_TOOLTIP"
				onclick = "[MilitaryFormation.OnDeployToSeaNodeClicked]"
				enabled = "[MilitaryFormation.CanDeployToSeaNode]"

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/generic_icons/unused/sea_region_mm_battle.dds"
				}
			}

			# naval invasion
			button_icon_round_map_interaction = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 60 60 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_NAVAL_INVASION_TOOLTIP"
				onclick = "[MilitaryFormation.OnNavalInvasionClicked]"
				using = tooltip_above
				enabled = "[MilitaryFormation.CanNavallyInvade]"

				blockoverride "icon" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/commander_order_icons/naval_invasion.dds"
				}
			}

			### TRANSFER UNITS
			button_icon_round = {
				blockoverride "icon_size" { size = { 75% 75% } }
				size = { 60 60 }
				parentanchor = vcenter
				tooltip = "MILITARY_FORMATION_TRANSFER_UNIT_TOOLTIP"
				using = tooltip_above
				onclick = "[PopupManager.ShowTransferFormation( MilitaryFormation.AccessSelf )]"

				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/ongoing_action_both.dds"
				}
			}
		}

		### Activate Conscripts
		button = {
			parentanchor = hcenter
			### TODO: REPLACE THIS WITH THE MILITARY FORMATION CONSCRIPT FUNCTION WHEN CODE SUPPORT IS IN
			#enabled = "[IsValid( GetPlayer.ActivateConscriptionCenters )]"

			### TODO: ADD THIS BACK IN WHEN CODE SUPPORT FOR THIS BUTTON IS IN AND REMOVE THE "VISIBLE = NO"
			#visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			visible = no
			using = default_button_action
			size = { 520 50 }
			using = fontsize_large
			using = default_content_fade
			### TODO: REPLACE THIS WITH THE MILITARY FORMATION FUNCTION WHEN CODE SUPPORT IS IN
			onclick = "[GetLensToolbar.ActivateOption('activate_conscription_centers_lens_option')]"
			tooltip = "[GetDesc( GetPlayer.ActivateConscriptionCenters )]"

			textbox = {
				text = "MILITARY_PANEL_ACTIVATE_CONSCRIPTS"
				align = center|nobaseline
				parentanchor = center
				margin_left = 55
				size = { 480 50 }
				fontsize_min = 14
				elide = right
			}

			conscription_icon_big = {
				parentanchor = left|vcenter
				position = { 4 0 }
			}
		}
	}

	type military_formation_mobilize_button = widget {

		block "size" {
			size = { 260 80 }
		}

		# Mobilize this army button
		button = {
			visible = "[Not(MilitaryFormation.IsMobilized)]"
			using = default_button_action
			using = commander_mobilize_button_sound
			parentanchor = right|vcenter
			enabled = "[IsValid( MilitaryFormation.Mobilize )]"
			onclick = "[Execute( MilitaryFormation.Mobilize )]"
			tooltip = "MOBILIZE_ARMY_TOOLTIP"
			using = tooltip_above

			block "button_size" {
				size = { 80% 75% }
			}

			textbox = {
				parentanchor = center
				text = "MOBILIZE_ARMY"
				autoresize = yes
				align = nobaseline

				block "text_position" {}
				
				block "fontsize" {
					using = fontsize_large
				}
			}
		}

		### IS MOBILIZING
		is_mobilizing_progressbar = {

			blockoverride "text_position" {
				position = { 8 0 }
			}
		}

		### IS MOBILIZED
		widget = {
			visible = "[MilitaryFormation.IsFullyMobilized]"
			parentanchor = right|vcenter

			block "button_size" {
				size = { 80% 75% }
			}

			background = {
				using = paper_bg
			}

			textbox = {
				parentanchor = center
				text = "MILITARY_FORMATION_IS_FULLY_MOBILIZED"
				autoresize = yes
				align = nobaseline

				block "text_position" {}

				block "fontsize" {
					using = fontsize_large
				}
			}

			icon = {
				using = highlighted_square_selection
			}
		}

		mobilization_icon_big = {
			parentanchor = vcenter

			block "mobilization_icon_size" {
				size = { 80 80 }
			}
		}

		# Demobilize button
		button_icon_cancel = {
			visible = "[MilitaryFormation.IsMobilized]"
			parentanchor = left|vcenter
			enabled = "[IsValid( MilitaryFormation.Demobilize )]"
			onclick = "[Execute( MilitaryFormation.Demobilize )]"
			tooltip = "DEMOBILIZE_ARMY_TOOLTIP"
			using = close_button_sound
			using = tooltip_above
			
			block "mobilization_icon_size" {
				size = { 70 70 }
			}
		}
	}
}

types mobilization 
{
	type is_mobilizing_progressbar = widget {
		visible = "[MilitaryFormation.IsMobilizing]"
		parentanchor = right|vcenter

		block "button_size" {
			size = { 80% 75% }
		}

		background = {
			using = default_bg_nofade
			margin = { -1 -1 }

			# Lighten color
			modify_texture = {
				visible = "[MilitaryFormation.IsFullyMobilized]"
				texture = "gfx/interface/backgrounds/white.dds" 
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = add
				alpha = 0.05
			}
		}

		# Mobilization progress, also used as lit frame
		progressbar_properties = {
			size = { 100% 100% }
			
			# Hide glow when bar is full
			blockoverride "glow_visible" { 
				visible = "[Not(MilitaryFormation.IsFullyMobilized)]"
			}

			blockoverride "glow_size" {
				size = { 310 100% }
			}

			blockoverride "values" {
				min = 0
				max = 1
				value = "[FixedPointToFloat( MilitaryFormation.GetMobilizationPercentage )]"
			}

			# Country color
			blockoverride "color" {
				color = "[MilitaryFormation.GetCountry.GetMapColor]"
			}

			# Unit frame with applied country colo
			blockoverride "progresstexture" {
				texture = "gfx/interface/backgrounds/entry_bg_unit.dds" 
				
				# Lighten color
				modify_texture = {
					texture = "gfx/interface/backgrounds/white.dds" 
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = add
					alpha = 0.5
				}
			}

			# White glow with applied country color
			blockoverride "glow" {
				texture = "gfx/interface/progressbar/progressbar_white_glow.dds"

				# Lighten color
				modify_texture = {
					texture = "gfx/interface/backgrounds/white.dds" 
					spriteType = Corneredstretched
					color = { 2.0 2.0 2.0 1.0 }
					spriteborder = { 0 0 }
					blend_mode = add
				}
			}	
			blockoverride "glow_alpha" {
				alpha = 0.4
			}
			blockoverride "glow_line" {
				texture = "gfx/interface/progressbar/progressbar_white_glow_line.dds"
				alpha = 1.0
			}

			# Remove elements
			blockoverride "frame" {}
			blockoverride "background" {
				background = {
					using = dark_area
				}
			}
			blockoverride "gradient" {}
		}

		block "textbox" {
			textbox = {
				parentanchor = center
				text = "MILITARY_FORMATION_IS_MOBILIZING"
				autoresize = yes
				align = nobaseline

				block "text_position" {}
				
				block "fontsize" {
					using = fontsize_large
				}
			}
		}
	}
}
