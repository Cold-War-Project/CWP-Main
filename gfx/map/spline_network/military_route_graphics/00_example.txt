### Used when military formations travel across the map
#
# Each similar part of the route will use one graphics type. (example split parts: the 'sea', 'rail' and 'road' parts of a formation moving across the map)

### Example
#
#	military_travel_graphics_type = {
#
#		# What this graphics type is valid for (can be multiple) - select zero or more
#		# Connection Development types: "undeveloped", "dirt_road", "hardened_road", "railway", "waterway", "canal"
#		valid_connections = { undeveloped railway }
#
#		# Special types (not directly connection development types) - select zero or more
#		# 	"docking": Water connection between port and harbor (small or zero length)
#		# 	"custom_land": Land connection outside of the travel network
#		# 	"custom_water": Water connection outside of the travel network
#		valid_special_types = { docking custom_water }
#
#		catchup_distance = 100				# If the travel movement animation is "behind" the actual location by this distance, multiply measured speed by `catchup_speed_multiplier` (minimum speed is `catchup_min_speed`)
#		catchup_speed_multiplier = 3		# "Faster" animation movement speed to catch up if behind a lot
#		catchup_min_speed = 3				# "Faster" animation movement speed to catch up if behind a lot
#
#		route_entities = {					# Route entities are entities that could be used to compose caravan
#			example_entity_1 = {			# Each entity corresponds to a number of entities that could be placed in specified position of the caravan
#				entity = "entity_1"			# Entity key that is specified in .asset files
#				position = 0				# Position defines the order in which entities will be position, if positions are the same random entity would be picked
#				entity_length = 3.0			# Entity length is the length used for placing entities on the route
#				possible = {}				# Trigger to determine if the entity is possible at all. Root scope is of type Country. Has `scope:military_formation`, and `scope:state` available. (state based on start of the route)
#				count = {}					# Count is scripted value to determine amount of entities placed. Root scope is of type Country.  Has `scope:military_formation`, and `scope:state` available. (state based on start of route)
#			}
#			example_entity_2 = {
#				entity = "entity_2"
#				position = 1
#				entity_length = 2.0
#				possible = {}
#				count = {}
#			}
#		}
#	}